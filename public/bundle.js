/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcz81ZjcxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. sanctuary-type-identifiers comprises:\n//.\n//.   - an npm and browser -compatible package for deriving the\n//.     _type identifier_ of a JavaScript value; and\n//.   - a specification which authors may follow to specify type\n//.     identifiers for their types.\n//.\n//. ### Specification\n//.\n//. For a type to be compatible with the algorithm:\n//.\n//.   - every member of the type MUST have a `constructor` property\n//.     pointing to an object known as the _type representative_;\n//.\n//.   - the type representative MUST have a `@@type` property\n//.     (the _type identifier_); and\n//.\n//.   - the type identifier MUST be a string primitive and SHOULD have\n//.     format `'<namespace>/<name>[@<version>]'`, where:\n//.\n//.       - `<namespace>` MUST consist of one or more characters, and\n//.         SHOULD equal the name of the npm package which defines the\n//.         type (including [scope][3] where appropriate);\n//.\n//.       - `<name>` MUST consist of one or more characters, and SHOULD\n//.         be the unique name of the type; and\n//.\n//.       - `<version>` MUST consist of one or more digits, and SHOULD\n//.         represent the version of the type.\n//.\n//. If the type identifier does not conform to the format specified above,\n//. it is assumed that the entire string represents the _name_ of the type;\n//. _namespace_ will be `null` and _version_ will be `0`.\n//.\n//. If the _version_ is not given, it is assumed to be `0`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (\"function\" === 'function' && __webpack_require__(0) != null) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  pattern :: RegExp\n  var pattern = new RegExp(\n    '^'\n  + '([\\\\s\\\\S]+)'   //  <namespace>\n  + '/'             //  SOLIDUS (U+002F)\n  + '([\\\\s\\\\S]+?)'  //  <name>\n  + '(?:'           //  optional non-capturing group {\n  +   '@'           //    COMMERCIAL AT (U+0040)\n  +   '([0-9]+)'    //    <version>\n  + ')?'            //  }\n  + '$'\n  );\n\n  //. ### Usage\n  //.\n  //. ```javascript\n  //. const type = require('sanctuary-type-identifiers');\n  //. ```\n  //.\n  //. ```javascript\n  //. > function Identity(x) {\n  //. .   if (!(this instanceof Identity)) return new Identity(x);\n  //. .   this.value = x;\n  //. . }\n  //. . Identity['@@type'] = 'my-package/Identity@1';\n  //.\n  //. > type.parse(type(Identity(0)))\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  //.\n  //. ### API\n  //.\n  //# type :: Any -> String\n  //.\n  //. Takes any value and returns a string which identifies its type. If the\n  //. value conforms to the [specification][4], the custom type identifier is\n  //. returned.\n  //.\n  //. ```javascript\n  //. > type(null)\n  //. 'Null'\n  //.\n  //. > type(true)\n  //. 'Boolean'\n  //.\n  //. > type(Identity(0))\n  //. 'my-package/Identity@1'\n  //. ```\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  //# type.parse :: String -> { namespace :: Nullable String, name :: String, version :: Number }\n  //.\n  //. Takes any string and parses it according to the [specification][4],\n  //. returning an object with `namespace`, `name`, and `version` fields.\n  //.\n  //. ```javascript\n  //. > type.parse('my-package/List@2')\n  //. {namespace: 'my-package', name: 'List', version: 2}\n  //.\n  //. > type.parse('nonsense!')\n  //. {namespace: null, name: 'nonsense!', version: 0}\n  //.\n  //. > type.parse(Identity['@@type'])\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  type.parse = function parse(s) {\n    var groups = pattern.exec(s);\n    return {\n      namespace: groups == null || groups[1] == null ? null : groups[1],\n      name:      groups == null                      ? s    : groups[2],\n      version:   groups == null || groups[3] == null ? 0    : Number(groups[3])\n    };\n  };\n\n  return type;\n\n}));\n\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: https://docs.npmjs.com/misc/scope\n//. [4]: #specification\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return h; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createElement\", function() { return h; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cloneElement\", function() { return cloneElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Component\", function() { return Component; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rerender\", function() { return rerender; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"options\", function() { return options; });\n/** Virtual DOM Node */\nfunction VNode() {}\n\n/** Global options\n *\t@public\n *\t@namespace options {Object}\n */\nvar options = {\n\n\t/** If `true`, `prop` changes trigger synchronous component updates.\n  *\t@name syncComponentUpdates\n  *\t@type Boolean\n  *\t@default true\n  */\n\t//syncComponentUpdates: true,\n\n\t/** Processes all created VNodes.\n  *\t@param {VNode} vnode\tA newly-created VNode to normalize/process\n  */\n\t//vnode(vnode) { }\n\n\t/** Hook invoked after a component is mounted. */\n\t// afterMount(component) { }\n\n\t/** Hook invoked after the DOM is updated with a component's latest render. */\n\t// afterUpdate(component) { }\n\n\t/** Hook invoked immediately before a component is unmounted. */\n\t// beforeUnmount(component) { }\n};\n\nvar stack = [];\n\nvar EMPTY_CHILDREN = [];\n\n/**\n * JSX/hyperscript reviver.\n * @see http://jasonformat.com/wtf-is-jsx\n * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n *\n * Note: this is exported as both `h()` and `createElement()` for compatibility reasons.\n *\n * Creates a VNode (virtual DOM element). A tree of VNodes can be used as a lightweight representation\n * of the structure of a DOM tree. This structure can be realized by recursively comparing it against\n * the current _actual_ DOM structure, and applying only the differences.\n *\n * `h()`/`createElement()` accepts an element name, a list of attributes/props,\n * and optionally children to append to the element.\n *\n * @example The following DOM tree\n *\n * `<div id=\"foo\" name=\"bar\">Hello!</div>`\n *\n * can be constructed using this function as:\n *\n * `h('div', { id: 'foo', name : 'bar' }, 'Hello!');`\n *\n * @param {string} nodeName\tAn element name. Ex: `div`, `a`, `span`, etc.\n * @param {Object} attributes\tAny attributes/props to set on the created element.\n * @param rest\t\t\tAdditional arguments are taken to be children to append. Can be infinitely nested Arrays.\n *\n * @public\n */\nfunction h(nodeName, attributes) {\n\tvar children = EMPTY_CHILDREN,\n\t    lastSimple,\n\t    child,\n\t    simple,\n\t    i;\n\tfor (i = arguments.length; i-- > 2;) {\n\t\tstack.push(arguments[i]);\n\t}\n\tif (attributes && attributes.children != null) {\n\t\tif (!stack.length) stack.push(attributes.children);\n\t\tdelete attributes.children;\n\t}\n\twhile (stack.length) {\n\t\tif ((child = stack.pop()) && child.pop !== undefined) {\n\t\t\tfor (i = child.length; i--;) {\n\t\t\t\tstack.push(child[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tif (typeof child === 'boolean') child = null;\n\n\t\t\tif (simple = typeof nodeName !== 'function') {\n\t\t\t\tif (child == null) child = '';else if (typeof child === 'number') child = String(child);else if (typeof child !== 'string') simple = false;\n\t\t\t}\n\n\t\t\tif (simple && lastSimple) {\n\t\t\t\tchildren[children.length - 1] += child;\n\t\t\t} else if (children === EMPTY_CHILDREN) {\n\t\t\t\tchildren = [child];\n\t\t\t} else {\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\n\t\t\tlastSimple = simple;\n\t\t}\n\t}\n\n\tvar p = new VNode();\n\tp.nodeName = nodeName;\n\tp.children = children;\n\tp.attributes = attributes == null ? undefined : attributes;\n\tp.key = attributes == null ? undefined : attributes.key;\n\n\t// if a \"vnode hook\" is defined, pass every created VNode to it\n\tif (options.vnode !== undefined) options.vnode(p);\n\n\treturn p;\n}\n\n/**\n *  Copy all properties from `props` onto `obj`.\n *  @param {Object} obj\t\tObject onto which properties should be copied.\n *  @param {Object} props\tObject from which to copy properties.\n *  @returns obj\n *  @private\n */\nfunction extend(obj, props) {\n  for (var i in props) {\n    obj[i] = props[i];\n  }return obj;\n}\n\n/**\n * Call a function asynchronously, as soon as possible. Makes\n * use of HTML Promise to schedule the callback if available,\n * otherwise falling back to `setTimeout` (mainly for IE<11).\n *\n * @param {Function} callback\n */\nvar defer = typeof Promise == 'function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {VNode} vnode\t\tThe virutal DOM element to clone\n * @param {Object} props\tAttributes/props to add when cloning\n * @param {VNode} rest\t\tAny additional arguments will be used as replacement children.\n */\nfunction cloneElement(vnode, props) {\n  return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);\n}\n\n// DOM properties that should NOT have \"px\" added when numeric\nvar IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n\n/** Managed queue of dirty components to be re-rendered */\n\nvar items = [];\n\nfunction enqueueRender(component) {\n\tif (!component._dirty && (component._dirty = true) && items.push(component) == 1) {\n\t\t(options.debounceRendering || defer)(rerender);\n\t}\n}\n\nfunction rerender() {\n\tvar p,\n\t    list = items;\n\titems = [];\n\twhile (p = list.pop()) {\n\t\tif (p._dirty) renderComponent(p);\n\t}\n}\n\n/**\n * Check if two nodes are equivalent.\n *\n * @param {Node} node\t\t\tDOM Node to compare\n * @param {VNode} vnode\t\t\tVirtual DOM node to compare\n * @param {boolean} [hyrdating=false]\tIf true, ignores component constructors when comparing.\n * @private\n */\nfunction isSameNodeType(node, vnode, hydrating) {\n  if (typeof vnode === 'string' || typeof vnode === 'number') {\n    return node.splitText !== undefined;\n  }\n  if (typeof vnode.nodeName === 'string') {\n    return !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n  }\n  return hydrating || node._componentConstructor === vnode.nodeName;\n}\n\n/**\n * Check if an Element has a given nodeName, case-insensitively.\n *\n * @param {Element} node\tA DOM Element to inspect the name of.\n * @param {String} nodeName\tUnnormalized name to compare against.\n */\nfunction isNamedNode(node, nodeName) {\n  return node.normalizedNodeName === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();\n}\n\n/**\n * Reconstruct Component-style `props` from a VNode.\n * Ensures default/fallback values from `defaultProps`:\n * Own-properties of `defaultProps` not present in `vnode.attributes` are added.\n *\n * @param {VNode} vnode\n * @returns {Object} props\n */\nfunction getNodeProps(vnode) {\n  var props = extend({}, vnode.attributes);\n  props.children = vnode.children;\n\n  var defaultProps = vnode.nodeName.defaultProps;\n  if (defaultProps !== undefined) {\n    for (var i in defaultProps) {\n      if (props[i] === undefined) {\n        props[i] = defaultProps[i];\n      }\n    }\n  }\n\n  return props;\n}\n\n/** Create an element with the given nodeName.\n *\t@param {String} nodeName\n *\t@param {Boolean} [isSvg=false]\tIf `true`, creates an element within the SVG namespace.\n *\t@returns {Element} node\n */\nfunction createNode(nodeName, isSvg) {\n\tvar node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n\tnode.normalizedNodeName = nodeName;\n\treturn node;\n}\n\n/** Remove a child node from its parent if attached.\n *\t@param {Element} node\t\tThe node to remove\n */\nfunction removeNode(node) {\n\tvar parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\n/** Set a named attribute on the given Node, with special behavior for some names and event handlers.\n *\tIf `value` is `null`, the attribute/handler will be removed.\n *\t@param {Element} node\tAn element to mutate\n *\t@param {string} name\tThe name/key to set, such as an event or attribute name\n *\t@param {any} old\tThe last value that was set for this name/node pair\n *\t@param {any} value\tAn attribute value, such as a function to be used as an event handler\n *\t@param {Boolean} isSvg\tAre we currently diffing inside an svg?\n *\t@private\n */\nfunction setAccessor(node, name, old, value, isSvg) {\n\tif (name === 'className') name = 'class';\n\n\tif (name === 'key') {\n\t\t// ignore\n\t} else if (name === 'ref') {\n\t\tif (old) old(null);\n\t\tif (value) value(node);\n\t} else if (name === 'class' && !isSvg) {\n\t\tnode.className = value || '';\n\t} else if (name === 'style') {\n\t\tif (!value || typeof value === 'string' || typeof old === 'string') {\n\t\t\tnode.style.cssText = value || '';\n\t\t}\n\t\tif (value && typeof value === 'object') {\n\t\t\tif (typeof old !== 'string') {\n\t\t\t\tfor (var i in old) {\n\t\t\t\t\tif (!(i in value)) node.style[i] = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i in value) {\n\t\t\t\tnode.style[i] = typeof value[i] === 'number' && IS_NON_DIMENSIONAL.test(i) === false ? value[i] + 'px' : value[i];\n\t\t\t}\n\t\t}\n\t} else if (name === 'dangerouslySetInnerHTML') {\n\t\tif (value) node.innerHTML = value.__html || '';\n\t} else if (name[0] == 'o' && name[1] == 'n') {\n\t\tvar useCapture = name !== (name = name.replace(/Capture$/, ''));\n\t\tname = name.toLowerCase().substring(2);\n\t\tif (value) {\n\t\t\tif (!old) node.addEventListener(name, eventProxy, useCapture);\n\t\t} else {\n\t\t\tnode.removeEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\t(node._listeners || (node._listeners = {}))[name] = value;\n\t} else if (name !== 'list' && name !== 'type' && !isSvg && name in node) {\n\t\tsetProperty(node, name, value == null ? '' : value);\n\t\tif (value == null || value === false) node.removeAttribute(name);\n\t} else {\n\t\tvar ns = isSvg && name !== (name = name.replace(/^xlink\\:?/, ''));\n\t\tif (value == null || value === false) {\n\t\t\tif (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());else node.removeAttribute(name);\n\t\t} else if (typeof value !== 'function') {\n\t\t\tif (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);else node.setAttribute(name, value);\n\t\t}\n\t}\n}\n\n/** Attempt to set a DOM property to the given value.\n *\tIE & FF throw for certain property-value combinations.\n */\nfunction setProperty(node, name, value) {\n\ttry {\n\t\tnode[name] = value;\n\t} catch (e) {}\n}\n\n/** Proxy an event to hooked event handlers\n *\t@private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type](options.event && options.event(e) || e);\n}\n\n/** Queue of components that have been mounted and are awaiting componentDidMount */\nvar mounts = [];\n\n/** Diff recursion count, used to track the end of the diff cycle. */\nvar diffLevel = 0;\n\n/** Global flag indicating if the diff is currently within an SVG */\nvar isSvgMode = false;\n\n/** Global flag indicating if the diff is performing hydration */\nvar hydrating = false;\n\n/** Invoke queued componentDidMount lifecycle methods */\nfunction flushMounts() {\n\tvar c;\n\twhile (c = mounts.pop()) {\n\t\tif (options.afterMount) options.afterMount(c);\n\t\tif (c.componentDidMount) c.componentDidMount();\n\t}\n}\n\n/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n *\t@param {Element} [dom=null]\t\tA DOM node to mutate into the shape of the `vnode`\n *\t@param {VNode} vnode\t\t\tA VNode (with descendants forming a tree) representing the desired DOM structure\n *\t@returns {Element} dom\t\t\tThe created/mutated element\n *\t@private\n */\nfunction diff(dom, vnode, context, mountAll, parent, componentRoot) {\n\t// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\n\tif (!diffLevel++) {\n\t\t// when first starting the diff, check if we're diffing an SVG or within an SVG\n\t\tisSvgMode = parent != null && parent.ownerSVGElement !== undefined;\n\n\t\t// hydration is indicated by the existing element to be diffed not having a prop cache\n\t\thydrating = dom != null && !('__preactattr_' in dom);\n\t}\n\n\tvar ret = idiff(dom, vnode, context, mountAll, componentRoot);\n\n\t// append the element if its a new parent\n\tif (parent && ret.parentNode !== parent) parent.appendChild(ret);\n\n\t// diffLevel being reduced to 0 means we're exiting the diff\n\tif (! --diffLevel) {\n\t\thydrating = false;\n\t\t// invoke queued componentDidMount lifecycle methods\n\t\tif (!componentRoot) flushMounts();\n\t}\n\n\treturn ret;\n}\n\n/** Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing. */\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\n\tvar out = dom,\n\t    prevSvgMode = isSvgMode;\n\n\t// empty values (null, undefined, booleans) render as empty Text nodes\n\tif (vnode == null || typeof vnode === 'boolean') vnode = '';\n\n\t// Fast case: Strings & Numbers create/update Text nodes.\n\tif (typeof vnode === 'string' || typeof vnode === 'number') {\n\n\t\t// update if it's already a Text node:\n\t\tif (dom && dom.splitText !== undefined && dom.parentNode && (!dom._component || componentRoot)) {\n\t\t\t/* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */\n\t\t\tif (dom.nodeValue != vnode) {\n\t\t\t\tdom.nodeValue = vnode;\n\t\t\t}\n\t\t} else {\n\t\t\t// it wasn't a Text node: replace it with one and recycle the old Element\n\t\t\tout = document.createTextNode(vnode);\n\t\t\tif (dom) {\n\t\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\t\t\t\trecollectNodeTree(dom, true);\n\t\t\t}\n\t\t}\n\n\t\tout['__preactattr_'] = true;\n\n\t\treturn out;\n\t}\n\n\t// If the VNode represents a Component, perform a component diff:\n\tvar vnodeName = vnode.nodeName;\n\tif (typeof vnodeName === 'function') {\n\t\treturn buildComponentFromVNode(dom, vnode, context, mountAll);\n\t}\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tisSvgMode = vnodeName === 'svg' ? true : vnodeName === 'foreignObject' ? false : isSvgMode;\n\n\t// If there's no existing element or it's the wrong type, create a new one:\n\tvnodeName = String(vnodeName);\n\tif (!dom || !isNamedNode(dom, vnodeName)) {\n\t\tout = createNode(vnodeName, isSvgMode);\n\n\t\tif (dom) {\n\t\t\t// move children into the replacement node\n\t\t\twhile (dom.firstChild) {\n\t\t\t\tout.appendChild(dom.firstChild);\n\t\t\t} // if the previous Element was mounted into the DOM, replace it inline\n\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\n\t\t\t// recycle the old element (skips non-Element node types)\n\t\t\trecollectNodeTree(dom, true);\n\t\t}\n\t}\n\n\tvar fc = out.firstChild,\n\t    props = out['__preactattr_'],\n\t    vchildren = vnode.children;\n\n\tif (props == null) {\n\t\tprops = out['__preactattr_'] = {};\n\t\tfor (var a = out.attributes, i = a.length; i--;) {\n\t\t\tprops[a[i].name] = a[i].value;\n\t\t}\n\t}\n\n\t// Optimization: fast-path for elements containing a single TextNode:\n\tif (!hydrating && vchildren && vchildren.length === 1 && typeof vchildren[0] === 'string' && fc != null && fc.splitText !== undefined && fc.nextSibling == null) {\n\t\tif (fc.nodeValue != vchildren[0]) {\n\t\t\tfc.nodeValue = vchildren[0];\n\t\t}\n\t}\n\t// otherwise, if there are existing or new children, diff them:\n\telse if (vchildren && vchildren.length || fc != null) {\n\t\t\tinnerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML != null);\n\t\t}\n\n\t// Apply attributes/props from VNode to the DOM Element:\n\tdiffAttributes(out, vnode.attributes, props);\n\n\t// restore previous SVG mode: (in case we're exiting an SVG namespace)\n\tisSvgMode = prevSvgMode;\n\n\treturn out;\n}\n\n/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.\n *\t@param {Element} dom\t\t\tElement whose children should be compared & mutated\n *\t@param {Array} vchildren\t\tArray of VNodes to compare to `dom.childNodes`\n *\t@param {Object} context\t\t\tImplicitly descendant context object (from most recent `getChildContext()`)\n *\t@param {Boolean} mountAll\n *\t@param {Boolean} isHydrating\tIf `true`, consumes externally created elements similar to hydration\n */\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\n\tvar originalChildren = dom.childNodes,\n\t    children = [],\n\t    keyed = {},\n\t    keyedLen = 0,\n\t    min = 0,\n\t    len = originalChildren.length,\n\t    childrenLen = 0,\n\t    vlen = vchildren ? vchildren.length : 0,\n\t    j,\n\t    c,\n\t    f,\n\t    vchild,\n\t    child;\n\n\t// Build up a map of keyed children and an Array of unkeyed children:\n\tif (len !== 0) {\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tvar _child = originalChildren[i],\n\t\t\t    props = _child['__preactattr_'],\n\t\t\t    key = vlen && props ? _child._component ? _child._component.__key : props.key : null;\n\t\t\tif (key != null) {\n\t\t\t\tkeyedLen++;\n\t\t\t\tkeyed[key] = _child;\n\t\t\t} else if (props || (_child.splitText !== undefined ? isHydrating ? _child.nodeValue.trim() : true : isHydrating)) {\n\t\t\t\tchildren[childrenLen++] = _child;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (vlen !== 0) {\n\t\tfor (var i = 0; i < vlen; i++) {\n\t\t\tvchild = vchildren[i];\n\t\t\tchild = null;\n\n\t\t\t// attempt to find a node based on key matching\n\t\t\tvar key = vchild.key;\n\t\t\tif (key != null) {\n\t\t\t\tif (keyedLen && keyed[key] !== undefined) {\n\t\t\t\t\tchild = keyed[key];\n\t\t\t\t\tkeyed[key] = undefined;\n\t\t\t\t\tkeyedLen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// attempt to pluck a node of the same type from the existing children\n\t\t\telse if (!child && min < childrenLen) {\n\t\t\t\t\tfor (j = min; j < childrenLen; j++) {\n\t\t\t\t\t\tif (children[j] !== undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n\t\t\t\t\t\t\tchild = c;\n\t\t\t\t\t\t\tchildren[j] = undefined;\n\t\t\t\t\t\t\tif (j === childrenLen - 1) childrenLen--;\n\t\t\t\t\t\t\tif (j === min) min++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// morph the matched/found/created DOM child to match vchild (deep)\n\t\t\tchild = idiff(child, vchild, context, mountAll);\n\n\t\t\tf = originalChildren[i];\n\t\t\tif (child && child !== dom && child !== f) {\n\t\t\t\tif (f == null) {\n\t\t\t\t\tdom.appendChild(child);\n\t\t\t\t} else if (child === f.nextSibling) {\n\t\t\t\t\tremoveNode(f);\n\t\t\t\t} else {\n\t\t\t\t\tdom.insertBefore(child, f);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// remove unused keyed children:\n\tif (keyedLen) {\n\t\tfor (var i in keyed) {\n\t\t\tif (keyed[i] !== undefined) recollectNodeTree(keyed[i], false);\n\t\t}\n\t}\n\n\t// remove orphaned unkeyed children:\n\twhile (min <= childrenLen) {\n\t\tif ((child = children[childrenLen--]) !== undefined) recollectNodeTree(child, false);\n\t}\n}\n\n/** Recursively recycle (or just unmount) a node and its descendants.\n *\t@param {Node} node\t\t\t\t\t\tDOM node to start unmount/removal from\n *\t@param {Boolean} [unmountOnly=false]\tIf `true`, only triggers unmount lifecycle, skips removal\n */\nfunction recollectNodeTree(node, unmountOnly) {\n\tvar component = node._component;\n\tif (component) {\n\t\t// if node is owned by a Component, unmount that component (ends up recursing back here)\n\t\tunmountComponent(component);\n\t} else {\n\t\t// If the node's VNode had a ref function, invoke it with null here.\n\t\t// (this is part of the React spec, and smart for unsetting references)\n\t\tif (node['__preactattr_'] != null && node['__preactattr_'].ref) node['__preactattr_'].ref(null);\n\n\t\tif (unmountOnly === false || node['__preactattr_'] == null) {\n\t\t\tremoveNode(node);\n\t\t}\n\n\t\tremoveChildren(node);\n\t}\n}\n\n/** Recollect/unmount all children.\n *\t- we use .lastChild here because it causes less reflow than .firstChild\n *\t- it's also cheaper than accessing the .childNodes Live NodeList\n */\nfunction removeChildren(node) {\n\tnode = node.lastChild;\n\twhile (node) {\n\t\tvar next = node.previousSibling;\n\t\trecollectNodeTree(node, true);\n\t\tnode = next;\n\t}\n}\n\n/** Apply differences in attributes from a VNode to the given DOM Element.\n *\t@param {Element} dom\t\tElement with attributes to diff `attrs` against\n *\t@param {Object} attrs\t\tThe desired end-state key-value attribute pairs\n *\t@param {Object} old\t\t\tCurrent/previous attributes (from previous VNode or element's prop cache)\n */\nfunction diffAttributes(dom, attrs, old) {\n\tvar name;\n\n\t// remove attributes no longer present on the vnode by setting them to undefined\n\tfor (name in old) {\n\t\tif (!(attrs && attrs[name] != null) && old[name] != null) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n\t\t}\n\t}\n\n\t// add new & update changed attributes\n\tfor (name in attrs) {\n\t\tif (name !== 'children' && name !== 'innerHTML' && (!(name in old) || attrs[name] !== (name === 'value' || name === 'checked' ? dom[name] : old[name]))) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n\t\t}\n\t}\n}\n\n/** Retains a pool of Components for re-use, keyed on component name.\n *\tNote: since component names are not unique or even necessarily available, these are primarily a form of sharding.\n *\t@private\n */\nvar components = {};\n\n/** Reclaim a component for later re-use by the recycler. */\nfunction collectComponent(component) {\n\tvar name = component.constructor.name;\n\t(components[name] || (components[name] = [])).push(component);\n}\n\n/** Create a component. Normalizes differences between PFC's and classful Components. */\nfunction createComponent(Ctor, props, context) {\n\tvar list = components[Ctor.name],\n\t    inst;\n\n\tif (Ctor.prototype && Ctor.prototype.render) {\n\t\tinst = new Ctor(props, context);\n\t\tComponent.call(inst, props, context);\n\t} else {\n\t\tinst = new Component(props, context);\n\t\tinst.constructor = Ctor;\n\t\tinst.render = doRender;\n\t}\n\n\tif (list) {\n\t\tfor (var i = list.length; i--;) {\n\t\t\tif (list[i].constructor === Ctor) {\n\t\t\t\tinst.nextBase = list[i].nextBase;\n\t\t\t\tlist.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn inst;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n\n/** Set a component's `props` (generally derived from JSX attributes).\n *\t@param {Object} props\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.renderSync=false]\tIf `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.\n *\t@param {boolean} [opts.render=true]\t\t\tIf `false`, no render will be triggered.\n */\nfunction setComponentProps(component, props, opts, context, mountAll) {\n\tif (component._disable) return;\n\tcomponent._disable = true;\n\n\tif (component.__ref = props.ref) delete props.ref;\n\tif (component.__key = props.key) delete props.key;\n\n\tif (!component.base || mountAll) {\n\t\tif (component.componentWillMount) component.componentWillMount();\n\t} else if (component.componentWillReceiveProps) {\n\t\tcomponent.componentWillReceiveProps(props, context);\n\t}\n\n\tif (context && context !== component.context) {\n\t\tif (!component.prevContext) component.prevContext = component.context;\n\t\tcomponent.context = context;\n\t}\n\n\tif (!component.prevProps) component.prevProps = component.props;\n\tcomponent.props = props;\n\n\tcomponent._disable = false;\n\n\tif (opts !== 0) {\n\t\tif (opts === 1 || options.syncComponentUpdates !== false || !component.base) {\n\t\t\trenderComponent(component, 1, mountAll);\n\t\t} else {\n\t\t\tenqueueRender(component);\n\t\t}\n\t}\n\n\tif (component.__ref) component.__ref(component);\n}\n\n/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.\n *\t@param {Component} component\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.build=false]\t\tIf `true`, component will build and store a DOM node if not already associated with one.\n *\t@private\n */\nfunction renderComponent(component, opts, mountAll, isChild) {\n\tif (component._disable) return;\n\n\tvar props = component.props,\n\t    state = component.state,\n\t    context = component.context,\n\t    previousProps = component.prevProps || props,\n\t    previousState = component.prevState || state,\n\t    previousContext = component.prevContext || context,\n\t    isUpdate = component.base,\n\t    nextBase = component.nextBase,\n\t    initialBase = isUpdate || nextBase,\n\t    initialChildComponent = component._component,\n\t    skip = false,\n\t    rendered,\n\t    inst,\n\t    cbase;\n\n\t// if updating\n\tif (isUpdate) {\n\t\tcomponent.props = previousProps;\n\t\tcomponent.state = previousState;\n\t\tcomponent.context = previousContext;\n\t\tif (opts !== 2 && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === false) {\n\t\t\tskip = true;\n\t\t} else if (component.componentWillUpdate) {\n\t\t\tcomponent.componentWillUpdate(props, state, context);\n\t\t}\n\t\tcomponent.props = props;\n\t\tcomponent.state = state;\n\t\tcomponent.context = context;\n\t}\n\n\tcomponent.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n\tcomponent._dirty = false;\n\n\tif (!skip) {\n\t\trendered = component.render(props, state, context);\n\n\t\t// context to pass to the child, can be updated via (grand-)parent component\n\t\tif (component.getChildContext) {\n\t\t\tcontext = extend(extend({}, context), component.getChildContext());\n\t\t}\n\n\t\tvar childComponent = rendered && rendered.nodeName,\n\t\t    toUnmount,\n\t\t    base;\n\n\t\tif (typeof childComponent === 'function') {\n\t\t\t// set up high order component link\n\n\t\t\tvar childProps = getNodeProps(rendered);\n\t\t\tinst = initialChildComponent;\n\n\t\t\tif (inst && inst.constructor === childComponent && childProps.key == inst.__key) {\n\t\t\t\tsetComponentProps(inst, childProps, 1, context, false);\n\t\t\t} else {\n\t\t\t\ttoUnmount = inst;\n\n\t\t\t\tcomponent._component = inst = createComponent(childComponent, childProps, context);\n\t\t\t\tinst.nextBase = inst.nextBase || nextBase;\n\t\t\t\tinst._parentComponent = component;\n\t\t\t\tsetComponentProps(inst, childProps, 0, context, false);\n\t\t\t\trenderComponent(inst, 1, mountAll, true);\n\t\t\t}\n\n\t\t\tbase = inst.base;\n\t\t} else {\n\t\t\tcbase = initialBase;\n\n\t\t\t// destroy high order component link\n\t\t\ttoUnmount = initialChildComponent;\n\t\t\tif (toUnmount) {\n\t\t\t\tcbase = component._component = null;\n\t\t\t}\n\n\t\t\tif (initialBase || opts === 1) {\n\t\t\t\tif (cbase) cbase._component = null;\n\t\t\t\tbase = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);\n\t\t\t}\n\t\t}\n\n\t\tif (initialBase && base !== initialBase && inst !== initialChildComponent) {\n\t\t\tvar baseParent = initialBase.parentNode;\n\t\t\tif (baseParent && base !== baseParent) {\n\t\t\t\tbaseParent.replaceChild(base, initialBase);\n\n\t\t\t\tif (!toUnmount) {\n\t\t\t\t\tinitialBase._component = null;\n\t\t\t\t\trecollectNodeTree(initialBase, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (toUnmount) {\n\t\t\tunmountComponent(toUnmount);\n\t\t}\n\n\t\tcomponent.base = base;\n\t\tif (base && !isChild) {\n\t\t\tvar componentRef = component,\n\t\t\t    t = component;\n\t\t\twhile (t = t._parentComponent) {\n\t\t\t\t(componentRef = t).base = base;\n\t\t\t}\n\t\t\tbase._component = componentRef;\n\t\t\tbase._componentConstructor = componentRef.constructor;\n\t\t}\n\t}\n\n\tif (!isUpdate || mountAll) {\n\t\tmounts.unshift(component);\n\t} else if (!skip) {\n\t\t// Ensure that pending componentDidMount() hooks of child components\n\t\t// are called before the componentDidUpdate() hook in the parent.\n\t\t// Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750\n\t\t// flushMounts();\n\n\t\tif (component.componentDidUpdate) {\n\t\t\tcomponent.componentDidUpdate(previousProps, previousState, previousContext);\n\t\t}\n\t\tif (options.afterUpdate) options.afterUpdate(component);\n\t}\n\n\tif (component._renderCallbacks != null) {\n\t\twhile (component._renderCallbacks.length) {\n\t\t\tcomponent._renderCallbacks.pop().call(component);\n\t\t}\n\t}\n\n\tif (!diffLevel && !isChild) flushMounts();\n}\n\n/** Apply the Component referenced by a VNode to the DOM.\n *\t@param {Element} dom\tThe DOM node to mutate\n *\t@param {VNode} vnode\tA Component-referencing VNode\n *\t@returns {Element} dom\tThe created/mutated element\n *\t@private\n */\nfunction buildComponentFromVNode(dom, vnode, context, mountAll) {\n\tvar c = dom && dom._component,\n\t    originalComponent = c,\n\t    oldDom = dom,\n\t    isDirectOwner = c && dom._componentConstructor === vnode.nodeName,\n\t    isOwner = isDirectOwner,\n\t    props = getNodeProps(vnode);\n\twhile (c && !isOwner && (c = c._parentComponent)) {\n\t\tisOwner = c.constructor === vnode.nodeName;\n\t}\n\n\tif (c && isOwner && (!mountAll || c._component)) {\n\t\tsetComponentProps(c, props, 3, context, mountAll);\n\t\tdom = c.base;\n\t} else {\n\t\tif (originalComponent && !isDirectOwner) {\n\t\t\tunmountComponent(originalComponent);\n\t\t\tdom = oldDom = null;\n\t\t}\n\n\t\tc = createComponent(vnode.nodeName, props, context);\n\t\tif (dom && !c.nextBase) {\n\t\t\tc.nextBase = dom;\n\t\t\t// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:\n\t\t\toldDom = null;\n\t\t}\n\t\tsetComponentProps(c, props, 1, context, mountAll);\n\t\tdom = c.base;\n\n\t\tif (oldDom && dom !== oldDom) {\n\t\t\toldDom._component = null;\n\t\t\trecollectNodeTree(oldDom, false);\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/** Remove a component from the DOM and recycle it.\n *\t@param {Component} component\tThe Component instance to unmount\n *\t@private\n */\nfunction unmountComponent(component) {\n\tif (options.beforeUnmount) options.beforeUnmount(component);\n\n\tvar base = component.base;\n\n\tcomponent._disable = true;\n\n\tif (component.componentWillUnmount) component.componentWillUnmount();\n\n\tcomponent.base = null;\n\n\t// recursively tear down & recollect high-order component children:\n\tvar inner = component._component;\n\tif (inner) {\n\t\tunmountComponent(inner);\n\t} else if (base) {\n\t\tif (base['__preactattr_'] && base['__preactattr_'].ref) base['__preactattr_'].ref(null);\n\n\t\tcomponent.nextBase = base;\n\n\t\tremoveNode(base);\n\t\tcollectComponent(component);\n\n\t\tremoveChildren(base);\n\t}\n\n\tif (component.__ref) component.__ref(null);\n}\n\n/** Base Component class.\n *\tProvides `setState()` and `forceUpdate()`, which trigger rendering.\n *\t@public\n *\n *\t@example\n *\tclass MyFoo extends Component {\n *\t\trender(props, state) {\n *\t\t\treturn <div />;\n *\t\t}\n *\t}\n */\nfunction Component(props, context) {\n\tthis._dirty = true;\n\n\t/** @public\n  *\t@type {object}\n  */\n\tthis.context = context;\n\n\t/** @public\n  *\t@type {object}\n  */\n\tthis.props = props;\n\n\t/** @public\n  *\t@type {object}\n  */\n\tthis.state = this.state || {};\n}\n\nextend(Component.prototype, {\n\n\t/** Returns a `boolean` indicating if the component should re-render when receiving the given `props` and `state`.\n  *\t@param {object} nextProps\n  *\t@param {object} nextState\n  *\t@param {object} nextContext\n  *\t@returns {Boolean} should the component re-render\n  *\t@name shouldComponentUpdate\n  *\t@function\n  */\n\n\t/** Update component state by copying properties from `state` to `this.state`.\n  *\t@param {object} state\t\tA hash of state properties to update with new values\n  *\t@param {function} callback\tA function to be called once component state is updated\n  */\n\tsetState: function setState(state, callback) {\n\t\tvar s = this.state;\n\t\tif (!this.prevState) this.prevState = extend({}, s);\n\t\textend(s, typeof state === 'function' ? state(s, this.props) : state);\n\t\tif (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);\n\t\tenqueueRender(this);\n\t},\n\n\n\t/** Immediately perform a synchronous re-render of the component.\n  *\t@param {function} callback\t\tA function to be called after component is re-rendered.\n  *\t@private\n  */\n\tforceUpdate: function forceUpdate(callback) {\n\t\tif (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);\n\t\trenderComponent(this, 2);\n\t},\n\n\n\t/** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n  *\tVirtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n  *\t@param {object} props\t\tProps (eg: JSX attributes) received from parent element/component\n  *\t@param {object} state\t\tThe component's current state\n  *\t@param {object} context\t\tContext object (if a parent component has provided context)\n  *\t@returns VNode\n  */\n\trender: function render() {}\n});\n\n/** Render JSX into a `parent` Element.\n *\t@param {VNode} vnode\t\tA (JSX) VNode to render\n *\t@param {Element} parent\t\tDOM element to render into\n *\t@param {Element} [merge]\tAttempt to re-use an existing DOM tree rooted at `merge`\n *\t@public\n *\n *\t@example\n *\t// render a div into <body>:\n *\trender(<div id=\"hello\">hello!</div>, document.body);\n *\n *\t@example\n *\t// render a \"Thing\" component into #foo:\n *\tconst Thing = ({ name }) => <span>{ name }</span>;\n *\trender(<Thing name=\"one\" />, document.querySelector('#foo'));\n */\nfunction render(vnode, parent, merge) {\n  return diff(merge, vnode, {}, false, parent, false);\n}\n\nvar preact = {\n\th: h,\n\tcreateElement: h,\n\tcloneElement: cloneElement,\n\tComponent: Component,\n\trender: render,\n\trerender: rerender,\n\toptions: options\n};\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (preact);\n//# sourceMappingURL=preact.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*              ___                 ______\n               /  /\\               /  ___/\\\n        ______/  / / _______    __/  /___\\/\n       /  ___   / / /  ___  \\  /_   __/\\\n      /  /\\_/  / / /  /__/  /\\ \\/  /\\_\\/\n     /  / //  / / /  ______/ / /  / /\n    /  /_//  / / /  /______\\/ /  / /\n    \\_______/ /  \\_______/\\  /__/ /\n     \\______\\/    \\______\\/  \\__*/\n\n//. # sanctuary-def\n//.\n//. sanctuary-def is a run-time type system for JavaScript. It facilitates\n//. the definition of curried JavaScript functions which are explicit about\n//. the number of arguments to which they may be applied and the types of\n//. those arguments.\n//.\n//. It is conventional to import the package as `$`:\n//.\n//. ```javascript\n//. const $ = require('sanctuary-def');\n//. ```\n//.\n//. The next step is to define an environment. An environment is an array\n//. of [types][]. [`env`][] is an environment containing all the built-in\n//. JavaScript types. It may be used as the basis for environments which\n//. include custom types in addition to the built-in types:\n//.\n//. ```javascript\n//. //    Integer :: Type\n//. const Integer = ...;\n//.\n//. //    NonZeroInteger :: Type\n//. const NonZeroInteger = ...;\n//.\n//. //    env :: Array Type\n//. const env = $.env.concat([Integer, NonZeroInteger]);\n//. ```\n//.\n//. Type constructors such as `List :: Type -> Type` cannot be included in\n//. an environment as they're not of the correct type. One could, though,\n//. use a type constructor to define a fixed number of concrete types:\n//.\n//. ```javascript\n//. //    env :: Array Type\n//. const env = $.env.concat([\n//.   List($.Number),               // :: Type\n//.   List($.String),               // :: Type\n//.   List(List($.Number)),         // :: Type\n//.   List(List($.String)),         // :: Type\n//.   List(List(List($.Number))),   // :: Type\n//.   List(List(List($.String))),   // :: Type\n//. ]);\n//. ```\n//.\n//. Not only would this be tedious, but one could never enumerate all possible\n//. types as there are infinitely many. Instead, one should use [`Unknown`][]:\n//.\n//. ```javascript\n//. //    env :: Array Type\n//. const env = $.env.concat([List($.Unknown)]);\n//. ```\n//.\n//. The next step is to define a `def` function for the environment:\n//.\n//. ```javascript\n//. const def = $.create({checkTypes: true, env: env});\n//. ```\n//.\n//. The `checkTypes` option determines whether type checking is enabled.\n//. This allows one to only pay the performance cost of run-time type checking\n//. during development. For example:\n//.\n//. ```javascript\n//. const def = $.create({\n//.   checkTypes: process.env.NODE_ENV === 'development',\n//.   env: env,\n//. });\n//. ```\n//.\n//. `def` is a function for defining functions. For example:\n//.\n//. ```javascript\n//. //    add :: Number -> Number -> Number\n//. const add =\n//. def('add', {}, [$.Number, $.Number, $.Number], (x, y) => x + y);\n//. ```\n//.\n//. `[$.Number, $.Number, $.Number]` specifies that `add` takes two arguments\n//. of type `Number` and returns a value of type `Number`.\n//.\n//. Applying `add` to two arguments gives the expected result:\n//.\n//. ```javascript\n//. add(2, 2);\n//. // => 4\n//. ```\n//.\n//. Applying `add` to greater than two arguments results in an exception being\n//. thrown:\n//.\n//. ```javascript\n//. add(2, 2, 2);\n//. // ! TypeError: ‘add’ requires two arguments; received three arguments\n//. ```\n//.\n//. Applying `add` to fewer than two arguments results in a function\n//. awaiting the remaining arguments. This is known as partial application.\n//. Partial application is convenient as it allows more specific functions\n//. to be defined in terms of more general ones:\n//.\n//. ```javascript\n//. //    inc :: Number -> Number\n//. const inc = add(1);\n//.\n//. inc(7);\n//. // => 8\n//. ```\n//.\n//. JavaScript's implicit type coercion often obfuscates the source of type\n//. errors. Consider the following function:\n//.\n//. ```javascript\n//. //    _add :: (Number, Number) -> Number\n//. const _add = (x, y) => x + y;\n//. ```\n//.\n//. The type signature indicates that `_add` takes two arguments of type\n//. `Number`, but this is not enforced. This allows type errors to be silently\n//. ignored:\n//.\n//. ```javascript\n//. _add('2', '2');\n//. // => '22'\n//. ```\n//.\n//. `add`, on the other hand, throws if applied to arguments of the wrong\n//. types:\n//.\n//. ```javascript\n//. add('2', '2');\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   1)  \"2\" :: String\n//. //\n//. //   The value at position 1 is not a member of ‘Number’.\n//. ```\n//.\n//. Type checking is performed as arguments are provided (rather than once all\n//. arguments have been provided), so type errors are reported early:\n//.\n//. ```javascript\n//. add('X');\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   1)  \"X\" :: String\n//. //\n//. //   The value at position 1 is not a member of ‘Number’.\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(__webpack_require__(13),\n                       __webpack_require__(1));\n  } else if (\"function\" === 'function' && __webpack_require__(0) != null) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(13), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    self.sanctuaryDef = f(self.sanctuaryTypeClasses,\n                          self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(Z, type) {\n\n  'use strict';\n\n  //# __ :: Placeholder\n  //.\n  //. The special placeholder value.\n  //.\n  //. One may wish to partially apply a function whose parameters are in the\n  //. \"wrong\" order. Functions defined via sanctuary-def accommodate this by\n  //. accepting placeholders for arguments yet to be provided. For example:\n  //.\n  //. ```javascript\n  //. //    concatS :: String -> String -> String\n  //. const concatS =\n  //. def('concatS', {}, [$.String, $.String, $.String], (x, y) => x + y);\n  //.\n  //. //    exclaim :: String -> String\n  //. const exclaim = concatS($.__, '!');\n  //.\n  //. exclaim('ahoy');\n  //. // => 'ahoy!'\n  //. ```\n  var __ = {'@@functional/placeholder': true};\n\n  var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\n  var MIN_SAFE_INTEGER = -MAX_SAFE_INTEGER;\n\n  var slice             = Array.prototype.slice;\n  var hasOwnProperty    = Object.prototype.hasOwnProperty;\n\n  function Either(tag, value) {\n    this.isLeft = tag === 'Left';\n    this.isRight = tag === 'Right';\n    this.value = value;\n  }\n\n  Either['@@type'] = 'sanctuary-def/Either';\n\n  Either.prototype['fantasy-land/map'] = function(f) {\n    return this.isLeft ? this : Right(f(this.value));\n  };\n\n  Either.prototype['fantasy-land/chain'] = function(f) {\n    return this.isLeft ? this : f(this.value);\n  };\n\n  //  Left :: a -> Either a b\n  function Left(x) { return new Either('Left', x); }\n\n  //  Right :: b -> Either a b\n  function Right(x) { return new Either('Right', x); }\n\n  //  K :: a -> b -> a\n  function K(x) { return function(y) { return x; }; }\n\n  //  always2 :: a -> (b, c) -> a\n  function always2(x) { return function(y, z) { return x; }; }\n\n  //  id :: a -> a\n  function id(x) { return x; }\n\n  //  init :: Array a -> Array a\n  function init(xs) { return xs.slice(0, -1); }\n\n  //  isEmpty :: Array a -> Boolean\n  function isEmpty(xs) { return xs.length === 0; }\n\n  //  isPrefix :: Array a -> Array a -> Boolean\n  function isPrefix(candidate) {\n    return function(xs) {\n      if (candidate.length > xs.length) return false;\n      for (var idx = 0; idx < candidate.length; idx += 1) {\n        if (candidate[idx] !== xs[idx]) return false;\n      }\n      return true;\n    };\n  }\n\n  //  last :: Array a -> a\n  function last(xs) { return xs[xs.length - 1]; }\n\n  //  memberOf :: Array a -> a -> Boolean\n  function memberOf(xs) {\n    return function(y) {\n      return xs.some(function(x) { return Z.equals(x, y); });\n    };\n  }\n\n  //  or :: (Array a, Array a) -> Array a\n  function or(xs, ys) { return isEmpty(xs) ? ys : xs; }\n\n  //  range :: (Number, Number) -> Array Number\n  function range(start, stop) {\n    var result = [];\n    for (var n = start; n < stop; n += 1) result.push(n);\n    return result;\n  }\n\n  //  singleton :: (String, a) -> StrMap a\n  function singleton(k, v) {\n    var result = {};\n    result[k] = v;\n    return result;\n  }\n\n  //  strRepeat :: (String, Integer) -> String\n  function strRepeat(s, times) {\n    return Array(times + 1).join(s);\n  }\n\n  //  r :: Char -> String -> String\n  function r(c) {\n    return function(s) {\n      return strRepeat(c, s.length);\n    };\n  }\n\n  //  _ :: String -> String\n  var _ = r(' ');\n\n  //  stripOutermostParens :: String -> String\n  function stripOutermostParens(s) {\n    return s.slice('('.length, -')'.length);\n  }\n\n  //  toMarkdownList :: (String, String, a -> String, Array a) -> String\n  function toMarkdownList(empty, s, f, xs) {\n    return isEmpty(xs) ?\n      empty :\n      Z.reduce(function(s, x) { return s + '  - ' + f(x) + '\\n'; }, s, xs);\n  }\n\n  //  trimTrailingSpaces :: String -> String\n  function trimTrailingSpaces(s) {\n    return s.replace(/[ ]+$/gm, '');\n  }\n\n  //  unless :: (Boolean, (a -> a), a) -> a\n  function unless(bool, f, x) {\n    return bool ? x : f(x);\n  }\n\n  //  when :: (Boolean, (a -> a), a) -> a\n  function when(bool, f, x) {\n    return bool ? f(x) : x;\n  }\n\n  //  wrap :: String -> String -> String -> String\n  function wrap(prefix) {\n    return function(suffix) {\n      return function(s) {\n        return prefix + s + suffix;\n      };\n    };\n  }\n\n  //  parenthesize :: String -> String\n  var parenthesize = wrap('(')(')');\n\n  //  q :: String -> String\n  var q = wrap('\\u2018')('\\u2019');\n\n  //  stripNamespace :: String -> String\n  function stripNamespace(s) { return s.slice(s.indexOf('/') + 1); }\n\n  //  _Type :: ... -> Type\n  function _Type(\n    type,       // :: String\n    name,       // :: String\n    url,        // :: String\n    format,     // :: (String -> String, String -> String -> String) -> String\n    test,       // :: Any -> Boolean\n    keys,       // :: Array String\n    types       // :: StrMap { extractor :: a -> Array b, type :: Type }\n  ) {\n    this._test = test;\n    this.format = format;\n    this.keys = keys;\n    this.name = name;\n    this.type = type;\n    this.types = types;\n    this.url = url;\n  }\n\n  _Type['@@type'] = 'sanctuary-def/Type';\n\n  _Type.prototype.validate = function(x) {\n    if (!this._test(x)) return Left({value: x, propPath: []});\n    for (var idx = 0; idx < this.keys.length; idx += 1) {\n      var k = this.keys[idx];\n      var t = this.types[k];\n      for (var idx2 = 0, ys = t.extractor(x); idx2 < ys.length; idx2 += 1) {\n        var result = t.type.validate(ys[idx2]);\n        if (result.isLeft) {\n          var value = result.value.value;\n          var propPath = Z.concat([k], result.value.propPath);\n          return Left({value: value, propPath: propPath});\n        }\n      }\n    }\n    return Right(x);\n  };\n\n  _Type.prototype.toString = function() {\n    return this.format(id, K(id));\n  };\n\n  var BINARY        = 'BINARY';\n  var FUNCTION      = 'FUNCTION';\n  var INCONSISTENT  = 'INCONSISTENT';\n  var NULLARY       = 'NULLARY';\n  var RECORD        = 'RECORD';\n  var UNARY         = 'UNARY';\n  var UNKNOWN       = 'UNKNOWN';\n  var VARIABLE      = 'VARIABLE';\n\n  //  Inconsistent :: Type\n  var Inconsistent =\n  new _Type(INCONSISTENT, '', '', always2('???'), K(false), [], {});\n\n  //  typeEq :: String -> a -> Boolean\n  function typeEq(name) {\n    return function(x) {\n      return type(x) === name;\n    };\n  }\n\n  //  typeofEq :: String -> a -> Boolean\n  function typeofEq(typeof_) {\n    return function(x) {\n      // eslint-disable-next-line valid-typeof\n      return typeof x === typeof_;\n    };\n  }\n\n  //  functionUrl :: String -> String\n  function functionUrl(name) {\n    var version = '0.14.0';  // updated programmatically\n    return 'https://github.com/sanctuary-js/sanctuary-def/tree/v' + version +\n           '#' + stripNamespace(name);\n  }\n\n  //  NullaryTypeWithUrl :: (String, Any -> Boolean) -> Type\n  function NullaryTypeWithUrl(name, test) {\n    return NullaryType(name, functionUrl(name), test);\n  }\n\n  //  EnumTypeWithUrl :: (String, Array Any) -> Type\n  function EnumTypeWithUrl(name, members) {\n    return EnumType(name, functionUrl(name), members);\n  }\n\n  //  UnaryTypeWithUrl ::\n  //    (String, Any -> Boolean, t a -> Array a) -> (Type -> Type)\n  function UnaryTypeWithUrl(name, test, _1) {\n    return UnaryType(name, functionUrl(name), test, _1);\n  }\n\n  //  BinaryTypeWithUrl ::\n  //    (String, Any -> Boolean, t a b -> Array a, t a b -> Array b) ->\n  //      ((Type, Type) -> Type)\n  function BinaryTypeWithUrl(name, test, _1, _2) {\n    return BinaryType(name, functionUrl(name), test, _1, _2);\n  }\n\n  //. ### Types\n  //.\n  //. Conceptually, a type is a set of values. One can think of a value of\n  //. type `Type` as a function of type `Any -> Boolean` which tests values\n  //. for membership in the set (though this is an oversimplification).\n\n  //# Any :: Type\n  //.\n  //. Type comprising every JavaScript value.\n  var Any = NullaryTypeWithUrl('sanctuary-def/Any', K(true));\n\n  //# AnyFunction :: Type\n  //.\n  //. Type comprising every Function value.\n  var AnyFunction = NullaryTypeWithUrl('Function', typeofEq('function'));\n\n  //# Arguments :: Type\n  //.\n  //. Type comprising every [`arguments`][arguments] object.\n  var Arguments = NullaryTypeWithUrl('Arguments', typeEq('Arguments'));\n\n  //# Array :: Type -> Type\n  //.\n  //. Constructor for homogeneous Array types.\n  var Array_ = UnaryTypeWithUrl('Array', typeEq('Array'), id);\n\n  //# Boolean :: Type\n  //.\n  //. Type comprising `true` and `false`.\n  var Boolean_ = NullaryTypeWithUrl('Boolean', typeofEq('boolean'));\n\n  //# Date :: Type\n  //.\n  //. Type comprising every Date value.\n  var Date_ = NullaryTypeWithUrl('Date', typeEq('Date'));\n\n  //# Error :: Type\n  //.\n  //. Type comprising every Error value, including values of more specific\n  //. constructors such as [`SyntaxError`][] and [`TypeError`][].\n  var Error_ = NullaryTypeWithUrl('Error', typeEq('Error'));\n\n  //# FiniteNumber :: Type\n  //.\n  //. Type comprising every [`ValidNumber`][] value except `Infinity` and\n  //. `-Infinity`.\n  var FiniteNumber = NullaryTypeWithUrl(\n    'sanctuary-def/FiniteNumber',\n    function(x) { return ValidNumber._test(x) && isFinite(x); }\n  );\n\n  //# Function :: Array Type -> Type\n  //.\n  //. Constructor for Function types.\n  //.\n  //. Examples:\n  //.\n  //.   - `$.Function([$.Date, $.String])` represents the `Date -> String`\n  //.     type; and\n  //.   - `$.Function([a, b, a])` represents the `(a, b) -> a` type.\n  function Function_(types) {\n    function format(outer, inner) {\n      var xs = types.map(function(t, idx) {\n        return unless(t.type === RECORD || isEmpty(t.keys),\n                      stripOutermostParens,\n                      inner('$' + String(idx + 1))(String(t)));\n      });\n      var parenthesize = wrap(outer('('))(outer(')'));\n      return parenthesize(unless(types.length === 2,\n                                 parenthesize,\n                                 init(xs).join(outer(', '))) +\n                          outer(' -> ') +\n                          last(xs));\n    }\n\n    var test = AnyFunction._test;\n\n    var $keys = [];\n    var $types = {};\n    types.forEach(function(t, idx) {\n      var k = '$' + String(idx + 1);\n      $keys.push(k);\n      $types[k] = {extractor: K([]), type: t};\n    });\n\n    return new _Type(FUNCTION, '', '', format, test, $keys, $types);\n  }\n\n  //# GlobalRegExp :: Type\n  //.\n  //. Type comprising every [`RegExp`][] value whose `global` flag is `true`.\n  //.\n  //. See also [`NonGlobalRegExp`][].\n  var GlobalRegExp = NullaryTypeWithUrl(\n    'sanctuary-def/GlobalRegExp',\n    function(x) { return RegExp_._test(x) && x.global; }\n  );\n\n  //# Integer :: Type\n  //.\n  //. Type comprising every integer in the range\n  //. [[`Number.MIN_SAFE_INTEGER`][min] .. [`Number.MAX_SAFE_INTEGER`][max]].\n  var Integer = NullaryTypeWithUrl(\n    'sanctuary-def/Integer',\n    function(x) {\n      return ValidNumber._test(x) &&\n             Math.floor(x) === x &&\n             x >= MIN_SAFE_INTEGER &&\n             x <= MAX_SAFE_INTEGER;\n    }\n  );\n\n  //# NegativeFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value less than zero.\n  var NegativeFiniteNumber = NullaryTypeWithUrl(\n    'sanctuary-def/NegativeFiniteNumber',\n    function(x) { return FiniteNumber._test(x) && x < 0; }\n  );\n\n  //# NegativeInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value less than zero.\n  var NegativeInteger = NullaryTypeWithUrl(\n    'sanctuary-def/NegativeInteger',\n    function(x) { return Integer._test(x) && x < 0; }\n  );\n\n  //# NegativeNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value less than zero.\n  var NegativeNumber = NullaryTypeWithUrl(\n    'sanctuary-def/NegativeNumber',\n    function(x) { return Number_._test(x) && x < 0; }\n  );\n\n  //# NonEmpty :: Type -> Type\n  //.\n  //. Constructor for non-empty types. `$.NonEmpty($.String)`, for example, is\n  //. the type comprising every [`String`][] value except `''`.\n  //.\n  //. The given type must satisfy the [Monoid][] and [Setoid][] specifications.\n  var NonEmpty = UnaryType(\n    'sanctuary-def/NonEmpty',\n    functionUrl('NonEmpty'),\n    function(x) {\n      return Z.Monoid.test(x) &&\n             Z.Setoid.test(x) &&\n             !Z.equals(x, Z.empty(x.constructor));\n    },\n    function(monoid) { return [monoid]; }\n  );\n\n  //# NonGlobalRegExp :: Type\n  //.\n  //. Type comprising every [`RegExp`][] value whose `global` flag is `false`.\n  //.\n  //. See also [`GlobalRegExp`][].\n  var NonGlobalRegExp = NullaryTypeWithUrl(\n    'sanctuary-def/NonGlobalRegExp',\n    function(x) { return RegExp_._test(x) && !x.global; }\n  );\n\n  //# NonNegativeInteger :: Type\n  //.\n  //. Type comprising every non-negative [`Integer`][] value (including `-0`).\n  //. Also known as the set of natural numbers under ISO 80000-2:2009.\n  var NonNegativeInteger = NullaryTypeWithUrl(\n    'sanctuary-def/NonNegativeInteger',\n    function(x) { return Integer._test(x) && x >= 0; }\n  );\n\n  //# NonZeroFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value except `0` and `-0`.\n  var NonZeroFiniteNumber = NullaryTypeWithUrl(\n    'sanctuary-def/NonZeroFiniteNumber',\n    function(x) { return FiniteNumber._test(x) && x !== 0; }\n  );\n\n  //# NonZeroInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value except `0` and `-0`.\n  var NonZeroInteger = NullaryTypeWithUrl(\n    'sanctuary-def/NonZeroInteger',\n    function(x) { return Integer._test(x) && x !== 0; }\n  );\n\n  //# NonZeroValidNumber :: Type\n  //.\n  //. Type comprising every [`ValidNumber`][] value except `0` and `-0`.\n  var NonZeroValidNumber = NullaryTypeWithUrl(\n    'sanctuary-def/NonZeroValidNumber',\n    function(x) { return ValidNumber._test(x) && x !== 0; }\n  );\n\n  //# Null :: Type\n  //.\n  //. Type whose sole member is `null`.\n  var Null = NullaryTypeWithUrl('Null', typeEq('Null'));\n\n  //# Nullable :: Type -> Type\n  //.\n  //. Constructor for types which include `null` as a member.\n  var Nullable = UnaryTypeWithUrl(\n    'sanctuary-def/Nullable',\n    K(true),\n    function(nullable) {\n      // eslint-disable-next-line eqeqeq\n      return nullable === null ? [] : [nullable];\n    }\n  );\n\n  //# Number :: Type\n  //.\n  //. Type comprising every primitive Number value (including `NaN`).\n  var Number_ = NullaryTypeWithUrl('Number', typeofEq('number'));\n\n  //# Object :: Type\n  //.\n  //. Type comprising every \"plain\" Object value. Specifically, values\n  //. created via:\n  //.\n  //.   - object literal syntax;\n  //.   - [`Object.create`][]; or\n  //.   - the `new` operator in conjunction with `Object` or a custom\n  //.     constructor function.\n  var Object_ = NullaryTypeWithUrl('Object', typeEq('Object'));\n\n  //# Pair :: Type -> Type -> Type\n  //.\n  //. Constructor for tuple types of length 2. Arrays are said to represent\n  //. tuples. `['foo', 42]` is a member of `Pair String Number`.\n  var Pair = BinaryTypeWithUrl(\n    'sanctuary-def/Pair',\n    function(x) { return typeEq('Array')(x) && x.length === 2; },\n    function(pair) { return [pair[0]]; },\n    function(pair) { return [pair[1]]; }\n  );\n\n  //# PositiveFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value greater than zero.\n  var PositiveFiniteNumber = NullaryTypeWithUrl(\n    'sanctuary-def/PositiveFiniteNumber',\n    function(x) { return FiniteNumber._test(x) && x > 0; }\n  );\n\n  //# PositiveInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value greater than zero.\n  var PositiveInteger = NullaryTypeWithUrl(\n    'sanctuary-def/PositiveInteger',\n    function(x) { return Integer._test(x) && x > 0; }\n  );\n\n  //# PositiveNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value greater than zero.\n  var PositiveNumber = NullaryTypeWithUrl(\n    'sanctuary-def/PositiveNumber',\n    function(x) { return Number_._test(x) && x > 0; }\n  );\n\n  //# RegExp :: Type\n  //.\n  //. Type comprising every RegExp value.\n  var RegExp_ = NullaryTypeWithUrl('RegExp', typeEq('RegExp'));\n\n  //# RegexFlags :: Type\n  //.\n  //. Type comprising the canonical RegExp flags:\n  //.\n  //.   - `''`\n  //.   - `'g'`\n  //.   - `'i'`\n  //.   - `'m'`\n  //.   - `'gi'`\n  //.   - `'gm'`\n  //.   - `'im'`\n  //.   - `'gim'`\n  var RegexFlags = EnumTypeWithUrl(\n    'sanctuary-def/RegexFlags',\n    ['', 'g', 'i', 'm', 'gi', 'gm', 'im', 'gim']\n  );\n\n  //# StrMap :: Type -> Type\n  //.\n  //. Constructor for homogeneous Object types.\n  //.\n  //. `{foo: 1, bar: 2, baz: 3}`, for example, is a member of `StrMap Number`;\n  //. `{foo: 1, bar: 2, baz: 'XXX'}` is not.\n  var StrMap = UnaryTypeWithUrl(\n    'sanctuary-def/StrMap',\n    Object_._test,\n    function(strMap) {\n      return Z.reduce(function(xs, x) { return xs.concat([x]); }, [], strMap);\n    }\n  );\n\n  //# String :: Type\n  //.\n  //. Type comprising every primitive String value.\n  var String_ = NullaryTypeWithUrl('String', typeofEq('string'));\n\n  //# Symbol :: Type\n  //.\n  //. Type comprising every Symbol value.\n  var Symbol_ = NullaryTypeWithUrl('Symbol', typeofEq('symbol'));\n\n  //# Type :: Type\n  //.\n  //. Type comprising every `Type` value.\n  var Type = NullaryTypeWithUrl('Type', typeEq('sanctuary-def/Type'));\n\n  //# TypeClass :: Type\n  //.\n  //. Type comprising every [`TypeClass`][] value.\n  var TypeClass =\n  NullaryTypeWithUrl('TypeClass', typeEq('sanctuary-type-classes/TypeClass'));\n\n  //# Undefined :: Type\n  //.\n  //. Type whose sole member is `undefined`.\n  var Undefined = NullaryTypeWithUrl('Undefined', typeEq('Undefined'));\n\n  //# Unknown :: Type\n  //.\n  //. Type used to represent missing type information. The type of `[]`,\n  //. for example, is `Array ???`.\n  //.\n  //. May be used with type constructors when defining environments. Given a\n  //. type constructor `List :: Type -> Type`, one could use `List($.Unknown)`\n  //. to include an infinite number of types in an environment:\n  //.\n  //.   - `List Number`\n  //.   - `List String`\n  //.   - `List (List Number)`\n  //.   - `List (List String)`\n  //.   - `List (List (List Number))`\n  //.   - `List (List (List String))`\n  //.   - `...`\n  var Unknown =\n  new _Type(UNKNOWN, '', '', always2('Unknown'), K(true), [], {});\n\n  //# ValidDate :: Type\n  //.\n  //. Type comprising every [`Date`][] value except `new Date(NaN)`.\n  var ValidDate = NullaryTypeWithUrl(\n    'sanctuary-def/ValidDate',\n    function(x) { return Date_._test(x) && !isNaN(x.valueOf()); }\n  );\n\n  //# ValidNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value except `NaN`.\n  var ValidNumber = NullaryTypeWithUrl(\n    'sanctuary-def/ValidNumber',\n    function(x) { return Number_._test(x) && !isNaN(x); }\n  );\n\n  //# env :: Array Type\n  //.\n  //. An array of [types][]:\n  //.\n  //.   - <code>[AnyFunction](#AnyFunction)</code>\n  //.   - <code>[Arguments](#Arguments)</code>\n  //.   - <code>[Array](#Array)([Unknown](#Unknown))</code>\n  //.   - <code>[Boolean](#Boolean)</code>\n  //.   - <code>[Date](#Date)</code>\n  //.   - <code>[Error](#Error)</code>\n  //.   - <code>[Null](#Null)</code>\n  //.   - <code>[Number](#Number)</code>\n  //.   - <code>[Object](#Object)</code>\n  //.   - <code>[RegExp](#RegExp)</code>\n  //.   - <code>[StrMap](#StrMap)([Unknown](#Unknown))</code>\n  //.   - <code>[String](#String)</code>\n  //.   - <code>[Symbol](#Symbol)</code>\n  //.   - <code>[Undefined](#Undefined)</code>\n  var env = [\n    AnyFunction,\n    Arguments,\n    Array_(Unknown),\n    Boolean_,\n    Date_,\n    Error_,\n    Null,\n    Number_,\n    Object_,\n    RegExp_,\n    StrMap(Unknown),\n    String_,\n    Symbol_,\n    Undefined\n  ];\n\n  //  Unchecked :: String -> Type\n  function Unchecked(s) { return NullaryType(s, '', K(true)); }\n\n  var def = _create({checkTypes: true, env: env});\n\n  //  arity :: (Number, Function) -> Function\n  function arity(n, f) {\n    return (\n      n === 0 ?\n        function() {\n          return f.apply(this, arguments);\n        } :\n      n === 1 ?\n        function($1) {\n          return f.apply(this, arguments);\n        } :\n      n === 2 ?\n        function($1, $2) {\n          return f.apply(this, arguments);\n        } :\n      n === 3 ?\n        function($1, $2, $3) {\n          return f.apply(this, arguments);\n        } :\n      n === 4 ?\n        function($1, $2, $3, $4) {\n          return f.apply(this, arguments);\n        } :\n      n === 5 ?\n        function($1, $2, $3, $4, $5) {\n          return f.apply(this, arguments);\n        } :\n      n === 6 ?\n        function($1, $2, $3, $4, $5, $6) {\n          return f.apply(this, arguments);\n        } :\n      n === 7 ?\n        function($1, $2, $3, $4, $5, $6, $7) {\n          return f.apply(this, arguments);\n        } :\n      n === 8 ?\n        function($1, $2, $3, $4, $5, $6, $7, $8) {\n          return f.apply(this, arguments);\n        } :\n      // else\n        function($1, $2, $3, $4, $5, $6, $7, $8, $9) {\n          return f.apply(this, arguments);\n        }\n    );\n  }\n\n  //  numArgs :: Number -> String\n  function numArgs(n) {\n    switch (n) {\n      case  0:  return  'zero arguments';\n      case  1:  return   'one argument';\n      case  2:  return   'two arguments';\n      case  3:  return 'three arguments';\n      case  4:  return  'four arguments';\n      case  5:  return  'five arguments';\n      case  6:  return   'six arguments';\n      case  7:  return 'seven arguments';\n      case  8:  return 'eight arguments';\n      case  9:  return  'nine arguments';\n      default:  return  n + ' arguments';\n    }\n  }\n\n  //  expandUnknown :: ... -> Array Type\n  function expandUnknown(\n    env,            // :: Array Type\n    seen,           // :: Array Object\n    value,          // :: Any\n    r               // :: { extractor :: a -> Array b, type :: Type }\n  ) {\n    return r.type.type === UNKNOWN ?\n      _determineActualTypes(env, seen, r.extractor(value)) :\n      [r.type];\n  }\n\n  //  _determineActualTypes :: ... -> Array Type\n  function _determineActualTypes(\n    env,            // :: Array Type\n    seen,           // :: Array Object\n    values          // :: Array Any\n  ) {\n    function refine(types, value) {\n      var seen$;\n      if (typeof value === 'object' && value != null ||\n          typeof value === 'function') {\n        //  Abort if a circular reference is encountered; add the current\n        //  object to the array of seen objects otherwise.\n        if (seen.indexOf(value) >= 0) return [];\n        seen$ = Z.concat(seen, [value]);\n      } else {\n        seen$ = seen;\n      }\n      return Z.chain(function(t) {\n        return (\n          t.name === 'sanctuary-def/Nullable' || t.validate(value).isLeft ?\n            [] :\n          t.type === UNARY ?\n            Z.map(fromUnaryType(t),\n                  expandUnknown(env, seen$, value, t.types.$1)) :\n          t.type === BINARY ?\n            xprod(t,\n                  expandUnknown(env, seen$, value, t.types.$1),\n                  expandUnknown(env, seen$, value, t.types.$2)) :\n          // else\n            [t]\n        );\n      }, types);\n    }\n\n    return isEmpty(values) ?\n      [Unknown] :\n      or(Z.reduce(refine, env, values), [Inconsistent]);\n  }\n\n  //  isConsistent :: Type -> Boolean\n  function isConsistent(t) {\n    return t.type === UNARY   ? isConsistent(t.types.$1.type) :\n           t.type === BINARY  ? isConsistent(t.types.$1.type) &&\n                                isConsistent(t.types.$2.type) :\n           /* else */           t.type !== INCONSISTENT;\n  }\n\n  //  determineActualTypesStrict :: (Array Type, Array Any) -> Array Type\n  function determineActualTypesStrict(env, values) {\n    return _determineActualTypes(env, [], values)\n           .filter(isConsistent);\n  }\n\n  //  determineActualTypesLoose :: (Array Type, Array Any) -> Array Type\n  function determineActualTypesLoose(env, values) {\n    return _determineActualTypes(env, [], values)\n           .filter(function(t) { return t.type !== INCONSISTENT; });\n  }\n\n  //  TypeInfo = { name :: String\n  //             , constraints :: StrMap (Array TypeClass)\n  //             , types :: Array Type }\n  //\n  //  TypeVarMap = StrMap { types :: Array Type\n  //                      , valuesByPath :: StrMap (Array Any) }\n  //\n  //  PropPath = Array (Number | String)\n\n  //  updateTypeVarMap :: ... -> TypeVarMap\n  function updateTypeVarMap(\n    env,            // :: Array Type\n    typeVarMap,     // :: TypeVarMap\n    typeVar,        // :: Type\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    values          // :: Array Any\n  ) {\n    var $typeVarMap = {};\n    for (var typeVarName in typeVarMap) {\n      var entry = typeVarMap[typeVarName];\n      var $entry = {types: entry.types.slice(), valuesByPath: {}};\n      for (var k in entry.valuesByPath) {\n        $entry.valuesByPath[k] = entry.valuesByPath[k].slice();\n      }\n      $typeVarMap[typeVarName] = $entry;\n    }\n    if (!hasOwnProperty.call($typeVarMap, typeVar.name)) {\n      $typeVarMap[typeVar.name] = {types: env.slice(), valuesByPath: {}};\n    }\n\n    var key = JSON.stringify(Z.concat([index], propPath));\n    if (!hasOwnProperty.call($typeVarMap[typeVar.name].valuesByPath, key)) {\n      $typeVarMap[typeVar.name].valuesByPath[key] = [];\n    }\n\n    var isNullaryTypeVar = isEmpty(typeVar.keys);\n\n    values.forEach(function(value) {\n      $typeVarMap[typeVar.name].valuesByPath[key].push(value);\n      $typeVarMap[typeVar.name].types = Z.chain(\n        function(t) {\n          var xs;\n          var invalid = !test(env, t, value);\n          return (\n            invalid ?\n              [] :\n            t.type === UNARY ?\n              isNullaryTypeVar &&\n              t.types.$1.type.type === UNKNOWN &&\n              !isEmpty(xs = t.types.$1.extractor(value)) ?\n                Z.map(fromUnaryType(t),\n                      determineActualTypesStrict(env, xs)) :\n                [t] :\n            t.type === BINARY ?\n              isNullaryTypeVar ?\n                xprod(t,\n                      t.types.$1.type.type === UNKNOWN &&\n                      !isEmpty(xs = t.types.$1.extractor(value)) ?\n                        determineActualTypesStrict(env, xs) :\n                        [t.types.$1.type],\n                      t.types.$2.type.type === UNKNOWN &&\n                      !isEmpty(xs = t.types.$2.extractor(value)) ?\n                        determineActualTypesStrict(env, xs) :\n                        [t.types.$2.type]) :\n                [t] :\n            // else\n              [t]\n          );\n        },\n        $typeVarMap[typeVar.name].types\n      );\n    });\n\n    return $typeVarMap;\n  }\n\n  //  underlineTypeVars :: (TypeInfo, StrMap (Array Any)) -> String\n  function underlineTypeVars(typeInfo, valuesByPath) {\n    //  Note: Sorting these keys lexicographically is not \"correct\", but it\n    //  does the right thing for indexes less than 10.\n    var paths = Z.map(JSON.parse, Object.keys(valuesByPath).sort());\n    return underline(\n      typeInfo,\n      K(K(_)),\n      function(index) {\n        return function(f) {\n          return function(t) {\n            return function(propPath) {\n              var indexedPropPath = Z.concat([index], propPath);\n              return function(s) {\n                if (paths.some(isPrefix(indexedPropPath))) {\n                  var key = JSON.stringify(indexedPropPath);\n                  if (!hasOwnProperty.call(valuesByPath, key)) return s;\n                  if (!isEmpty(valuesByPath[key])) return f(s);\n                }\n                return _(s);\n              };\n            };\n          };\n        };\n      }\n    );\n  }\n\n  //  satisfactoryTypes ::\n  //    ... -> Either (() -> Error) { typeVarMap :: TypeVarMap\n  //                                , types :: Array Type }\n  function satisfactoryTypes(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    typeVarMap,     // :: TypeVarMap\n    expType,        // :: Type\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    values          // :: Array Any\n  ) {\n    var recur = satisfactoryTypes;\n\n    for (var idx = 0; idx < values.length; idx += 1) {\n      var result = expType.validate(values[idx]);\n      if (result.isLeft) {\n        return Left(function() {\n          return invalidValue(env,\n                              typeInfo,\n                              index,\n                              result.value.propPath,\n                              result.value.value);\n        });\n      }\n    }\n\n    switch (expType.type) {\n\n      case VARIABLE:\n        var typeVarName = expType.name;\n        var constraints = typeInfo.constraints;\n        if (hasOwnProperty.call(constraints, typeVarName)) {\n          var typeClasses = constraints[typeVarName];\n          for (idx = 0; idx < values.length; idx += 1) {\n            for (var idx2 = 0; idx2 < typeClasses.length; idx2 += 1) {\n              if (!typeClasses[idx2].test(values[idx])) {\n                return Left(function() {\n                  return typeClassConstraintViolation(\n                    env,\n                    typeInfo,\n                    typeClasses[idx2],\n                    index,\n                    propPath,\n                    values[idx],\n                    typeVarMap\n                  );\n                });\n              }\n            }\n          }\n        }\n\n        var typeVarMap$ = updateTypeVarMap(env,\n                                           typeVarMap,\n                                           expType,\n                                           index,\n                                           propPath,\n                                           values);\n\n        var okTypes = typeVarMap$[typeVarName].types;\n        return isEmpty(okTypes) && !isEmpty(values) ?\n          Left(function() {\n            return typeVarConstraintViolation(\n              env,\n              typeInfo,\n              index,\n              propPath,\n              typeVarMap$[typeVarName].valuesByPath\n            );\n          }) :\n          Z.reduce(function(e, t) {\n            return isEmpty(expType.keys) || isEmpty(t.keys) ?\n              e :\n              Z.chain(function(r) {\n                //  The `a` in `Functor f => f a` corresponds to the `a`\n                //  in `Maybe a` but to the `b` in `Either a b`. A type\n                //  variable's $1 will correspond to either $1 or $2 of\n                //  the actual type depending on the actual type's arity.\n                var offset = t.keys.length - expType.keys.length;\n                return expType.keys.reduce(function(e, k, idx) {\n                  var extractor = t.types[t.keys[offset + idx]].extractor;\n                  var innerValues = Z.chain(extractor, values);\n                  return Z.chain(\n                    function(r) {\n                      return recur(env,\n                                   typeInfo,\n                                   r.typeVarMap,\n                                   expType.types[k].type,\n                                   index,\n                                   Z.concat(propPath, [k]),\n                                   innerValues);\n                    },\n                    Z.reduce(function(e, x) {\n                      var t = expType.types[k].type;\n                      return Z.chain(function(r) {\n                        return test(env, t, x) ? Right(r) : Left(function() {\n                          var propPath$ = Z.concat(propPath, [k]);\n                          return t.type === VARIABLE ?\n                            typeVarConstraintViolation(\n                              env,\n                              typeInfo,\n                              index,\n                              propPath$,\n                              singleton(JSON.stringify(Z.concat([index],\n                                                                propPath$)),\n                                        [x])\n                            ) :\n                            invalidValue(env, typeInfo, index, propPath$, x);\n                        });\n                      }, e);\n                    }, e, innerValues)\n                  );\n                }, Right(r));\n              }, e);\n          }, Right({typeVarMap: typeVarMap$, types: okTypes}), okTypes);\n\n      case UNARY:\n        return Z.map(\n          function(result) {\n            return {\n              typeVarMap: result.typeVarMap,\n              types: Z.map(fromUnaryType(expType),\n                           or(result.types, [expType.types.$1.type]))\n            };\n          },\n          recur(env,\n                typeInfo,\n                typeVarMap,\n                expType.types.$1.type,\n                index,\n                Z.concat(propPath, ['$1']),\n                Z.chain(expType.types.$1.extractor, values))\n        );\n\n      case BINARY:\n        return Z.chain(\n          function(result) {\n            var $1s = result.types;\n            return Z.map(\n              function(result) {\n                var $2s = result.types;\n                return {\n                  typeVarMap: result.typeVarMap,\n                  types: xprod(expType,\n                               or($1s, [expType.types.$1.type]),\n                               or($2s, [expType.types.$2.type]))\n                };\n              },\n              recur(env,\n                    typeInfo,\n                    result.typeVarMap,\n                    expType.types.$2.type,\n                    index,\n                    Z.concat(propPath, ['$2']),\n                    Z.chain(expType.types.$2.extractor, values))\n            );\n          },\n          recur(env,\n                typeInfo,\n                typeVarMap,\n                expType.types.$1.type,\n                index,\n                Z.concat(propPath, ['$1']),\n                Z.chain(expType.types.$1.extractor, values))\n        );\n\n      case RECORD:\n        return Z.reduce(function(e, k) {\n          return Z.chain(function(r) {\n            return recur(env,\n                         typeInfo,\n                         r.typeVarMap,\n                         expType.types[k].type,\n                         index,\n                         Z.concat(propPath, [k]),\n                         Z.chain(expType.types[k].extractor, values));\n          }, e);\n        }, Right({typeVarMap: typeVarMap, types: [expType]}), expType.keys);\n\n      default:\n        return Right({typeVarMap: typeVarMap, types: [expType]});\n    }\n  }\n\n  //# test :: Array Type -> Type -> a -> Boolean\n  //.\n  //. Takes an environment, a type, and any value. Returns `true` if the value\n  //. is a member of the type; `false` otherwise.\n  //.\n  //. The environment is only significant if the type contains\n  //. [type variables][].\n  //.\n  //. One may define a more restrictive type in terms of a more general one:\n  //.\n  //. ```javascript\n  //. //    NonNegativeInteger :: Type\n  //. const NonNegativeInteger = $.NullaryType(\n  //.   'my-package/NonNegativeInteger',\n  //.   'http://example.com/my-package#NonNegativeInteger',\n  //.   x => $.test([], $.Integer, x) && x >= 0\n  //. );\n  //. ```\n  //.\n  //. Using types as predicates is useful in other contexts too. One could,\n  //. for example, define a [record type][] for each endpoint of a REST API\n  //. and validate the bodies of incoming POST requests against these types.\n  function test(env, t, x) {\n    var typeInfo = {name: 'name', constraints: {}, types: [t]};\n    return satisfactoryTypes(env, typeInfo, {}, t, 0, [], [x]).isRight;\n  }\n\n  //. ### Type constructors\n  //.\n  //. sanctuary-def provides several functions for defining types.\n\n  //# NullaryType :: String -> String -> (Any -> Boolean) -> Type\n  //.\n  //. Type constructor for types with no type variables (such as [`Number`][]).\n  //.\n  //. To define a nullary type `t` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`); and\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true` if\n  //.     (and only if) the value is a member of `t`.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Integer :: Type\n  //. const Integer = $.NullaryType(\n  //.   'my-package/Integer',\n  //.   'http://example.com/my-package#Integer',\n  //.   x => typeof x === 'number' &&\n  //.        Math.floor(x) === x &&\n  //.        x >= Number.MIN_SAFE_INTEGER &&\n  //.        x <= Number.MAX_SAFE_INTEGER\n  //. );\n  //.\n  //. //    NonZeroInteger :: Type\n  //. const NonZeroInteger = $.NullaryType(\n  //.   'my-package/NonZeroInteger',\n  //.   'http://example.com/my-package#NonZeroInteger',\n  //.   x => $.test([], Integer, x) && x !== 0\n  //. );\n  //.\n  //. //    rem :: Integer -> NonZeroInteger -> Integer\n  //. const rem =\n  //. def('rem', {}, [Integer, NonZeroInteger, Integer], (x, y) => x % y);\n  //.\n  //. rem(42, 5);\n  //. // => 2\n  //.\n  //. rem(0.5);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   rem :: Integer -> NonZeroInteger -> Integer\n  //. //          ^^^^^^^\n  //. //             1\n  //. //\n  //. //   1)  0.5 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘Integer’.\n  //.\n  //. rem(42, 0);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   rem :: Integer -> NonZeroInteger -> Integer\n  //. //                     ^^^^^^^^^^^^^^\n  //. //                           1\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘NonZeroInteger’.\n  //. ```\n  function NullaryType(name, url, test) {\n    function format(outer, inner) {\n      return outer(stripNamespace(name));\n    }\n    return new _Type(NULLARY, name, url, format, test, [], {});\n  }\n\n  var CheckedNullaryType =\n  def('NullaryType',\n      {},\n      [String_, String_, Function_([Any, Boolean_]), Type],\n      NullaryType);\n\n  //# UnaryType :: String -> String -> (Any -> Boolean) -> (t a -> Array a) -> (Type -> Type)\n  //.\n  //. Type constructor for types with one type variable (such as [`Array`][]).\n  //.\n  //. To define a unary type `t a` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`);\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if (and only if) the value is a member of `t x` for some type `x`;\n  //.\n  //.   - a function which takes any value of type `t a` and returns an array\n  //.     of the values of type `a` contained in the `t` (exposed as\n  //.     `t.types.$1.extractor`); and\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`).\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. const type = require('sanctuary-type-identifiers');\n  //.\n  //. //    maybeTypeIdent :: String\n  //. const maybeTypeIdent = 'my-package/Maybe';\n  //.\n  //. //    Maybe :: Type -> Type\n  //. const Maybe = $.UnaryType(\n  //.   maybeTypeIdent,\n  //.   'http://example.com/my-package#Maybe',\n  //.   x => type(x) === maybeTypeIdent,\n  //.   maybe => maybe.isJust ? [maybe.value] : []\n  //. );\n  //.\n  //. //    MaybeTypeRep :: TypeRep Maybe\n  //. const MaybeTypeRep = {'@@type': maybeTypeIdent};\n  //.\n  //. //    Nothing :: Maybe a\n  //. const Nothing = {\n  //.   constructor: MaybeTypeRep,\n  //.   isJust: false,\n  //.   isNothing: true,\n  //.   toString: () => 'Nothing',\n  //. };\n  //.\n  //. //    Just :: a -> Maybe a\n  //. const Just = x => ({\n  //.   constructor: MaybeTypeRep,\n  //.   isJust: true,\n  //.   isNothing: false,\n  //.   toString: () => 'Just(' + Z.toString(x) + ')',\n  //.   value: x,\n  //. });\n  //.\n  //. //    fromMaybe :: a -> Maybe a -> a\n  //. const fromMaybe =\n  //. def('fromMaybe', {}, [a, Maybe(a), a], (x, m) => m.isJust ? m.value : x);\n  //.\n  //. fromMaybe(0, Just(42));\n  //. // => 42\n  //.\n  //. fromMaybe(0, Nothing);\n  //. // => 0\n  //.\n  //. fromMaybe(0, Just('XXX'));\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   fromMaybe :: a -> Maybe a -> a\n  //. //                ^          ^\n  //. //                1          2\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   2)  \"XXX\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  function UnaryType(name, url, test, _1) {\n    return function($1) {\n      function format(outer, inner) {\n        return outer('(' + stripNamespace(name) + ' ') +\n               inner('$1')(String($1)) + outer(')');\n      }\n      var types = {$1: {extractor: _1, type: $1}};\n      return new _Type(UNARY, name, url, format, test, ['$1'], types);\n    };\n  }\n\n  var CheckedUnaryType =\n  def('UnaryType',\n      {},\n      [String_,\n       String_,\n       Function_([Any, Boolean_]),\n       Function_([Unchecked('t a'), Array_(Unchecked('a'))]),\n       AnyFunction],\n      function(name, url, test, _1) {\n        return def(stripNamespace(name),\n                   {},\n                   [Type, Type],\n                   UnaryType(name, url, test, _1));\n      });\n\n  //  fromUnaryType :: Type -> (Type -> Type)\n  function fromUnaryType(t) {\n    return UnaryType(t.name, t.url, t._test, t.types.$1.extractor);\n  }\n\n  //# BinaryType :: String -> String -> (Any -> Boolean) -> (t a b -> Array a) -> (t a b -> Array b) -> (Type -> Type -> Type)\n  //.\n  //. Type constructor for types with two type variables (such as [`Pair`][]).\n  //.\n  //. To define a binary type `t a b` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`);\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if (and only if) the value is a member of `t x y` for some types\n  //.     `x` and `y`;\n  //.\n  //.   - a function which takes any value of type `t a b` and returns an array\n  //.     of the values of type `a` contained in the `t` (exposed as\n  //.     `t.types.$1.extractor`);\n  //.\n  //.   - a function which takes any value of type `t a b` and returns an array\n  //.     of the values of type `b` contained in the `t` (exposed as\n  //.     `t.types.$2.extractor`);\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`); and\n  //.\n  //.   - the type of `b` (exposed as `t.types.$2.type`).\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. const type = require('sanctuary-type-identifiers');\n  //.\n  //. //    pairTypeIdent :: String\n  //. const pairTypeIdent = 'my-package/Pair';\n  //.\n  //. //    $Pair :: Type -> Type -> Type\n  //. const $Pair = $.BinaryType(\n  //.   pairTypeIdent,\n  //.   'http://example.com/my-package#Pair',\n  //.   x => type(x) === pairTypeIdent,\n  //.   pair => [pair[0]],\n  //.   pair => [pair[1]]\n  //. );\n  //.\n  //. //    PairTypeRep :: TypeRep Pair\n  //. const PairTypeRep = {'@@type': pairTypeIdent};\n  //.\n  //. //    Pair :: a -> b -> Pair a b\n  //. const Pair = def('Pair', {}, [a, b, $Pair(a, b)], (x, y) => ({\n  //.   '0': x,\n  //.   '1': y,\n  //.   constructor: PairTypeRep,\n  //.   length: 2,\n  //.   toString: () => 'Pair(' + Z.toString(x) + ', ' + Z.toString(y) + ')',\n  //. }));\n  //.\n  //. //    Rank :: Type\n  //. const Rank = $.NullaryType(\n  //.   'my-package/Rank',\n  //.   'http://example.com/my-package#Rank',\n  //.   x => typeof x === 'string' && /^([A23456789JQK]|10)$/.test(x)\n  //. );\n  //.\n  //. //    Suit :: Type\n  //. const Suit = $.NullaryType(\n  //.   'my-package/Suit',\n  //.   'http://example.com/my-package#Suit',\n  //.   x => typeof x === 'string' && /^[\\u2660\\u2663\\u2665\\u2666]$/.test(x)\n  //. );\n  //.\n  //. //    Card :: Type\n  //. const Card = $Pair(Rank, Suit);\n  //.\n  //. //    showCard :: Card -> String\n  //. const showCard =\n  //. def('showCard', {}, [Card, $.String], card => card[0] + card[1]);\n  //.\n  //. showCard(Pair('A', '♠'));\n  //. // => 'A♠'\n  //.\n  //. showCard(Pair('X', '♠'));\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   showCard :: Pair Rank Suit -> String\n  //. //                    ^^^^\n  //. //                     1\n  //. //\n  //. //   1)  \"X\" :: String\n  //. //\n  //. //   The value at position 1 is not a member of ‘Rank’.\n  //. ```\n  function BinaryType(name, url, test, _1, _2) {\n    return function($1, $2) {\n      function format(outer, inner) {\n        return outer('(' + stripNamespace(name) + ' ') +\n               inner('$1')(String($1)) + outer(' ') +\n               inner('$2')(String($2)) + outer(')');\n      }\n      var types = {$1: {extractor: _1, type: $1},\n                   $2: {extractor: _2, type: $2}};\n      return new _Type(BINARY, name, url, format, test, ['$1', '$2'], types);\n    };\n  }\n\n  var CheckedBinaryType =\n  def('BinaryType',\n      {},\n      [String_,\n       String_,\n       Function_([Any, Boolean_]),\n       Function_([Unchecked('t a b'), Array_(Unchecked('a'))]),\n       Function_([Unchecked('t a b'), Array_(Unchecked('b'))]),\n       AnyFunction],\n      function(name, url, test, _1, _2) {\n        return def(stripNamespace(name),\n                   {},\n                   [Type, Type, Type],\n                   BinaryType(name, url, test, _1, _2));\n      });\n\n  //  xprod :: (Type, Array Type, Array Type) -> Array Type\n  function xprod(t, $1s, $2s) {\n    var specialize = BinaryType(t.name,\n                                t.url,\n                                t._test,\n                                t.types.$1.extractor,\n                                t.types.$2.extractor);\n    var $types = [];\n    $1s.forEach(function($1) {\n      $2s.forEach(function($2) {\n        $types.push(specialize($1, $2));\n      });\n    });\n    return $types;\n  }\n\n  //# EnumType :: String -> String -> Array Any -> Type\n  //.\n  //. Type constructor for [enumerated types][] (such as [`RegexFlags`][]).\n  //.\n  //. To define an enumerated type `t` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`); and\n  //.\n  //.   - an array of distinct values.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Denomination :: Type\n  //. const Denomination = $.EnumType(\n  //.   'my-package/Denomination',\n  //.   'http://example.com/my-package#Denomination',\n  //.   [10, 20, 50, 100, 200]\n  //. );\n  //. ```\n  function EnumType(name, url, members) {\n    return NullaryType(name, url, memberOf(members));\n  }\n\n  var CheckedEnumType =\n  def('EnumType', {}, [String_, String_, Array_(Any), Type], EnumType);\n\n  //# RecordType :: StrMap Type -> Type\n  //.\n  //. `RecordType` is used to construct record types. The type definition\n  //. specifies the name and type of each required field.\n  //.\n  //. To define a record type one must provide:\n  //.\n  //.   - an object mapping field name to type.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Point :: Type\n  //. const Point = $.RecordType({x: $.FiniteNumber, y: $.FiniteNumber});\n  //.\n  //. //    dist :: Point -> Point -> FiniteNumber\n  //. const dist =\n  //. def('dist', {}, [Point, Point, $.FiniteNumber],\n  //.     (p, q) => Math.sqrt(Math.pow(p.x - q.x, 2) +\n  //.                         Math.pow(p.y - q.y, 2)));\n  //.\n  //. dist({x: 0, y: 0}, {x: 3, y: 4});\n  //. // => 5\n  //.\n  //. dist({x: 0, y: 0}, {x: 3, y: 4, color: 'red'});\n  //. // => 5\n  //.\n  //. dist({x: 0, y: 0}, {x: NaN, y: NaN});\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   dist :: { x :: FiniteNumber, y :: FiniteNumber } -> { x :: FiniteNumber, y :: FiniteNumber } -> FiniteNumber\n  //. //                                                              ^^^^^^^^^^^^\n  //. //                                                                   1\n  //. //\n  //. //   1)  NaN :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘FiniteNumber’.\n  //.\n  //. dist(0);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   dist :: { x :: FiniteNumber, y :: FiniteNumber } -> { x :: FiniteNumber, y :: FiniteNumber } -> FiniteNumber\n  //. //           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  //. //                              1\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘{ x :: FiniteNumber, y :: FiniteNumber }’.\n  //. ```\n  function RecordType(fields) {\n    var keys = Object.keys(fields).sort();\n\n    function format(outer, inner) {\n      return wrap(outer('{'))(outer(' }'))(Z.map(function(k) {\n        var t = fields[k];\n        return outer(' ' + k + ' :: ') +\n               unless(t.type === RECORD || isEmpty(t.keys),\n                      stripOutermostParens,\n                      inner(k)(String(t)));\n      }, keys).join(outer(',')));\n    }\n\n    function test(x) {\n      return x != null &&\n             keys.every(function(k) { return hasOwnProperty.call(x, k); });\n    }\n\n    var $types = {};\n    keys.forEach(function(k) {\n      $types[k] = {extractor: function(x) { return [x[k]]; }, type: fields[k]};\n    });\n\n    return new _Type(RECORD, '', '', format, test, keys, $types);\n  }\n\n  var CheckedRecordType =\n  def('RecordType', {}, [StrMap(Type), Type], RecordType);\n\n  //# TypeVariable :: String -> Type\n  //.\n  //. Polymorphism is powerful. Not being able to define a function for\n  //. all types would be very limiting indeed: one couldn't even define the\n  //. identity function!\n  //.\n  //. Before defining a polymorphic function one must define one or more type\n  //. variables:\n  //.\n  //. ```javascript\n  //. const a = $.TypeVariable('a');\n  //. const b = $.TypeVariable('b');\n  //.\n  //. //    id :: a -> a\n  //. const id = def('id', {}, [a, a], x => x);\n  //.\n  //. id(42);\n  //. // => 42\n  //.\n  //. id(null);\n  //. // => null\n  //. ```\n  //.\n  //. The same type variable may be used in multiple positions, creating a\n  //. constraint:\n  //.\n  //. ```javascript\n  //. //    cmp :: a -> a -> Number\n  //. const cmp =\n  //. def('cmp', {}, [a, a, $.Number], (x, y) => x < y ? -1 : x > y ? 1 : 0);\n  //.\n  //. cmp(42, 42);\n  //. // => 0\n  //.\n  //. cmp('a', 'z');\n  //. // => -1\n  //.\n  //. cmp('z', 'a');\n  //. // => 1\n  //.\n  //. cmp(0, '1');\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   cmp :: a -> a -> Number\n  //. //          ^    ^\n  //. //          1    2\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   2)  \"1\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  function TypeVariable(name) {\n    return new _Type(VARIABLE, name, '', always2(name), K(true), [], {});\n  }\n\n  var CheckedTypeVariable =\n  def('TypeVariable', {}, [String_, Type], TypeVariable);\n\n  //# UnaryTypeVariable :: String -> (Type -> Type)\n  //.\n  //. Combines [`UnaryType`][] and [`TypeVariable`][].\n  //.\n  //. To define a unary type variable `t a` one must provide:\n  //.\n  //.   - a name (conventionally matching `^[a-z]$`); and\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`).\n  //.\n  //. Consider the type of a generalized `map`:\n  //.\n  //. ```haskell\n  //. map :: Functor f => (a -> b) -> f a -> f b\n  //. ```\n  //.\n  //. `f` is a unary type variable. With two (nullary) type variables, one\n  //. unary type variable, and one [type class][] it's possible to define a\n  //. fully polymorphic `map` function:\n  //.\n  //. ```javascript\n  //. const $ = require('sanctuary-def');\n  //. const Z = require('sanctuary-type-classes');\n  //.\n  //. const a = $.TypeVariable('a');\n  //. const b = $.TypeVariable('b');\n  //. const f = $.UnaryTypeVariable('f');\n  //.\n  //. //    map :: Functor f => (a -> b) -> f a -> f b\n  //. const map =\n  //. def('map',\n  //.     {f: [Z.Functor]},\n  //.     [$.Function([a, b]), f(a), f(b)],\n  //.     Z.map);\n  //. ```\n  //.\n  //. Whereas a regular type variable is fully resolved (`a` might become\n  //. `Array (Array String)`, for example), a unary type variable defers to\n  //. its type argument, which may itself be a type variable. The type argument\n  //. corresponds to the type argument of a unary type or the *second* type\n  //. argument of a binary type. The second type argument of `Map k v`, for\n  //. example, is `v`. One could replace `Functor => f` with `Map k` or with\n  //. `Map Integer`, but not with `Map`.\n  //.\n  //. This shallow inspection makes it possible to constrain a value's \"outer\"\n  //. and \"inner\" types independently.\n  function UnaryTypeVariable(name) {\n    return function($1) {\n      function format(outer, inner) {\n        return outer('(' + name + ' ') + inner('$1')(String($1)) + outer(')');\n      }\n      var types = {$1: {extractor: K([]), type: $1}};\n      return new _Type(VARIABLE, name, '', format, K(true), ['$1'], types);\n    };\n  }\n\n  var CheckedUnaryTypeVariable =\n  def('UnaryTypeVariable',\n      {},\n      [String_, AnyFunction],\n      function(name) {\n        return def(name, {}, [Type, Type], UnaryTypeVariable(name));\n      });\n\n  //# BinaryTypeVariable :: String -> (Type -> Type -> Type)\n  //.\n  //. Combines [`BinaryType`][] and [`TypeVariable`][].\n  //.\n  //. To define a binary type variable `t a b` one must provide:\n  //.\n  //.   - a name (conventionally matching `^[a-z]$`);\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`); and\n  //.\n  //.   - the type of `b` (exposed as `t.types.$2.type`).\n  //.\n  //. The more detailed explanation of [`UnaryTypeVariable`][] also applies to\n  //. `BinaryTypeVariable`.\n  function BinaryTypeVariable(name) {\n    return function($1, $2) {\n      function format(outer, inner) {\n        return outer('(' + name + ' ') + inner('$1')(String($1)) + outer(' ') +\n                                         inner('$2')(String($2)) + outer(')');\n      }\n      var keys = ['$1', '$2'];\n      var types = {$1: {extractor: K([]), type: $1},\n                   $2: {extractor: K([]), type: $2}};\n      return new _Type(VARIABLE, name, '', format, K(true), keys, types);\n    };\n  }\n\n  var CheckedBinaryTypeVariable =\n  def('BinaryTypeVariable',\n      {},\n      [String_, AnyFunction],\n      function(name) {\n        return def(name, {}, [Type, Type, Type], BinaryTypeVariable(name));\n      });\n\n  //# Thunk :: Type -> Type\n  //.\n  //. `$.Thunk(T)` is shorthand for `$.Function([T])`, the type comprising\n  //. every nullary function (thunk) which returns a value of type `T`.\n  var Thunk =\n  def('Thunk',\n      {},\n      [Type, Type],\n      function(t) { return Function_([t]); });\n\n  //# Predicate :: Type -> Type\n  //.\n  //. `$.Predicate(T)` is shorthand for `$.Function([T, $.Boolean])`, the type\n  //. comprising every predicate function which takes a value of type `T`.\n  var Predicate =\n  def('Predicate',\n      {},\n      [Type, Type],\n      function(t) { return Function_([t, Boolean_]); });\n\n  //. ### Type classes\n  //.\n  //. `concatS`, defined earlier, is a function which concatenates two strings.\n  //. This is overly restrictive, since other types support concatenation\n  //. (Array, for example).\n  //.\n  //. One could use a type variable to define a polymorphic \"concat\" function:\n  //.\n  //. ```javascript\n  //. //    _concat :: a -> a -> a\n  //. const _concat =\n  //. def('_concat', {}, [a, a, a], (x, y) => x.concat(y));\n  //.\n  //. _concat('fizz', 'buzz');\n  //. // => 'fizzbuzz'\n  //.\n  //. _concat([1, 2], [3, 4]);\n  //. // => [1, 2, 3, 4]\n  //.\n  //. _concat([1, 2], 'buzz');\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   _concat :: a -> a -> a\n  //. //              ^    ^\n  //. //              1    2\n  //. //\n  //. //   1)  [1, 2] :: Array Number\n  //. //\n  //. //   2)  \"buzz\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  //.\n  //. The type of `_concat` is misleading: it suggests that it can operate on\n  //. any two values of *any* one type. In fact there's an implicit constraint,\n  //. since the type must support concatenation (in [mathematical][semigroup]\n  //. terms, the type must have a [semigroup][FL:Semigroup]). The run-time type\n  //. errors that result when this constraint is violated are not particularly\n  //. descriptive:\n  //.\n  //. ```javascript\n  //. _concat({}, {});\n  //. // ! TypeError: undefined is not a function\n  //.\n  //. _concat(null, null);\n  //. // ! TypeError: Cannot read property 'concat' of null\n  //. ```\n  //.\n  //. The solution is to constrain `a` by first defining a [`TypeClass`][]\n  //. value, then specifying the constraint in the definition of the \"concat\"\n  //. function:\n  //.\n  //. ```javascript\n  //. const Z = require('sanctuary-type-classes');\n  //.\n  //. //    Semigroup :: TypeClass\n  //. const Semigroup = Z.TypeClass(\n  //.   'my-package/Semigroup',\n  //.   'http://example.com/my-package#Semigroup',\n  //.   [],\n  //.   x => x != null && typeof x.concat === 'function'\n  //. );\n  //.\n  //. //    concat :: Semigroup a => a -> a -> a\n  //. const concat =\n  //. def('concat', {a: [Semigroup]}, [a, a, a], (x, y) => x.concat(y));\n  //.\n  //. concat([1, 2], [3, 4]);\n  //. // => [1, 2, 3, 4]\n  //.\n  //. concat({}, {});\n  //. // ! TypeError: Type-class constraint violation\n  //. //\n  //. //   concat :: Semigroup a => a -> a -> a\n  //. //             ^^^^^^^^^^^    ^\n  //. //                            1\n  //. //\n  //. //   1)  {} :: Object, StrMap ???\n  //. //\n  //. //   ‘concat’ requires ‘a’ to satisfy the Semigroup type-class constraint; the value at position 1 does not.\n  //. //\n  //. //   See http://example.com/my-package#Semigroup for information about the my-package/Semigroup type class.\n  //.\n  //. concat(null, null);\n  //. // ! TypeError: Type-class constraint violation\n  //. //\n  //. //   concat :: Semigroup a => a -> a -> a\n  //. //             ^^^^^^^^^^^    ^\n  //. //                            1\n  //. //\n  //. //   1)  null :: Null\n  //. //\n  //. //   ‘concat’ requires ‘a’ to satisfy the Semigroup type-class constraint; the value at position 1 does not.\n  //. //\n  //. //   See http://example.com/my-package#Semigroup for information about the my-package/Semigroup type class.\n  //. ```\n  //.\n  //. Multiple constraints may be placed on a type variable by including\n  //. multiple `TypeClass` values in the array (e.g. `{a: [Foo, Bar, Baz]}`).\n\n  //  checkValue :: ... -> Undefined\n  function checkValue(\n    env,                // :: Array Type\n    typeInfo,           // :: TypeInfo\n    $typeVarMapBox,     // :: Box TypeVarMap\n    index,              // :: Integer\n    propPath,           // :: PropPath\n    t,                  // :: Type\n    value               // :: Any\n  ) {\n    if (t.type === VARIABLE) {\n      $typeVarMapBox[0] =\n        updateTypeVarMap(env, $typeVarMapBox[0], t, index, propPath, [value]);\n      if (isEmpty($typeVarMapBox[0][t.name].types)) {\n        throw typeVarConstraintViolation(\n          env,\n          typeInfo,\n          index,\n          propPath,\n          $typeVarMapBox[0][t.name].valuesByPath\n        );\n      }\n    } else if (!test(env, t, value)) {\n      throw invalidValue(env, typeInfo, index, propPath, value);\n    }\n  }\n\n  //  wrapFunction :: ... -> Function\n  function wrapFunction(\n    env,                // :: Array Type\n    typeInfo,           // :: TypeInfo\n    $typeVarMapBox,     // :: Box TypeVarMap\n    index,              // :: Integer\n    f                   // :: Function\n  ) {\n    var expType = typeInfo.types[index];\n    var numArgsExpected = expType.keys.length - 1;\n    return arity(numArgsExpected, function() {\n      var args = slice.call(arguments);\n      if (args.length !== numArgsExpected) {\n        throw invalidArgumentsLength(typeInfo, index, numArgsExpected, args);\n      }\n      function checkValue$(propPath, t, x) {\n        checkValue(env, typeInfo, $typeVarMapBox, index, propPath, t, x);\n      }\n      init(expType.keys).forEach(function(k, idx) {\n        checkValue$([k], expType.types[k].type, args[idx]);\n      });\n\n      var output = f.apply(this, arguments);\n      var k = last(expType.keys);\n      checkValue$([k], expType.types[k].type, output);\n      return output;\n    });\n  }\n\n  //  wrapFunctionCond ::\n  //    Array Type -> TypeInfo -> Box TypeVarMap -> Integer -> a -> a\n  function wrapFunctionCond(env, typeInfo, $typeVarMapBox, index, value) {\n    return typeInfo.types[index].type === FUNCTION ?\n      wrapFunction(env, typeInfo, $typeVarMapBox, index, value) :\n      value;\n  }\n\n  //  wrapFunctions :: ... -> Array Any\n  function wrapFunctions(\n    env,                // :: Array Type\n    typeInfo,           // :: TypeInfo\n    $typeVarMapBox,     // :: Box TypeVarMap\n    values              // :: Array Any\n  ) {\n    return values.map(function(value, idx) {\n      return wrapFunctionCond(env, typeInfo, $typeVarMapBox, idx, value);\n    });\n  }\n\n  //  tooManyArguments :: (TypeInfo, Integer) -> Error\n  //\n  //  This function is used in `curry` when a function defined via `def`\n  //  is applied to too many arguments.\n  function tooManyArguments(typeInfo, numArgsReceived) {\n    var numArgsExpected = typeInfo.types.length - 1;\n    return new TypeError(trimTrailingSpaces(\n      'Function applied to too many arguments\\n\\n' +\n      typeSignature(typeInfo) + '\\n\\n' +\n      q(typeInfo.name) + ' expected' +\n      (numArgsExpected > 0 ? ' at most ' : ' ') + numArgs(numArgsExpected) +\n      ' but received ' + numArgs(numArgsReceived) + '.\\n'\n    ));\n  }\n\n  //  constraintsRepr :: ... -> String\n  function constraintsRepr(\n    constraints,    // :: StrMap (Array TypeClass)\n    outer,          // :: String -> String\n    inner           // :: String -> TypeClass -> String -> String\n  ) {\n    var $reprs = [];\n    Object.keys(constraints).sort().forEach(function(k) {\n      var f = inner(k);\n      constraints[k].forEach(function(typeClass) {\n        $reprs.push(f(typeClass)(stripNamespace(typeClass.name) + ' ' + k));\n      });\n    });\n    return when($reprs.length > 0,\n                function(s) { return s + outer(' => '); },\n                when($reprs.length > 1,\n                     wrap(outer('('))(outer(')')),\n                     $reprs.join(outer(', '))));\n  }\n\n  //  label :: String -> String -> String\n  function label(label) {\n    return function(s) {\n      var delta = s.length - label.length;\n      return strRepeat(' ', Math.floor(delta / 2)) + label +\n             strRepeat(' ', Math.ceil(delta / 2));\n    };\n  }\n\n  //  typeVarNames :: Type -> Array String\n  function typeVarNames(t) {\n    return Z.concat(\n      t.type === VARIABLE ? [t.name] : [],\n      Z.chain(function(k) { return typeVarNames(t.types[k].type); }, t.keys)\n    );\n  }\n\n  //  showTypeWith :: TypeInfo -> Type -> String\n  function showTypeWith(typeInfo) {\n    var names = Z.chain(typeVarNames, typeInfo.types);\n    return function(t) {\n      var code = 'a'.charCodeAt(0);\n      return unless(\n        t.type === FUNCTION || t.type === RECORD || isEmpty(t.keys),\n        stripOutermostParens,\n        String(t).replace(/\\bUnknown\\b/g, function() {\n          // eslint-disable-next-line no-plusplus\n          do var name = String.fromCharCode(code++);\n          while (names.indexOf(name) >= 0);\n          return name;\n        })\n      );\n    };\n  }\n\n  //  showTypeQuoted :: Type -> String\n  function showTypeQuoted(t) {\n    return q(unless(t.type === RECORD || isEmpty(t.keys),\n                    stripOutermostParens,\n                    String(t)));\n  }\n\n  //  showValuesAndTypes :: ... -> String\n  function showValuesAndTypes(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    values,         // :: Array Any\n    pos             // :: Integer\n  ) {\n    var showType = showTypeWith(typeInfo);\n    return String(pos) + ')  ' + Z.map(function(x) {\n      var types = determineActualTypesLoose(env, [x]);\n      return Z.toString(x) + ' :: ' + Z.map(showType, types).join(', ');\n    }, values).join('\\n    ');\n  }\n\n  //  typeSignature :: TypeInfo -> String\n  function typeSignature(typeInfo) {\n    var reprs = Z.map(showTypeWith(typeInfo), typeInfo.types);\n    var arity = reprs.length - 1;\n    return typeInfo.name + ' :: ' +\n             constraintsRepr(typeInfo.constraints, id, K(K(id))) +\n             when(arity === 0, parenthesize, init(reprs).join(' -> ')) +\n             ' -> ' + last(reprs);\n  }\n\n  //  _underline :: ... -> String\n  function _underline(\n    t,              // :: Type\n    propPath,       // :: PropPath\n    formatType3     // :: Type -> Array String -> String -> String\n  ) {\n    return unless(t.type === RECORD ||\n                    isEmpty(t.keys) ||\n                    t.type === FUNCTION && isEmpty(propPath) ||\n                    !isEmpty(propPath),\n                  stripOutermostParens,\n                  formatType3(t)(propPath)(t.format(_, function(k) {\n                    return K(_underline(t.types[k].type,\n                                        Z.concat(propPath, [k]),\n                                        formatType3));\n                  })));\n  }\n\n  //  underline :: ... -> String\n  function underline(\n    typeInfo,               // :: TypeInfo\n    underlineConstraint,    // :: String -> TypeClass -> String -> String\n    formatType5\n    // :: Integer -> (String -> String) -> Type -> PropPath -> String -> String\n  ) {\n    var st = typeInfo.types.reduce(function(st, t, index) {\n      var formatType4 = formatType5(index);\n      var counter = st.counter;\n      function replace(s) { return label(String(counter += 1))(s); }\n      return {\n        carets: Z.concat(st.carets, [_underline(t, [], formatType4(r('^')))]),\n        numbers: Z.concat(st.numbers,\n                          [_underline(t, [], formatType4(replace))]),\n        counter: counter\n      };\n    }, {carets: [], numbers: [], counter: 0});\n\n    return typeSignature(typeInfo) + '\\n' +\n           _(typeInfo.name + ' :: ') +\n             constraintsRepr(typeInfo.constraints, _, underlineConstraint) +\n             st.carets.join(_(' -> ')) + '\\n' +\n           _(typeInfo.name + ' :: ') +\n             constraintsRepr(typeInfo.constraints, _, K(K(_))) +\n             st.numbers.join(_(' -> ')) + '\\n';\n  }\n\n  //  resolvePropPath :: (Type, Array String) -> Type\n  function resolvePropPath(t, propPath) {\n    return Z.reduce(function(t, prop) { return t.types[prop].type; },\n                    t,\n                    propPath);\n  }\n\n  //  formatType6 ::\n  //    PropPath -> Integer -> (String -> String) ->\n  //      Type -> PropPath -> String -> String\n  function formatType6(indexedPropPath) {\n    return function(index_) {\n      return function(f) {\n        return function(t) {\n          return function(propPath_) {\n            var indexedPropPath_ = Z.concat([index_], propPath_);\n            var p = isPrefix(indexedPropPath_)(indexedPropPath);\n            var q = isPrefix(indexedPropPath)(indexedPropPath_);\n            return p && q ? f : p ? id : _;\n          };\n        };\n      };\n    };\n  }\n\n  //  see :: (String, { name :: String, url :: String? }) -> String\n  function see(label, record) {\n    return record.url == null || record.url === '' ?\n           '' :\n           '\\nSee ' + record.url +\n           ' for information about the ' + record.name + ' ' + label + '.\\n';\n  }\n\n  //  typeClassConstraintViolation :: ... -> Error\n  function typeClassConstraintViolation(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    typeClass,      // :: TypeClass\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    value,          // :: Any\n    typeVarMap      // :: TypeVarMap\n  ) {\n    var expType = resolvePropPath(typeInfo.types[index], propPath);\n    return new TypeError(trimTrailingSpaces(\n      'Type-class constraint violation\\n\\n' +\n      underline(typeInfo,\n                function(tvn) {\n                  return function(tc) {\n                    return tvn === expType.name && tc.name === typeClass.name ?\n                      r('^') :\n                      _;\n                  };\n                },\n                formatType6(Z.concat([index], propPath))) +\n      '\\n' +\n      showValuesAndTypes(env, typeInfo, [value], 1) + '\\n\\n' +\n      q(typeInfo.name) + ' requires ' + q(expType.name) + ' to satisfy the ' +\n      stripNamespace(typeClass.name) + ' type-class constraint; ' +\n      'the value at position 1 does not.\\n' +\n      see('type class', typeClass)\n    ));\n  }\n\n  //  typeVarConstraintViolation :: ... -> Error\n  function typeVarConstraintViolation(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    valuesByPath    // :: StrMap (Array Any)\n  ) {\n    //  If we apply an ‘a -> a -> a -> a’ function to Left('x'), Right(1), and\n    //  Right(null) we'd like to avoid underlining the first argument position,\n    //  since Left('x') is compatible with the other ‘a’ values.\n    var key = JSON.stringify(Z.concat([index], propPath));\n    var values = valuesByPath[key];\n\n    //  Note: Sorting these keys lexicographically is not \"correct\", but it\n    //  does the right thing for indexes less than 10.\n    var keys = Object.keys(valuesByPath).sort().filter(function(k) {\n      var values_ = valuesByPath[k];\n      return (\n        //  Keep X, the position at which the violation was observed.\n        k === key ||\n        //  Keep positions whose values are incompatible with the values at X.\n        isEmpty(determineActualTypesStrict(env, Z.concat(values, values_)))\n      );\n    });\n\n    var underlinedTypeVars =\n    underlineTypeVars(typeInfo,\n                      Z.reduce(function($valuesByPath, k) {\n                        $valuesByPath[k] = valuesByPath[k];\n                        return $valuesByPath;\n                      }, {}, keys));\n\n    return new TypeError(trimTrailingSpaces(\n      values.length === 1 && isEmpty(determineActualTypesLoose(env, values)) ?\n        'Unrecognized value\\n\\n' +\n        underlinedTypeVars + '\\n' +\n        '1)  ' + Z.toString(values[0]) + ' :: (no types)\\n\\n' +\n        toMarkdownList(\n          'The environment is empty! ' +\n          'Polymorphic functions require a non-empty environment.\\n',\n          'The value at position 1 is not a member of any type in ' +\n          'the environment.\\n\\n' +\n          'The environment contains the following types:\\n\\n',\n          showTypeWith(typeInfo),\n          env\n        ) :\n      // else\n        'Type-variable constraint violation\\n\\n' +\n        underlinedTypeVars + '\\n' +\n        Z.reduce(function(st, k) {\n          var values = valuesByPath[k];\n          return isEmpty(values) ? st : {\n            idx: st.idx + 1,\n            s: st.s +\n               showValuesAndTypes(env, typeInfo, values, st.idx + 1) +\n               '\\n\\n'\n          };\n        }, {idx: 0, s: ''}, keys).s +\n        'Since there is no type of which all the above values are ' +\n        'members, the type-variable constraint has been violated.\\n'\n    ));\n  }\n\n  //  invalidValue :: ... -> Error\n  function invalidValue(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    value           // :: Any\n  ) {\n    var t = resolvePropPath(typeInfo.types[index], propPath);\n    return new TypeError(trimTrailingSpaces(\n      'Invalid value\\n\\n' +\n      underline(typeInfo,\n                K(K(_)),\n                formatType6(Z.concat([index], propPath))) +\n      '\\n' +\n      showValuesAndTypes(env, typeInfo, [value], 1) + '\\n\\n' +\n      'The value at position 1 is not a member of ' + showTypeQuoted(t) + '.' +\n      '\\n' +\n      see('type', t)\n    ));\n  }\n\n  //  invalidArgumentsLength :: ... -> Error\n  //\n  //  This function is used in `wrapFunction` to ensure that higher-order\n  //  functions defined via `def` only ever apply a function argument to\n  //  the correct number of arguments.\n  function invalidArgumentsLength(\n    typeInfo,           // :: TypeInfo\n    index,              // :: Integer\n    numArgsExpected,    // :: Integer\n    args                // :: Array Any\n  ) {\n    return new TypeError(trimTrailingSpaces(\n      q(typeInfo.name) + ' applied ' + showTypeQuoted(typeInfo.types[index]) +\n      ' to the wrong number of arguments\\n\\n' +\n      underline(\n        typeInfo,\n        K(K(_)),\n        function(index_) {\n          return function(f) {\n            return function(t) {\n              return function(propPath) {\n                return function(s) {\n                  return index_ === index ?\n                    String(t).replace(\n                      /^[(](.*) -> (.*)[)]$/,\n                      function(s, $1, $2) {\n                        return _('(') + f($1) + _(' -> ' + $2 + ')');\n                      }\n                    ) :\n                    _(s);\n                };\n              };\n            };\n          };\n        }\n      ) + '\\n' +\n      'Expected ' + numArgs(numArgsExpected) +\n      ' but received ' + numArgs(args.length) +\n      toMarkdownList('.\\n', ':\\n\\n', Z.toString, args)\n    ));\n  }\n\n  //  assertRight :: Either (() -> Error) a -> a !\n  function assertRight(either) {\n    if (either.isLeft) throw either.value();\n    return either.value;\n  }\n\n  //  curry :: ... -> Function\n  function curry(\n    opts,         // :: Options\n    typeInfo,     // :: TypeInfo\n    _typeVarMap,  // :: TypeVarMap\n    _values,      // :: Array Any\n    _indexes,     // :: Array Integer\n    impl          // :: Function\n  ) {\n    var n = typeInfo.types.length - 1;\n\n    var curried = arity(_indexes.length, function() {\n      if (opts.checkTypes) {\n        var delta = _indexes.length - arguments.length;\n        if (delta < 0) throw tooManyArguments(typeInfo, n - delta);\n      }\n      var typeVarMap = _typeVarMap;\n      var values = _values.slice();\n      var indexes = [];\n      for (var idx = 0; idx < _indexes.length; idx += 1) {\n        var index = _indexes[idx];\n\n        if (idx < arguments.length &&\n            !(typeof arguments[idx] === 'object' &&\n              arguments[idx] != null &&\n              arguments[idx]['@@functional/placeholder'] === true)) {\n\n          var value = arguments[idx];\n          if (opts.checkTypes) {\n            var result = satisfactoryTypes(opts.env,\n                                           typeInfo,\n                                           typeVarMap,\n                                           typeInfo.types[index],\n                                           index,\n                                           [],\n                                           [value]);\n            typeVarMap = assertRight(result).typeVarMap;\n          }\n          values[index] = value;\n        } else {\n          indexes.push(index);\n        }\n      }\n      if (isEmpty(indexes)) {\n        if (opts.checkTypes) {\n          var returnValue = impl.apply(this,\n                                       wrapFunctions(opts.env,\n                                                     typeInfo,\n                                                     [typeVarMap],\n                                                     values));\n          assertRight(satisfactoryTypes(opts.env,\n                                        typeInfo,\n                                        typeVarMap,\n                                        typeInfo.types[n],\n                                        n,\n                                        [],\n                                        [returnValue]));\n          return wrapFunctionCond(env, typeInfo, [typeVarMap], n, returnValue);\n        } else {\n          return impl.apply(this, values);\n        }\n      } else {\n        return curry(opts, typeInfo, typeVarMap, values, indexes, impl);\n      }\n    });\n\n    var showType = showTypeWith(typeInfo);\n    curried.inspect = curried.toString = function() {\n      var vReprs = [];\n      var tReprs = [];\n      for (var idx = 0, placeholders = 0; idx < n; idx += 1) {\n        if (_indexes.indexOf(idx) >= 0) {\n          placeholders += 1;\n          tReprs.push(showType(typeInfo.types[idx]));\n        } else {\n          while (placeholders > 0) {\n            vReprs.push('__');\n            placeholders -= 1;\n          }\n          vReprs.push(Z.toString(_values[idx]));\n        }\n      }\n      return typeInfo.name +\n             when(vReprs.length > 0, parenthesize, vReprs.join(', ')) +\n             ' :: ' +\n             constraintsRepr(typeInfo.constraints, id, K(K(id))) +\n             when(n === 0, parenthesize, tReprs.join(' -> ')) +\n             ' -> ' + showType(typeInfo.types[n]);\n    };\n\n    return curried;\n  }\n\n  function _create(opts) {\n    function def(name, constraints, expTypes, impl) {\n      var values = new Array(expTypes.length - 1);\n      if (values.length > 9) {\n        throw new RangeError(q(def.name) + ' cannot define a function ' +\n                             'with arity greater than nine');\n      }\n      return curry(opts,\n                   {name: name, constraints: constraints, types: expTypes},\n                   {},\n                   values,\n                   range(0, values.length),\n                   impl);\n    }\n    return def(def.name,\n               {},\n               [String_,\n                StrMap(Array_(TypeClass)),\n                NonEmpty(Array_(Type)),\n                AnyFunction,\n                AnyFunction],\n               def);\n  }\n\n  var create =\n  def('create',\n      {},\n      [RecordType({checkTypes: Boolean_, env: Array_(Any)}), AnyFunction],\n      _create);\n\n  //  fromUncheckedUnaryType :: (Type -> Type) -> (Type -> Type)\n  function fromUncheckedUnaryType(typeConstructor) {\n    var t = typeConstructor(Unknown);\n    var _1 = t.types.$1.extractor;\n    return CheckedUnaryType(t.name, t.url, t._test, _1);\n  }\n\n  //  fromUncheckedBinaryType :: ((Type, Type) -> Type) ->\n  //                             (Type -> Type -> Type)\n  function fromUncheckedBinaryType(typeConstructor) {\n    var t = typeConstructor(Unknown, Unknown);\n    var _1 = t.types.$1.extractor;\n    var _2 = t.types.$2.extractor;\n    return CheckedBinaryType(t.name, t.url, t._test, _1, _2);\n  }\n\n  return {\n    __: __,\n    Any: Any,\n    AnyFunction: AnyFunction,\n    Arguments: Arguments,\n    Array: fromUncheckedUnaryType(Array_),\n    Boolean: Boolean_,\n    Date: Date_,\n    Error: Error_,\n    FiniteNumber: FiniteNumber,\n    Function: def('Function', {}, [Array_(Type), Type], Function_),\n    GlobalRegExp: GlobalRegExp,\n    Integer: Integer,\n    NegativeFiniteNumber: NegativeFiniteNumber,\n    NegativeInteger: NegativeInteger,\n    NegativeNumber: NegativeNumber,\n    NonEmpty: NonEmpty,\n    NonGlobalRegExp: NonGlobalRegExp,\n    NonNegativeInteger: NonNegativeInteger,\n    NonZeroFiniteNumber: NonZeroFiniteNumber,\n    NonZeroInteger: NonZeroInteger,\n    NonZeroValidNumber: NonZeroValidNumber,\n    Null: Null,\n    Nullable: fromUncheckedUnaryType(Nullable),\n    Number: Number_,\n    Object: Object_,\n    Pair: fromUncheckedBinaryType(Pair),\n    PositiveFiniteNumber: PositiveFiniteNumber,\n    PositiveInteger: PositiveInteger,\n    PositiveNumber: PositiveNumber,\n    RegExp: RegExp_,\n    RegexFlags: RegexFlags,\n    StrMap: fromUncheckedUnaryType(StrMap),\n    String: String_,\n    Symbol: Symbol_,\n    Type: Type,\n    TypeClass: TypeClass,\n    Undefined: Undefined,\n    Unknown: Unknown,\n    ValidDate: ValidDate,\n    ValidNumber: ValidNumber,\n    env: env,\n    create: create,\n    test: def('test', {}, [Array_(Type), Type, Any, Boolean_], test),\n    NullaryType: CheckedNullaryType,\n    UnaryType: CheckedUnaryType,\n    BinaryType: CheckedBinaryType,\n    EnumType: CheckedEnumType,\n    RecordType: CheckedRecordType,\n    TypeVariable: CheckedTypeVariable,\n    UnaryTypeVariable: CheckedUnaryTypeVariable,\n    BinaryTypeVariable: CheckedBinaryTypeVariable,\n    Thunk: Thunk,\n    Predicate: Predicate\n  };\n\n}));\n\n//. [FL:Semigroup]:         https://github.com/fantasyland/fantasy-land#semigroup\n//. [Monoid]:               https://github.com/fantasyland/fantasy-land#monoid\n//. [Setoid]:               https://github.com/fantasyland/fantasy-land#setoid\n//. [`Array`]:              #Array\n//. [`BinaryType`]:         #BinaryType\n//. [`Date`]:               #Date\n//. [`FiniteNumber`]:       #FiniteNumber\n//. [`GlobalRegExp`]:       #GlobalRegExp\n//. [`Integer`]:            #Integer\n//. [`NonGlobalRegExp`]:    #NonGlobalRegExp\n//. [`Number`]:             #Number\n//. [`Object.create`]:      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n//. [`Pair`]:               #Pair\n//. [`RegExp`]:             #RegExp\n//. [`RegexFlags`]:         #RegexFlags\n//. [`String`]:             #String\n//. [`SyntaxError`]:        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n//. [`TypeClass`]:          https://github.com/sanctuary-js/sanctuary-type-classes#TypeClass\n//. [`TypeError`]:          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n//. [`TypeVariable`]:       #TypeVariable\n//. [`UnaryType`]:          #UnaryType\n//. [`UnaryTypeVariable`]:  #UnaryTypeVariable\n//. [`Unknown`]:            #Unknown\n//. [`ValidNumber`]:        #ValidNumber\n//. [`env`]:                #env\n//. [arguments]:            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\n//. [enumerated types]:     https://en.wikipedia.org/wiki/Enumerated_type\n//. [max]:                  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n//. [min]:                  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\n//. [record type]:          #RecordType\n//. [semigroup]:            https://en.wikipedia.org/wiki/Semigroup\n//. [type class]:           #type-classes\n//. [type variables]:       #TypeVariable\n//. [types]:                #types\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.store = undefined;\n\nvar _preact = __webpack_require__(2);\n\nvar _App = __webpack_require__(24);\n\nvar _App2 = _interopRequireDefault(_App);\n\nvar _store = __webpack_require__(6);\n\nvar _store2 = _interopRequireDefault(_store);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// debug\nif (false) {\n  require(\"preact/devtools\");\n}\n\nvar initialState = {\n  imagesIndex: null,\n  breeds: [],\n  letters: [],\n  images: [],\n  loading: false\n};\n\nvar store = exports.store = (0, _store2.default)(initialState);\n\n(0, _preact.render)((0, _preact.h)(\n  _store.Provider,\n  { store: store },\n  (0, _preact.h)(_App2.default, null)\n), document.getElementById(\"root\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvaW5kZXguanM/MWZkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBkZWJ1Z1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcImRldmVsb3BtZW50XCIpIHtcbiAgcmVxdWlyZShcInByZWFjdC9kZXZ0b29sc1wiKTtcbn1cblxuaW1wb3J0IHsgaCwgcmVuZGVyIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHBcIjtcbmltcG9ydCBjcmVhdGVTdG9yZSBmcm9tIFwiLi9zdG9yZVwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwiLi9zdG9yZVwiO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGltYWdlc0luZGV4OiBudWxsLFxuICBicmVlZHM6IFtdLFxuICBsZXR0ZXJzOiBbXSxcbiAgaW1hZ2VzOiBbXSxcbiAgbG9hZGluZzogZmFsc2Vcbn07XG5cbmV4cG9ydCBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKGluaXRpYWxTdGF0ZSk7XG5cbnJlbmRlcihcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPEFwcCAvPlxuICA8L1Byb3ZpZGVyPixcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpXG4pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9pbmRleC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUtBO0FBQ0E7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/YzNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.connect = connect;\nexports.Provider = Provider;\nexports.default = createStore;\n\nvar _preact = __webpack_require__(2);\n\nfunction connect(mapStateToProps, actions) {\n\tif (typeof mapStateToProps !== 'function') {\n\t\tmapStateToProps = select(mapStateToProps || []);\n\t}\n\treturn function (Child) {\n\t\tfunction Wrapper(props, _ref) {\n\t\t\tvar _this = this;\n\n\t\t\tvar store = _ref.store;\n\n\t\t\tvar state = mapStateToProps(store ? store.getState() : {}, props);\n\t\t\tvar boundActions = actions ? mapActions(actions, store) : { store: store };\n\t\t\tvar update = function update() {\n\t\t\t\tvar mapped = mapStateToProps(store ? store.getState() : {}, _this.props);\n\t\t\t\tfor (var i in mapped) {\n\t\t\t\t\tif (mapped[i] !== state[i]) {\n\t\t\t\t\t\tstate = mapped;\n\t\t\t\t\t\treturn _this.setState(null);\n\t\t\t\t\t}\n\t\t\t\t}for (var _i in state) {\n\t\t\t\t\tif (!(_i in mapped)) {\n\t\t\t\t\t\tstate = mapped;\n\t\t\t\t\t\treturn _this.setState(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.componentDidMount = function () {\n\t\t\t\tupdate();\n\t\t\t\tstore.subscribe(update);\n\t\t\t};\n\t\t\tthis.componentWillUnmount = function () {\n\t\t\t\tstore.unsubscribe(update);\n\t\t\t};\n\t\t\tthis.render = function (props) {\n\t\t\t\treturn (0, _preact.h)(Child, assign(assign(assign({}, boundActions), props), state));\n\t\t\t};\n\t\t}\n\t\treturn (Wrapper.prototype = new _preact.Component()).constructor = Wrapper;\n\t};\n}\n\nfunction Provider(props) {\n\tthis.getChildContext = function () {\n\t\treturn { store: props.store };\n\t};\n}\n\nProvider.prototype.render = function (props) {\n\treturn props.children[0];\n};\n\nfunction createStore(state) {\n\tvar listeners = [];\n\tstate = state || {};\n\n\tfunction unsubscribe(listener) {\n\t\tvar out = [];\n\t\tfor (var i = 0; i < listeners.length; i++) {\n\t\t\tif (listeners[i] === listener) {\n\t\t\t\tlistener = null;\n\t\t\t} else {\n\t\t\t\tout.push(listeners[i]);\n\t\t\t}\n\t\t}\n\t\tlisteners = out;\n\t}\n\n\tfunction setState(update, overwrite, action) {\n\t\tstate = overwrite ? update : assign(assign({}, state), update);\n\t\tvar currentListeners = listeners;\n\t\tfor (var i = 0; i < currentListeners.length; i++) {\n\t\t\tcurrentListeners[i](state, action);\n\t\t}\n\t}\n\n\treturn {\n\t\taction: function action(_action) {\n\t\t\tfunction apply(result) {\n\t\t\t\tsetState(result, false, _action);\n\t\t\t}\n\t\t\treturn function () {\n\t\t\t\tvar args = [state];\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\targs.push(arguments[i]);\n\t\t\t\t}var ret = _action.apply(this, args);\n\t\t\t\tif (ret != null) {\n\t\t\t\t\tif (ret.then) ret.then(apply);else apply(ret);\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\n\t\tsetState: setState,\n\t\tsubscribe: function subscribe(listener) {\n\t\t\tlisteners.push(listener);\n\t\t\treturn function () {\n\t\t\t\tunsubscribe(listener);\n\t\t\t};\n\t\t},\n\n\t\tunsubscribe: unsubscribe,\n\t\tgetState: function getState() {\n\t\t\treturn state;\n\t\t}\n\t};\n}\n\n// Bind an object/factory of actions to the store and wrap them.\nfunction mapActions(actions, store) {\n\tif (typeof actions === 'function') actions = actions(store);\n\tvar mapped = {};\n\tfor (var i in actions) {\n\t\tmapped[i] = store.action(actions[i]);\n\t}\n\treturn mapped;\n}\n\n// select('foo,bar') creates a function of the form: ({ foo, bar }) => ({ foo, bar })\nfunction select(properties) {\n\tif (typeof properties === 'string') properties = properties.split(/\\s*,\\s*/);\n\treturn function (state) {\n\t\tvar selected = {};\n\t\tfor (var i = 0; i < properties.length; i++) {\n\t\t\tselected[properties[i]] = state[properties[i]];\n\t\t}\n\t\treturn selected;\n\t};\n}\n\nfunction assign(obj, props) {\n\tfor (var i in props) {\n\t\tobj[i] = props[i];\n\t}return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvc3RvcmUuanM/M2JmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoLCBDb21wb25lbnQgfSBmcm9tICdwcmVhY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIGFjdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMhPT0nZnVuY3Rpb24nKSB7XG5cdFx0bWFwU3RhdGVUb1Byb3BzID0gc2VsZWN0KG1hcFN0YXRlVG9Qcm9wcyB8fCBbXSk7XG5cdH1cblx0cmV0dXJuIENoaWxkID0+IHtcblx0XHRmdW5jdGlvbiBXcmFwcGVyKHByb3BzLCB7IHN0b3JlIH0pIHtcblx0XHRcdGxldCBzdGF0ZSA9IG1hcFN0YXRlVG9Qcm9wcyhzdG9yZSA/IHN0b3JlLmdldFN0YXRlKCkgOiB7fSwgcHJvcHMpO1xuXHRcdFx0bGV0IGJvdW5kQWN0aW9ucyA9IGFjdGlvbnMgPyBtYXBBY3Rpb25zKGFjdGlvbnMsIHN0b3JlKSA6IHsgc3RvcmUgfTtcblx0XHRcdGxldCB1cGRhdGUgPSAoKSA9PiB7XG5cdFx0XHRcdGxldCBtYXBwZWQgPSBtYXBTdGF0ZVRvUHJvcHMoc3RvcmUgPyBzdG9yZS5nZXRTdGF0ZSgpIDoge30sIHRoaXMucHJvcHMpO1xuXHRcdFx0XHRmb3IgKGxldCBpIGluIG1hcHBlZCkgaWYgKG1hcHBlZFtpXSE9PXN0YXRlW2ldKSB7XG5cdFx0XHRcdFx0c3RhdGUgPSBtYXBwZWQ7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0U3RhdGUobnVsbCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yIChsZXQgaSBpbiBzdGF0ZSkgaWYgKCEoaSBpbiBtYXBwZWQpKSB7XG5cdFx0XHRcdFx0c3RhdGUgPSBtYXBwZWQ7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0U3RhdGUobnVsbCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHR0aGlzLmNvbXBvbmVudERpZE1vdW50ID0gKCkgPT4ge1xuXHRcdFx0XHR1cGRhdGUoKTtcblx0XHRcdFx0c3RvcmUuc3Vic2NyaWJlKHVwZGF0ZSk7XG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5jb21wb25lbnRXaWxsVW5tb3VudCA9ICgpID0+IHtcblx0XHRcdFx0c3RvcmUudW5zdWJzY3JpYmUodXBkYXRlKTtcblx0XHRcdH07XG5cdFx0XHR0aGlzLnJlbmRlciA9IHByb3BzID0+IGgoQ2hpbGQsIGFzc2lnbihhc3NpZ24oYXNzaWduKHt9LCBib3VuZEFjdGlvbnMpLCBwcm9wcyksIHN0YXRlKSk7XG5cdFx0fVxuXHRcdHJldHVybiAoV3JhcHBlci5wcm90b3R5cGUgPSBuZXcgQ29tcG9uZW50KCkpLmNvbnN0cnVjdG9yID0gV3JhcHBlcjtcblx0fTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gUHJvdmlkZXIocHJvcHMpIHtcblx0dGhpcy5nZXRDaGlsZENvbnRleHQgPSAoKSA9PiAoeyBzdG9yZTogcHJvcHMuc3RvcmUgfSk7XG59XG5cblByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBwcm9wcyA9PiBwcm9wcy5jaGlsZHJlblswXTtcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdG9yZShzdGF0ZSkge1xuXHRsZXQgbGlzdGVuZXJzID0gW107XG5cdHN0YXRlID0gc3RhdGUgfHwge307XG5cblx0ZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcblx0XHRsZXQgb3V0ID0gW107XG5cdFx0Zm9yIChsZXQgaT0wOyBpPGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKGxpc3RlbmVyc1tpXT09PWxpc3RlbmVyKSB7XG5cdFx0XHRcdGxpc3RlbmVyID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRvdXQucHVzaChsaXN0ZW5lcnNbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRsaXN0ZW5lcnMgPSBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRTdGF0ZSh1cGRhdGUsIG92ZXJ3cml0ZSwgYWN0aW9uKSB7XG5cdFx0c3RhdGUgPSBvdmVyd3JpdGUgPyB1cGRhdGUgOiBhc3NpZ24oYXNzaWduKHt9LCBzdGF0ZSksIHVwZGF0ZSk7XG5cdFx0bGV0IGN1cnJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG5cdFx0Zm9yIChsZXQgaT0wOyBpPGN1cnJlbnRMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIGN1cnJlbnRMaXN0ZW5lcnNbaV0oc3RhdGUsIGFjdGlvbik7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGFjdGlvbihhY3Rpb24pIHtcblx0XHRcdGZ1bmN0aW9uIGFwcGx5KHJlc3VsdCkge1xuXHRcdFx0XHRzZXRTdGF0ZShyZXN1bHQsIGZhbHNlLCBhY3Rpb24pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsZXQgYXJncyA9IFtzdGF0ZV07XG5cdFx0XHRcdGZvciAobGV0IGk9MDsgaTxhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuXHRcdFx0XHRsZXQgcmV0ID0gYWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdFx0XHRpZiAocmV0IT1udWxsKSB7XG5cdFx0XHRcdFx0aWYgKHJldC50aGVuKSByZXQudGhlbihhcHBseSk7XG5cdFx0XHRcdFx0ZWxzZSBhcHBseShyZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRzZXRTdGF0ZSxcblx0XHRzdWJzY3JpYmUobGlzdGVuZXIpIHtcblx0XHRcdGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblx0XHRcdHJldHVybiAoKSA9PiB7IHVuc3Vic2NyaWJlKGxpc3RlbmVyKTsgfTtcblx0XHR9LFxuXHRcdHVuc3Vic2NyaWJlLFxuXHRcdGdldFN0YXRlKCkge1xuXHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdH1cblx0fTtcbn1cblxuLy8gQmluZCBhbiBvYmplY3QvZmFjdG9yeSBvZiBhY3Rpb25zIHRvIHRoZSBzdG9yZSBhbmQgd3JhcCB0aGVtLlxuZnVuY3Rpb24gbWFwQWN0aW9ucyhhY3Rpb25zLCBzdG9yZSkge1xuXHRpZiAodHlwZW9mIGFjdGlvbnM9PT0nZnVuY3Rpb24nKSBhY3Rpb25zID0gYWN0aW9ucyhzdG9yZSk7XG5cdGxldCBtYXBwZWQgPSB7fTtcblx0Zm9yIChsZXQgaSBpbiBhY3Rpb25zKSB7XG5cdFx0bWFwcGVkW2ldID0gc3RvcmUuYWN0aW9uKGFjdGlvbnNbaV0pO1xuXHR9XG5cdHJldHVybiBtYXBwZWQ7XG59XG5cblxuLy8gc2VsZWN0KCdmb28sYmFyJykgY3JlYXRlcyBhIGZ1bmN0aW9uIG9mIHRoZSBmb3JtOiAoeyBmb28sIGJhciB9KSA9PiAoeyBmb28sIGJhciB9KVxuZnVuY3Rpb24gc2VsZWN0KHByb3BlcnRpZXMpIHtcblx0aWYgKHR5cGVvZiBwcm9wZXJ0aWVzPT09J3N0cmluZycpIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLnNwbGl0KC9cXHMqLFxccyovKTtcblx0cmV0dXJuIHN0YXRlID0+IHtcblx0XHRsZXQgc2VsZWN0ZWQgPSB7fTtcblx0XHRmb3IgKGxldCBpPTA7IGk8cHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0c2VsZWN0ZWRbcHJvcGVydGllc1tpXV0gPSBzdGF0ZVtwcm9wZXJ0aWVzW2ldXTtcblx0XHR9XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9O1xufVxuXG5mdW5jdGlvbiBhc3NpZ24ob2JqLCBwcm9wcykge1xuXHRmb3IgKGxldCBpIGluIHByb3BzKSBvYmpbaV0gPSBwcm9wc1tpXTtcblx0cmV0dXJuIG9iajtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvc3RvcmUuanMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7QUFpQ0E7QUFPQTtBQUNBO0FBM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBeEJBO0FBMEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _api = __webpack_require__(8);\n\nvar actions = function actions(store) {\n  return {\n    toggleColor: function toggleColor(state, color) {\n      return Object.assign(color, { color: color });\n    },\n    setImagesIndex: function setImagesIndex(state, imagesIndex) {\n      return Object.assign(state, { imagesIndex: imagesIndex });\n    },\n    incrementIndex: function incrementIndex(state, imagesIndex) {\n      if (state.imagesIndex < state.letters.length - 1) {\n        return Object.assign(state, { imagesIndex: state.imagesIndex + 1 });\n      }\n      return state;\n    },\n    decrementIndex: function decrementIndex(state, imagesIndex) {\n      if (state.imagesIndex > 0) {\n        return Object.assign(state, { imagesIndex: state.imagesIndex - 1 });\n      }\n      return state;\n    },\n    getBreeds: function getBreeds(state) {\n      _api.getBreeds.fork(function (err) {\n        return console.log(err);\n      }, function (data) {\n        return store.setState({ breeds: data.breeds, letters: data.letters });\n      });\n    },\n    setImages: function setImages(state, images) {\n      return Object.assign(state, { images: images });\n    },\n    setLoading: function setLoading(state, isLoading) {\n      return Object.assign(state, { loading: isLoading });\n    }\n  };\n};\n\nexports.default = actions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvYWN0aW9ucy5qcz83NzAxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2V0QnJlZWRzfSBmcm9tICcuL2FwaSdcblxuY29uc3QgYWN0aW9ucyA9IHN0b3JlID0+ICh7XG4gIHRvZ2dsZUNvbG9yKHN0YXRlLCBjb2xvcikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNvbG9yLCB7IGNvbG9yIH0pO1xuICB9LFxuICBzZXRJbWFnZXNJbmRleChzdGF0ZSwgaW1hZ2VzSW5kZXgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihzdGF0ZSwgeyBpbWFnZXNJbmRleCB9KTtcbiAgfSxcbiAgaW5jcmVtZW50SW5kZXgoc3RhdGUsIGltYWdlc0luZGV4KSB7XG4gICAgaWYgKHN0YXRlLmltYWdlc0luZGV4IDwgc3RhdGUubGV0dGVycy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihzdGF0ZSwgeyBpbWFnZXNJbmRleDogc3RhdGUuaW1hZ2VzSW5kZXggKyAxIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG4gIH0sXG4gIGRlY3JlbWVudEluZGV4KHN0YXRlLCBpbWFnZXNJbmRleCkge1xuICAgIGlmIChzdGF0ZS5pbWFnZXNJbmRleCA+IDApIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHN0YXRlLCB7IGltYWdlc0luZGV4OiBzdGF0ZS5pbWFnZXNJbmRleCAtIDEgfSk7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZTtcbiAgfSxcbiAgZ2V0QnJlZWRzKHN0YXRlKSB7XG4gICAgZ2V0QnJlZWRzLmZvcmsoXG4gICAgICBlcnIgPT4gY29uc29sZS5sb2coZXJyKSxcbiAgICAgIGRhdGEgPT4gc3RvcmUuc2V0U3RhdGUoeyBicmVlZHM6IGRhdGEuYnJlZWRzLCBsZXR0ZXJzOiBkYXRhLmxldHRlcnMgfSlcbiAgICApO1xuICB9LFxuICBzZXRJbWFnZXMoc3RhdGUsIGltYWdlcykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHN0YXRlLCB7IGltYWdlcyB9KTtcbiAgfSxcbiAgc2V0TG9hZGluZyhzdGF0ZSwgaXNMb2FkaW5nKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3RhdGUsIHtsb2FkaW5nOiBpc0xvYWRpbmd9KVxuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYWN0aW9ucztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2FjdGlvbnMuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE5QkE7QUFBQTtBQUNBO0FBZ0NBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getImagesConcurrently = exports.getImages = exports.getBreeds = exports.S = undefined;\n\nvar _fluture = __webpack_require__(9);\n\nvar F = _interopRequireWildcard(_fluture);\n\nvar _sanctuary = __webpack_require__(29);\n\nvar Sanctuary = _interopRequireWildcard(_sanctuary);\n\nvar _2 = __webpack_require__(4);\n\nvar _actions = __webpack_require__(7);\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar _require = __webpack_require__(30),\n    flutureEnv = _require.env;\n\nvar checkTypes = \"development\" !== \"production\";\n// Sanctuary provides awesome errors in development versus e.g. Ramda\nvar S = exports.S = Sanctuary.create({\n  checkTypes: checkTypes,\n  env: Sanctuary.env.concat(flutureEnv)\n});\n\nvar API_ROOT = \"https://dog.ceo/api\";\nvar BREED_LIST_URL = API_ROOT + \"/breeds/list\";\nvar getImagesUrlFor = function getImagesUrlFor(breed) {\n  return API_ROOT + \"/breed/\" + breed + \"/images\";\n};\n\n// wrap promise library so it returns a future\nvar fuFetch = F.encaseP2(fetch);\n\nvar headers = {\n  Accept: \"application/json\"\n};\nvar get = function get(url) {\n  return fuFetch(url, { headers: headers });\n};\n\nvar groupByFirstLetter = S.groupBy(function (x) {\n  return function (y) {\n    return S.equals(S.head(x))(S.head(y));\n  };\n});\n\n// [['alf', 'argh'],['bee', 'boo']] -> ['a', 'b']\nvar getEachFirstLetter = S.mapMaybe(S.pipe([S.mapMaybe(S.head), S.head]));\n\nvar rand = function rand(items) {\n  return items[~~(items.length * Math.random())];\n};\n\n// chain and map are like .next with a promise\n// map is to transform the data f -> Future(f(d))\n// chain allows you to, e.g. map to a new Future or another type, flattening the resulting nested Types\n\nvar getBreeds = exports.getBreeds = get(BREED_LIST_URL).chain(function (res) {\n  return F.tryP(function () {\n    return res.json();\n  });\n}).map(S.prop(\"message\"))\n//index our breeds by first letters - we trust already they come from the api alphabetized\n.map(groupByFirstLetter)\n//we need a list of the letters for our nav\n.map(function (breeds) {\n  return { breeds: breeds, letters: getEachFirstLetter(breeds) };\n});\n\nvar getImages = exports.getImages = function getImages(breed) {\n  return get(getImagesUrlFor(breed)).chain(function (res) {\n    return F.tryP(function () {\n      return res.json();\n    });\n  })\n  // we need to decide how we deal with api errors--we can short circuit into the reject branch with F.reject\n  // but in this case we prefer just to ignore unsuccessful requests and display nothing by returning an empty array\n  // use chain not map because we return a new Future -- with map we would end up with [Future(message), Future(message)]\n  .chain(function (res) {\n    return res.status !== \"success\" ? F.of({ message: [] }) : F.of(res);\n  }).map(S.prop(\"message\"));\n};\n\nvar getImagesConcurrently = exports.getImagesConcurrently = function getImagesConcurrently(breeds) {\n  return (\n    // lets debounce so the Future the requests doesn't start as the user clicks through the letters\n    F.after(500, null).chain(function (_) {\n      return (\n        //The first argument is how many of the Futures you want to be concurrent\n        F.parallel(Infinity, breeds.map(function (b) {\n          return getImages(b);\n        }))\n        //instead of loading hundreds of pics, we will just take one random example for each breed\n        .map(S.ap([rand]))\n        // rand will return undefined for empty arrays, so we need to filter these out in case we got an error up the chain in getImages\n        .map(S.filter(function (v) {\n          return !!v;\n        }))\n      );\n    })\n  );\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvYXBpLmpzP2UxZDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRiBmcm9tIFwiZmx1dHVyZVwiO1xuaW1wb3J0ICogYXMgU2FuY3R1YXJ5IGZyb20gXCJzYW5jdHVhcnlcIjtcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSBcIi5cIjtcbmltcG9ydCBhY3Rpb25zIGZyb20gXCIuL2FjdGlvbnNcIjtcbmNvbnN0IHsgZW52OiBmbHV0dXJlRW52IH0gPSByZXF1aXJlKFwiZmx1dHVyZS1zYW5jdHVhcnktdHlwZXNcIik7XG5jb25zdCBjaGVja1R5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiO1xuLy8gU2FuY3R1YXJ5IHByb3ZpZGVzIGF3ZXNvbWUgZXJyb3JzIGluIGRldmVsb3BtZW50IHZlcnN1cyBlLmcuIFJhbWRhXG5leHBvcnQgY29uc3QgUyA9IFNhbmN0dWFyeS5jcmVhdGUoe1xuICBjaGVja1R5cGVzLFxuICBlbnY6IFNhbmN0dWFyeS5lbnYuY29uY2F0KGZsdXR1cmVFbnYpXG59KTtcblxuY29uc3QgQVBJX1JPT1QgPSBcImh0dHBzOi8vZG9nLmNlby9hcGlcIjtcbmNvbnN0IEJSRUVEX0xJU1RfVVJMID0gYCR7QVBJX1JPT1R9L2JyZWVkcy9saXN0YDtcbmNvbnN0IGdldEltYWdlc1VybEZvciA9IGJyZWVkID0+IGAke0FQSV9ST09UfS9icmVlZC8ke2JyZWVkfS9pbWFnZXNgO1xuXG4vLyB3cmFwIHByb21pc2UgbGlicmFyeSBzbyBpdCByZXR1cm5zIGEgZnV0dXJlXG5jb25zdCBmdUZldGNoID0gRi5lbmNhc2VQMihmZXRjaCk7XG5cbmNvbnN0IGhlYWRlcnMgPSB7XG4gIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCJcbn07XG5jb25zdCBnZXQgPSB1cmwgPT4gZnVGZXRjaCh1cmwsIHsgaGVhZGVycyB9KTtcblxuY29uc3QgZ3JvdXBCeUZpcnN0TGV0dGVyID0gUy5ncm91cEJ5KHggPT4geSA9PiBTLmVxdWFscyhTLmhlYWQoeCkpKFMuaGVhZCh5KSkpO1xuXG4vLyBbWydhbGYnLCAnYXJnaCddLFsnYmVlJywgJ2JvbyddXSAtPiBbJ2EnLCAnYiddXG5jb25zdCBnZXRFYWNoRmlyc3RMZXR0ZXIgPSBTLm1hcE1heWJlKFMucGlwZShbUy5tYXBNYXliZShTLmhlYWQpLCBTLmhlYWRdKSk7XG5cbmNvbnN0IHJhbmQgPSBpdGVtcyA9PiB7XG4gIHJldHVybiBpdGVtc1t+fihpdGVtcy5sZW5ndGggKiBNYXRoLnJhbmRvbSgpKV07XG59O1xuXG4vLyBjaGFpbiBhbmQgbWFwIGFyZSBsaWtlIC5uZXh0IHdpdGggYSBwcm9taXNlXG4vLyBtYXAgaXMgdG8gdHJhbnNmb3JtIHRoZSBkYXRhIGYgLT4gRnV0dXJlKGYoZCkpXG4vLyBjaGFpbiBhbGxvd3MgeW91IHRvLCBlLmcuIG1hcCB0byBhIG5ldyBGdXR1cmUgb3IgYW5vdGhlciB0eXBlLCBmbGF0dGVuaW5nIHRoZSByZXN1bHRpbmcgbmVzdGVkIFR5cGVzXG5cbmV4cG9ydCBjb25zdCBnZXRCcmVlZHMgPSBnZXQoQlJFRURfTElTVF9VUkwpXG4gIC5jaGFpbihyZXMgPT4gRi50cnlQKCgpID0+IHJlcy5qc29uKCkpKVxuICAubWFwKFMucHJvcChcIm1lc3NhZ2VcIikpXG4gIC8vaW5kZXggb3VyIGJyZWVkcyBieSBmaXJzdCBsZXR0ZXJzIC0gd2UgdHJ1c3QgYWxyZWFkeSB0aGV5IGNvbWUgZnJvbSB0aGUgYXBpIGFscGhhYmV0aXplZFxuICAubWFwKGdyb3VwQnlGaXJzdExldHRlcilcbiAgLy93ZSBuZWVkIGEgbGlzdCBvZiB0aGUgbGV0dGVycyBmb3Igb3VyIG5hdlxuICAubWFwKGJyZWVkcyA9PiAoeyBicmVlZHMsIGxldHRlcnM6IGdldEVhY2hGaXJzdExldHRlcihicmVlZHMpIH0pKTtcblxuZXhwb3J0IGNvbnN0IGdldEltYWdlcyA9IGJyZWVkID0+XG4gIGdldChnZXRJbWFnZXNVcmxGb3IoYnJlZWQpKVxuICAgIC5jaGFpbihyZXMgPT4gRi50cnlQKCgpID0+IHJlcy5qc29uKCkpKVxuICAgIC8vIHdlIG5lZWQgdG8gZGVjaWRlIGhvdyB3ZSBkZWFsIHdpdGggYXBpIGVycm9ycy0td2UgY2FuIHNob3J0IGNpcmN1aXQgaW50byB0aGUgcmVqZWN0IGJyYW5jaCB3aXRoIEYucmVqZWN0XG4gICAgLy8gYnV0IGluIHRoaXMgY2FzZSB3ZSBwcmVmZXIganVzdCB0byBpZ25vcmUgdW5zdWNjZXNzZnVsIHJlcXVlc3RzIGFuZCBkaXNwbGF5IG5vdGhpbmcgYnkgcmV0dXJuaW5nIGFuIGVtcHR5IGFycmF5XG4gICAgLy8gdXNlIGNoYWluIG5vdCBtYXAgYmVjYXVzZSB3ZSByZXR1cm4gYSBuZXcgRnV0dXJlIC0tIHdpdGggbWFwIHdlIHdvdWxkIGVuZCB1cCB3aXRoIFtGdXR1cmUobWVzc2FnZSksIEZ1dHVyZShtZXNzYWdlKV1cbiAgICAuY2hhaW4oXG4gICAgICByZXMgPT4gKHJlcy5zdGF0dXMgIT09IFwic3VjY2Vzc1wiID8gRi5vZih7IG1lc3NhZ2U6IFtdIH0pIDogRi5vZihyZXMpKVxuICAgIClcbiAgICAubWFwKFMucHJvcChcIm1lc3NhZ2VcIikpO1xuXG5leHBvcnQgY29uc3QgZ2V0SW1hZ2VzQ29uY3VycmVudGx5ID0gYnJlZWRzID0+XG4gIC8vIGxldHMgZGVib3VuY2Ugc28gdGhlIEZ1dHVyZSB0aGUgcmVxdWVzdHMgZG9lc24ndCBzdGFydCBhcyB0aGUgdXNlciBjbGlja3MgdGhyb3VnaCB0aGUgbGV0dGVyc1xuICBGLmFmdGVyKDUwMCwgbnVsbCkuY2hhaW4oXyA9PlxuICAgIC8vVGhlIGZpcnN0IGFyZ3VtZW50IGlzIGhvdyBtYW55IG9mIHRoZSBGdXR1cmVzIHlvdSB3YW50IHRvIGJlIGNvbmN1cnJlbnRcbiAgICBGLnBhcmFsbGVsKEluZmluaXR5LCBicmVlZHMubWFwKGIgPT4gZ2V0SW1hZ2VzKGIpKSlcbiAgICAgIC8vaW5zdGVhZCBvZiBsb2FkaW5nIGh1bmRyZWRzIG9mIHBpY3MsIHdlIHdpbGwganVzdCB0YWtlIG9uZSByYW5kb20gZXhhbXBsZSBmb3IgZWFjaCBicmVlZFxuICAgICAgLm1hcChTLmFwKFtyYW5kXSkpXG4gICAgICAvLyByYW5kIHdpbGwgcmV0dXJuIHVuZGVmaW5lZCBmb3IgZW1wdHkgYXJyYXlzLCBzbyB3ZSBuZWVkIHRvIGZpbHRlciB0aGVzZSBvdXQgaW4gY2FzZSB3ZSBnb3QgYW4gZXJyb3IgdXAgdGhlIGNoYWluIGluIGdldEltYWdlc1xuICAgICAgLm1hcChTLmZpbHRlcih2ID0+ICEhdikpXG4gICk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2FwaS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTs7Ozs7OztBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBSEE7QUFLQTtBQUxBO0FBTUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUFBO0FBUEE7QUFDQTtBQVVBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFHQTtBQUhBO0FBSUE7QUFBQTtBQU5BO0FBQUE7QUFGQTtBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {\n\t true ? module.exports = factory(__webpack_require__(11), __webpack_require__(26), __webpack_require__(1), __webpack_require__(27), __webpack_require__(28)) :\n\ttypeof define === 'function' && define.amd ? define(['sanctuary-type-classes', 'inspect-f', 'sanctuary-type-identifiers', 'concurrify', 'denque'], factory) :\n\t(global.Fluture = factory(global.sanctuaryTypeClasses,global.inspectf,global.sanctuaryTypeIdentifiers,global.concurrify,global.Denque));\n}(this, (function (Z,inspectf,type,concurrify,Denque) { 'use strict';\n\nZ = Z && Z.hasOwnProperty('default') ? Z['default'] : Z;\ninspectf = inspectf && inspectf.hasOwnProperty('default') ? inspectf['default'] : inspectf;\ntype = type && type.hasOwnProperty('default') ? type['default'] : type;\nconcurrify = concurrify && concurrify.hasOwnProperty('default') ? concurrify['default'] : concurrify;\nDenque = Denque && Denque.hasOwnProperty('default') ? Denque['default'] : Denque;\n\n/* istanbul ignore file: environment-specific */\n\n/* eslint-disable no-undef */\nconst scope = typeof self === 'object' ? self :\n                     typeof global === 'object' ? global :\n                     typeof window === 'object' ? window :\n                     {};\n/* eslint-enable no-undef */\n\nconst setImmediate = typeof scope.setImmediate === 'function' ?\n                            scope.setImmediate :\n                            function setImmediate(f, x){ return setTimeout(f, 0, x) };\n\nfunction noop(){}\nfunction moop(){ return this }\nvar show = Z.toString;\nfunction padf(sf, s){ return s.replace(/^/gm, sf).replace(sf, '') }\nfunction showf(f){ return padf('  ', inspectf(2, f)) }\n\nfunction mapArray(xs, f){\n  var l = xs.length, ys = new Array(l);\n  for(var i = 0; i < l; i++) ys[i] = f(xs[i], i, xs);\n  return ys;\n}\n\nfunction partial1(f, a){\n  return function bound1(b, c, d){\n    switch(arguments.length){\n      case 1: return f(a, b);\n      case 2: return f(a, b, c);\n      default: return f(a, b, c, d);\n    }\n  };\n}\n\nfunction partial2(f, a, b){\n  return function bound2(c, d){\n    return arguments.length === 1 ? f(a, b, c) : f(a, b, c, d);\n  };\n}\n\nfunction partial3(f, a, b, c){\n  return function bound3(d){\n    return f(a, b, c, d);\n  };\n}\n\nfunction immediately(f){\n  return function immediate(x){ return setImmediate(f, x) };\n}\n\nvar FL = {\n  map: 'fantasy-land/map',\n  bimap: 'fantasy-land/bimap',\n  chain: 'fantasy-land/chain',\n  chainRec: 'fantasy-land/chainRec',\n  ap: 'fantasy-land/ap',\n  of: 'fantasy-land/of',\n  zero: 'fantasy-land/zero'\n};\n\nvar ordinal = ['first', 'second', 'third', 'fourth', 'fifth'];\n\nvar namespace = 'fluture';\nvar name = 'Future';\nvar version = 3;\n\nvar $$type = namespace + '/' + name + '@' + version;\n\nfunction error(message){\n  throw new Error(message);\n}\n\nfunction typeError(message){\n  throw new TypeError(message);\n}\n\nfunction invalidArgument(it, at, expected, actual){\n  typeError(\n    it + ' expects its ' + ordinal[at] + ' argument to ' + expected + '\\n  Actual: ' + show(actual)\n  );\n}\n\nfunction invalidContext(it, actual){\n  typeError(\n    it + ' was invoked outside the context of a Future. You might want to use'\n  + ' a dispatcher instead\\n  Called on: ' + (show(actual))\n  );\n}\n\nfunction invalidNamespace(m, x){\n  return (\n    'The Future was not created by ' + namespace + '. '\n  + 'Make sure you transform other Futures to ' + namespace + ' Futures. '\n  + 'Got ' + (x ? ('a Future from ' + x) : 'an unscoped Future') + '.'\n  + '\\n  See: https://github.com/fluture-js/Fluture#casting-futures'\n  );\n}\n\nfunction invalidVersion(m, x){\n  return (\n    'The Future was created by ' + (x < version ? 'an older' : 'a newer')\n  + ' version of ' + namespace + '. '\n  + 'This means that one of the sources which creates Futures is outdated. '\n  + 'Update this source, or transform its created Futures to be compatible.'\n  + '\\n  See: https://github.com/fluture-js/Fluture#casting-futures'\n  );\n}\n\nfunction invalidFuture(it, at, m, s){\n  var id = type.parse(type(m));\n  var info = id.name === name ? '\\n' + (\n    id.namespace !== namespace ? invalidNamespace(m, id.namespace)\n  : id.version !== version ? invalidVersion(m, id.version)\n  : 'Nothing seems wrong. Contact the Fluture maintainers.') : '';\n  typeError(\n    it + ' expects ' + (ordinal[at] ? 'its ' + ordinal[at] + ' argument to be a valid Future' : at)\n  + '.' + info + '\\n  Actual: ' + (show(m)) + ' :: ' + (id.name) + (s || '')\n  );\n}\n\nfunction isFunction(f){\n  return typeof f === 'function';\n}\n\nfunction isThenable(m){\n  return m instanceof Promise || Boolean(m) && isFunction(m.then);\n}\n\nfunction isBoolean(f){\n  return typeof f === 'boolean';\n}\n\nfunction isNumber(f){\n  return typeof f === 'number';\n}\n\nfunction isUnsigned(n){\n  return (n === Infinity || isNumber(n) && n > 0 && n % 1 === 0);\n}\n\nfunction isObject(o){\n  return o !== null && typeof o === 'object';\n}\n\nfunction isIterator(i){\n  return isObject(i) && isFunction(i.next);\n}\n\nfunction isArray(x){\n  return Array.isArray(x);\n}\n\n/*eslint no-cond-assign:0, no-constant-condition:0 */\n\nfunction interpreter(rej, res){\n\n  //This is the primary queue of actions. All actions in here will be \"cold\",\n  //meaning they haven't had the chance yet to run concurrent computations.\n  var cold = new Denque(this._actions.size);\n\n  //This is the secondary queue of actions. All actions in here will be \"hot\",\n  //meaning they have already had a chance to run a concurrent computation.\n  var queue = new Denque(this._actions.size);\n\n  //These combined variables define our current state.\n  // future  = the future we are currently forking\n  // action  = the action to be informed when the future settles\n  // cancel  = the cancel function of the current future\n  // settled = a boolean indicating whether a new tick should start\n  // async   = a boolean indicating whether we are awaiting a result asynchronously\n  var future, action, cancel = noop, settled, async = true, it;\n\n  //This function is called with a future to use in the next tick.\n  //Here we \"flatten\" the actions of another Sequence into our own actions,\n  //this is the magic that allows for infinitely stack safe recursion because\n  //actions like ChainAction will return a new Sequence.\n  //If we settled asynchronously, we call drain() directly to run the next tick.\n  function settle(m){\n    settled = true;\n    future = m;\n\n    if(future._spawn){\n      var tail = future._actions;\n\n      while(!tail.isEmpty){\n        cold.unshift(tail.head);\n        tail = tail.tail;\n      }\n\n      future = future._spawn;\n    }\n\n    if(async) drain();\n  }\n\n  //This function serves as a rejection handler for our current future.\n  //It will tell the current action that the future rejected, and it will\n  //settle the current tick with the action's answer to that.\n  function rejected(x){\n    settle(action.rejected(x));\n  }\n\n  //This function serves as a resolution handler for our current future.\n  //It will tell the current action that the future resolved, and it will\n  //settle the current tick with the action's answer to that.\n  function resolved(x){\n    settle(action.resolved(x));\n  }\n\n  //This function is passed into actions when they are \"warmed up\".\n  //If the action decides that it has its result, without the need to await\n  //anything else, then it can call this function to force \"early termination\".\n  //When early termination occurs, all actions which were queued prior to the\n  //terminator will be skipped. If they were already hot, they will also receive\n  //a cancel signal so they can cancel their own concurrent computations, as\n  //their results are no longer needed.\n  function early(m, terminator){\n    cancel();\n    cold.clear();\n\n    if(async && action !== terminator){\n      action.cancel();\n      while((it = queue.shift()) && it !== terminator) it.cancel();\n    }\n\n    settle(m);\n  }\n\n  //This function serves to kickstart concurrent computations.\n  //Takes all actions from the cold queue *back-to-front*, and calls run() on\n  //each of them, passing them the \"early\" function. If any of them settles (by\n  //calling early()), we abort. After warming up all actions in the cold queue,\n  //we warm up the current action as well.\n  function warmupActions(){\n    while(it = cold.pop()){\n      it = it.run(early);\n      if(settled) return;\n      queue.unshift(it);\n    }\n\n    action = action.run(early);\n  }\n\n  //This function represents our main execution loop.\n  //When we refer to a \"tick\", we mean the execution of the body inside the\n  //primary while-loop of this function.\n  //Every tick follows the following algorithm:\n  // 1. We try to take an action from the cold queue, if we fail, go to step 2.\n  //      1a. We fork the future.\n  //      1b. We warmupActions() if the we haven't settled yet.\n  // 2. We try to take an action from the hot queue, if we fail, go to step 3.\n  //      2a. We fork the Future, if settles, we continue to the next tick.\n  // 3. If we couldn't take actions from either queues, we fork the Future into\n  //    the user provided continuations. This is the end of the interpretation.\n  // 4. If we did take an action from one of queues, but none of the steps\n  //    caused a settle(), it means we are asynchronously waiting for something\n  //    to settle and start the next tick, so we return from the function.\n  function drain(){\n    async = false;\n\n    while(true){\n      settled = false;\n      if(action = cold.shift()){\n        cancel = future._fork(rejected, resolved);\n        if(!settled) warmupActions();\n      }else if(action = queue.shift()){\n        cancel = future._fork(rejected, resolved);\n      }else break;\n      if(settled) continue;\n      async = true;\n      return;\n    }\n\n    cancel = future._fork(rej, res);\n  }\n\n  //Start the execution loop.\n  settle(this);\n\n  //Return a cancellation function. It will cancel the current Future, the\n  //current action, and all queued hot actions.\n  return function Sequence$cancel(){\n    cancel();\n    action && action.cancel();\n    while(it = queue.shift()) it.cancel();\n  };\n\n}\n\nvar empty = ({isEmpty: true, size: 0, head: null, tail: null});\n\nfunction cons(head, tail){\n  return {isEmpty: false, size: tail.size + 1, head: head, tail: tail};\n}\n\nfunction throwRejection(x){\n  error('Future#value was called on a rejected Future\\n  Actual: Future.reject(' + show(x) + ')');\n}\n\nfunction Future(computation){\n  if(!isFunction(computation)) invalidArgument('Future', 0, 'be a Function', computation);\n  return new Computation(computation);\n}\n\nfunction isFuture(x){\n  return x instanceof Future || type(x) === $$type;\n}\n\nFuture['@@type'] = $$type;\n\nFuture.prototype[FL.ap] = function Future$FL$ap(other){\n  return other._ap(this);\n};\n\nFuture.prototype[FL.map] = function Future$FL$map(mapper){\n  return this._map(mapper);\n};\n\nFuture.prototype[FL.bimap] = function Future$FL$bimap(lmapper, rmapper){\n  return this._bimap(lmapper, rmapper);\n};\n\nFuture.prototype[FL.chain] = function Future$FL$chain(mapper){\n  return this._chain(mapper);\n};\n\nFuture.prototype.ap = function Future$ap(other){\n  if(!isFuture(this)) invalidContext('Future#ap', this);\n  if(!isFuture(other)) invalidFuture('Future#ap', 0, other);\n  return this._ap(other);\n};\n\nFuture.prototype.map = function Future$map(mapper){\n  if(!isFuture(this)) invalidContext('Future#map', this);\n  if(!isFunction(mapper)) invalidArgument('Future#map', 0, 'to be a Function', mapper);\n  return this._map(mapper);\n};\n\nFuture.prototype.bimap = function Future$bimap(lmapper, rmapper){\n  if(!isFuture(this)) invalidContext('Future#bimap', this);\n  if(!isFunction(lmapper)) invalidArgument('Future#bimap', 0, 'to be a Function', lmapper);\n  if(!isFunction(rmapper)) invalidArgument('Future#bimap', 1, 'to be a Function', rmapper);\n  return this._bimap(lmapper, rmapper);\n};\n\nFuture.prototype.chain = function Future$chain(mapper){\n  if(!isFuture(this)) invalidContext('Future#chain', this);\n  if(!isFunction(mapper)) invalidArgument('Future#chain', 0, 'to be a Function', mapper);\n  return this._chain(mapper);\n};\n\nFuture.prototype.mapRej = function Future$mapRej(mapper){\n  if(!isFuture(this)) invalidContext('Future#mapRej', this);\n  if(!isFunction(mapper)) invalidArgument('Future#mapRej', 0, 'to be a Function', mapper);\n  return this._mapRej(mapper);\n};\n\nFuture.prototype.chainRej = function Future$chainRej(mapper){\n  if(!isFuture(this)) invalidContext('Future#chainRej', this);\n  if(!isFunction(mapper)) invalidArgument('Future#chainRej', 0, 'to be a Function', mapper);\n  return this._chainRej(mapper);\n};\n\nFuture.prototype.race = function Future$race(other){\n  if(!isFuture(this)) invalidContext('Future#race', this);\n  if(!isFuture(other)) invalidFuture('Future#race', 0, other);\n  return this._race(other);\n};\n\nFuture.prototype.both = function Future$both(other){\n  if(!isFuture(this)) invalidContext('Future#both', this);\n  if(!isFuture(other)) invalidFuture('Future#both', 0, other);\n  return this._both(other);\n};\n\nFuture.prototype.and = function Future$and(other){\n  if(!isFuture(this)) invalidContext('Future#and', this);\n  if(!isFuture(other)) invalidFuture('Future#and', 0, other);\n  return this._and(other);\n};\n\nFuture.prototype.or = function Future$or(other){\n  if(!isFuture(this)) invalidContext('Future#or', this);\n  if(!isFuture(other)) invalidFuture('Future#or', 0, other);\n  return this._or(other);\n};\n\nFuture.prototype.swap = function Future$swap(){\n  if(!isFuture(this)) invalidContext('Future#ap', this);\n  return this._swap();\n};\n\nFuture.prototype.fold = function Future$fold(lmapper, rmapper){\n  if(!isFuture(this)) invalidContext('Future#ap', this);\n  if(!isFunction(lmapper)) invalidArgument('Future#fold', 0, 'to be a Function', lmapper);\n  if(!isFunction(rmapper)) invalidArgument('Future#fold', 1, 'to be a Function', rmapper);\n  return this._fold(lmapper, rmapper);\n};\n\nFuture.prototype.finally = function Future$finally(other){\n  if(!isFuture(this)) invalidContext('Future#finally', this);\n  if(!isFuture(other)) invalidFuture('Future#finally', 0, other);\n  return this._finally(other);\n};\n\nFuture.prototype.lastly = function Future$lastly(other){\n  if(!isFuture(this)) invalidContext('Future#lastly', this);\n  if(!isFuture(other)) invalidFuture('Future#lastly', 0, other);\n  return this._finally(other);\n};\n\nFuture.prototype.fork = function Future$fork(rej, res){\n  if(!isFuture(this)) invalidContext('Future#fork', this);\n  if(!isFunction(rej)) invalidArgument('Future#fork', 0, 'to be a Function', rej);\n  if(!isFunction(res)) invalidArgument('Future#fork', 0, 'to be a Function', res);\n  return this._fork(rej, res);\n};\n\nFuture.prototype.value = function Future$value(res){\n  if(!isFuture(this)) invalidContext('Future#value', this);\n  if(!isFunction(res)) invalidArgument('Future#value', 0, 'to be a Function', res);\n  return this._fork(throwRejection, res);\n};\n\nFuture.prototype.done = function Future$done(callback){\n  if(!isFuture(this)) invalidContext('Future#done', this);\n  if(!isFunction(callback)) invalidArgument('Future#done', 0, 'to be a Function', callback);\n  return this._fork(function Future$done$rej(x){ callback(x); },\n                    function Future$done$res(x){ callback(null, x); });\n};\n\nFuture.prototype.promise = function Future$promise(){\n  var _this = this;\n  return new Promise(function Future$promise$computation(res, rej){\n    _this._fork(rej, res);\n  });\n};\n\nFuture.prototype.isRejected = function Future$isRejected(){\n  return false;\n};\n\nFuture.prototype.isResolved = function Future$isResolved(){\n  return false;\n};\n\nFuture.prototype.isSettled = function Future$isSettled(){\n  return this.isRejected() || this.isResolved();\n};\n\nFuture.prototype.extractLeft = function Future$extractLeft(){\n  return [];\n};\n\nFuture.prototype.extractRight = function Future$extractRight(){\n  return [];\n};\n\nvar Core = Object.create(Future.prototype);\n\nCore._ap = function Core$ap(other){\n  return new Sequence(this)._ap(other);\n};\n\nCore._map = function Core$map(mapper){\n  return new Sequence(this)._map(mapper);\n};\n\nCore._bimap = function Core$bimap(lmapper, rmapper){\n  return new Sequence(this)._bimap(lmapper, rmapper);\n};\n\nCore._chain = function Core$chain(mapper){\n  return new Sequence(this)._chain(mapper);\n};\n\nCore._mapRej = function Core$mapRej(mapper){\n  return new Sequence(this)._mapRej(mapper);\n};\n\nCore._chainRej = function Core$chainRej(mapper){\n  return new Sequence(this)._chainRej(mapper);\n};\n\nCore._race = function Core$race(other){\n  return new Sequence(this)._race(other);\n};\n\nCore._both = function Core$both(other){\n  return new Sequence(this)._both(other);\n};\n\nCore._and = function Core$and(other){\n  return new Sequence(this)._and(other);\n};\n\nCore._or = function Core$or(other){\n  return new Sequence(this)._or(other);\n};\n\nCore._swap = function Core$swap(){\n  return new Sequence(this)._swap();\n};\n\nCore._fold = function Core$fold(lmapper, rmapper){\n  return new Sequence(this)._fold(lmapper, rmapper);\n};\n\nCore._finally = function Core$finally(other){\n  return new Sequence(this)._finally(other);\n};\n\nfunction check$fork(f, c){\n  if(!(f === undefined || (isFunction(f) && f.length === 0))) typeError(\n    'Future expected its computation to return a nullary function or void'\n    + '\\n  Actual: ' + show(f) + '\\n  From calling: ' + showf(c)\n  );\n}\n\nfunction Computation(computation){\n  this._computation = computation;\n}\n\nComputation.prototype = Object.create(Core);\n\nComputation.prototype._fork = function Computation$_fork(rej, res){\n  var open = true;\n  var f = this._computation(function Computation$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }, function Computation$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  });\n  check$fork(f, this._computation);\n\n  return function Computation$cancel(){\n    open && f && f();\n    open = false;\n  };\n};\n\nComputation.prototype.toString = function Computation$toString(){\n  return 'Future(' + showf(this._computation) + ')';\n};\n\nfunction Rejected(value){\n  this._value = value;\n}\n\nRejected.prototype = Object.create(Core);\n\nRejected.prototype._ap = moop;\nRejected.prototype._map = moop;\nRejected.prototype._chain = moop;\nRejected.prototype._race = moop;\nRejected.prototype._both = moop;\nRejected.prototype._and = moop;\n\nRejected.prototype._or = function Rejected$or(other){\n  return other;\n};\n\nRejected.prototype._finally = function Rejected$finally(other){\n  return other._and(this);\n};\n\nRejected.prototype._swap = function Rejected$swap(){\n  return new Resolved(this._value);\n};\n\nRejected.prototype._fork = function Rejected$_fork(rej){\n  rej(this._value);\n  return noop;\n};\n\nRejected.prototype.isRejected = function Rejected$isRejected(){\n  return true;\n};\n\nRejected.prototype.extractLeft = function Rejected$extractLeft(){\n  return [this._value];\n};\n\nRejected.prototype.toString = function Rejected$toString(){\n  return 'Future.reject(' + show(this._value) + ')';\n};\n\nfunction reject(x){\n  return new Rejected(x);\n}\n\nfunction Resolved(value){\n  this._value = value;\n}\n\nResolved.prototype = Object.create(Core);\n\nResolved.prototype._race = moop;\nResolved.prototype._mapRej = moop;\nResolved.prototype._or = moop;\n\nResolved.prototype._and = function Resolved$and(other){\n  return other;\n};\n\nResolved.prototype._both = function Resolved$both(other){\n  var left = this._value;\n  return other._map(function Resolved$both$mapper(right){\n    return [left, right];\n  });\n};\n\nResolved.prototype._swap = function Resolved$swap(){\n  return new Rejected(this._value);\n};\n\nResolved.prototype._finally = function Resolved$finally(other){\n  var value = this._value;\n  return other._map(function Resolved$finally$mapper(){\n    return value;\n  });\n};\n\nResolved.prototype._fork = function _fork(rej, res){\n  res(this._value);\n  return noop;\n};\n\nResolved.prototype.isResolved = function Resolved$isResolved(){\n  return true;\n};\n\nResolved.prototype.extractRight = function Resolved$extractRight(){\n  return [this._value];\n};\n\nResolved.prototype.toString = function Resolved$toString(){\n  return 'Future.of(' + show(this._value) + ')';\n};\n\nfunction of(x){\n  return new Resolved(x);\n}\n\nfunction Never(){\n  this._isNever = true;\n}\n\nNever.prototype = Object.create(Future.prototype);\n\nNever.prototype._ap = moop;\nNever.prototype._map = moop;\nNever.prototype._bimap = moop;\nNever.prototype._chain = moop;\nNever.prototype._mapRej = moop;\nNever.prototype._chainRej = moop;\nNever.prototype._both = moop;\nNever.prototype._or = moop;\nNever.prototype._swap = moop;\nNever.prototype._fold = moop;\nNever.prototype._finally = moop;\n\nNever.prototype._race = function Never$race(other){\n  return other;\n};\n\nNever.prototype._fork = function Never$_fork(){\n  return noop;\n};\n\nNever.prototype.toString = function Never$toString(){\n  return 'Future.never';\n};\n\nvar never = new Never();\n\nfunction isNever(x){\n  return isFuture(x) && x._isNever === true;\n}\n\nfunction Eager(future){\n  var _this = this;\n  _this.rej = noop;\n  _this.res = noop;\n  _this.rejected = false;\n  _this.resolved = false;\n  _this.value = null;\n  _this.cancel = future._fork(function Eager$reject(x){\n    _this.value = x;\n    _this.rejected = true;\n    _this.cancel = noop;\n    _this.rej(x);\n  }, function Eager$resolve(x){\n    _this.value = x;\n    _this.resolved = true;\n    _this.cancel = noop;\n    _this.res(x);\n  });\n}\n\nEager.prototype = Object.create(Core);\n\nEager.prototype._fork = function Eager$_fork(rej, res){\n  if(this.rejected) rej(this.value);\n  else if(this.resolved) res(this.value);\n  else{\n    this.rej = rej;\n    this.res = res;\n  }\n  return this.cancel;\n};\n\nfunction check$ap(f){\n  return isFunction(f) ? f : typeError(\n    'Future#ap expects its first argument to be a Future of a Function'\n    + '\\n  Actual: Future.of(' + show(f) + ')'\n  );\n}\n\nfunction check$chain(m, f, x){\n  return isFuture(m) ? m : invalidFuture(\n    'Future#chain',\n    'the function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nfunction check$chainRej(m, f, x){\n  return isFuture(m) ? m : invalidFuture(\n    'Future#chainRej',\n    'the function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nvar Action = {\n  rejected: function Action$rejected(x){ this.cancel(); return new Rejected(x) },\n  resolved: function Action$resolved(x){ this.cancel(); return new Resolved(x) },\n  run: function Action$run(){ return this },\n  cancel: function Action$cancel(){}\n};\n\nfunction ApAction(other){ this.other = other; }\nApAction.prototype = Object.create(Action);\n\nApAction.prototype.resolved = function ApAction$resolved(f){\n  check$ap(f);\n  return this.other._map(function ApAction$resolved$mapper(x){ return f(x) });\n};\n\nApAction.prototype.toString = function ApAction$toString(){\n  return 'ap(' + this.other.toString() + ')';\n};\n\nfunction MapAction(mapper){ this.mapper = mapper; }\nMapAction.prototype = Object.create(Action);\n\nMapAction.prototype.resolved = function MapAction$resolved(x){\n  return new Resolved(this.mapper(x));\n};\n\nMapAction.prototype.toString = function MapAction$toString(){\n  return 'map(' + showf(this.mapper) + ')';\n};\n\nfunction BimapAction(lmapper, rmapper){ this.lmapper = lmapper; this.rmapper = rmapper; }\nBimapAction.prototype = Object.create(Action);\n\nBimapAction.prototype.rejected = function BimapAction$rejected(x){\n  return new Rejected(this.lmapper(x));\n};\n\nBimapAction.prototype.resolved = function BimapAction$resolved(x){\n  return new Resolved(this.rmapper(x));\n};\n\nBimapAction.prototype.toString = function BimapAction$toString(){\n  return 'bimap(' + showf(this.lmapper) + ', ' + showf(this.rmapper) + ')';\n};\n\nfunction ChainAction(mapper){ this.mapper = mapper; }\nChainAction.prototype = Object.create(Action);\n\nChainAction.prototype.resolved = function ChainAction$resolved(x){\n  return check$chain(this.mapper(x), this.mapper, x);\n};\n\nChainAction.prototype.toString = function ChainAction$toString(){\n  return 'chain(' + showf(this.mapper) + ')';\n};\n\nfunction MapRejAction(mapper){ this.mapper = mapper; }\nMapRejAction.prototype = Object.create(Action);\n\nMapRejAction.prototype.rejected = function MapRejAction$rejected(x){\n  return new Rejected(this.mapper(x));\n};\n\nMapRejAction.prototype.toString = function MapRejAction$toString(){\n  return 'mapRej(' + showf(this.mapper) + ')';\n};\n\nfunction ChainRejAction(mapper){ this.mapper = mapper; }\nChainRejAction.prototype = Object.create(Action);\n\nChainRejAction.prototype.rejected = function ChainRejAction$rejected(x){\n  return check$chainRej(this.mapper(x), this.mapper, x);\n};\n\nChainRejAction.prototype.toString = function ChainRejAction$toString(){\n  return 'chainRej(' + showf(this.mapper) + ')';\n};\n\nfunction SwapAction(){}\nSwapAction.prototype = Object.create(Action);\n\nSwapAction.prototype.rejected = function SwapAction$rejected(x){\n  return new Resolved(x);\n};\n\nSwapAction.prototype.resolved = function SwapAction$resolved(x){\n  return new Rejected(x);\n};\n\nSwapAction.prototype.toString = function SwapAction$toString(){\n  return 'swap()';\n};\n\nfunction FoldAction(lmapper, rmapper){ this.lmapper = lmapper; this.rmapper = rmapper; }\nFoldAction.prototype = Object.create(Action);\n\nFoldAction.prototype.rejected = function FoldAction$rejected(x){\n  return new Resolved(this.lmapper(x));\n};\n\nFoldAction.prototype.resolved = function FoldAction$resolved(x){\n  return new Resolved(this.rmapper(x));\n};\n\nFoldAction.prototype.toString = function FoldAction$toString(){\n  return 'fold(' + showf(this.lmapper) + ', ' + showf(this.rmapper) + ')';\n};\n\nfunction FinallyAction(other){ this.other = other; }\nFinallyAction.prototype = Object.create(Action);\n\nFinallyAction.prototype.rejected = function FinallyAction$rejected(x){\n  return this.other._and(new Rejected(x));\n};\n\nFinallyAction.prototype.resolved = function FinallyAction$resolved(x){\n  return this.other._map(function FoldAction$resolved$mapper(){ return x });\n};\n\nFinallyAction.prototype.cancel = function FinallyAction$cancel(){\n  this.other._fork(noop, noop)();\n};\n\nFinallyAction.prototype.toString = function FinallyAction$toString(){\n  return 'finally(' + this.other.toString() + ')';\n};\n\nfunction AndAction(other){ this.other = other; }\nAndAction.prototype = Object.create(Action);\n\nAndAction.prototype.resolved = function AndAction$resolved(){\n  return this.other;\n};\n\nAndAction.prototype.toString = function AndAction$toString(){\n  return 'and(' + this.other.toString() + ')';\n};\n\nfunction OrAction(other){ this.other = other; }\nOrAction.prototype = Object.create(Action);\n\nOrAction.prototype.rejected = function OrAction$rejected(){\n  return this.other;\n};\n\nOrAction.prototype.toString = function OrAction$toString(){\n  return 'or(' + this.other.toString() + ')';\n};\n\nfunction RaceAction(other){ this.other = other; }\nRaceAction.prototype = Object.create(Action);\n\nRaceAction.prototype.run = function RaceAction$run(early){\n  return new RaceActionState(early, new Eager(this.other));\n};\n\nRaceAction.prototype.toString = function RaceAction$toString(){\n  return 'race(' + this.other.toString() + ')';\n};\n\nfunction BothAction(other){ this.other = other; }\nBothAction.prototype = Object.create(Action);\n\nBothAction.prototype.resolved = function BothAction$resolved(x){\n  return this.other._map(function BothAction$resolved$mapper(y){ return [x, y] });\n};\n\nBothAction.prototype.run = function BothAction$run(early){\n  return new BothActionState(early, new Eager(this.other));\n};\n\nBothAction.prototype.toString = function BothAction$toString(){\n  return 'both(' + this.other.toString() + ')';\n};\n\nfunction RaceActionState(early, other){\n  var _this = this;\n  _this.other = other;\n  _this.cancel = other._fork(\n    function RaceActionState$rej(x){ early(new Rejected(x), _this); },\n    function RaceActionState$res(x){ early(new Resolved(x), _this); }\n  );\n}\n\nRaceActionState.prototype = Object.create(RaceAction.prototype);\n\nfunction BothActionState(early, other){\n  var _this = this;\n  _this.other = other;\n  _this.cancel = other._fork(\n    function BothActionState$rej(x){ early(new Rejected(x), _this); },\n    noop\n  );\n}\n\nBothActionState.prototype = Object.create(BothAction.prototype);\n\nfunction Sequence(spawn, actions){\n  this._spawn = spawn;\n  this._actions = actions || empty;\n}\n\nSequence.prototype = Object.create(Future.prototype);\n\nSequence.prototype._transform = function Sequence$_transform(action){\n  return new Sequence(this._spawn, cons(action, this._actions));\n};\n\nSequence.prototype._ap = function Sequence$ap(other){\n  return this._transform(new ApAction(other));\n};\n\nSequence.prototype._map = function Sequence$map(mapper){\n  return this._transform(new MapAction(mapper));\n};\n\nSequence.prototype._bimap = function Sequence$bimap(lmapper, rmapper){\n  return this._transform(new BimapAction(lmapper, rmapper));\n};\n\nSequence.prototype._chain = function Sequence$chain(mapper){\n  return this._transform(new ChainAction(mapper));\n};\n\nSequence.prototype._mapRej = function Sequence$mapRej(mapper){\n  return this._transform(new MapRejAction(mapper));\n};\n\nSequence.prototype._chainRej = function Sequence$chainRej(mapper){\n  return this._transform(new ChainRejAction(mapper));\n};\n\nSequence.prototype._race = function Sequence$race(other){\n  return isNever(other) ? this : this._transform(new RaceAction(other));\n};\n\nSequence.prototype._both = function Sequence$both(other){\n  return this._transform(new BothAction(other));\n};\n\nSequence.prototype._and = function Sequence$and(other){\n  return this._transform(new AndAction(other));\n};\n\nSequence.prototype._or = function Sequence$or(other){\n  return this._transform(new OrAction(other));\n};\n\nSequence.prototype._swap = function Sequence$swap(){\n  return this._transform(new SwapAction);\n};\n\nSequence.prototype._fold = function Sequence$fold(lmapper, rmapper){\n  return this._transform(new FoldAction(lmapper, rmapper));\n};\n\nSequence.prototype._finally = function Sequence$finally(other){\n  return this._transform(new FinallyAction(other));\n};\n\nSequence.prototype._fork = interpreter;\n\nSequence.prototype.toString = function Sequence$toString(){\n  var str = '', tail = this._actions;\n\n  while(!tail.isEmpty){\n    str = '.' + tail.head.toString() + str;\n    tail = tail.tail;\n  }\n\n  return this._spawn.toString() + str;\n};\n\nfunction Next(x){\n  return {done: false, value: x};\n}\n\nfunction Done(x){\n  return {done: true, value: x};\n}\n\nfunction isIteration(x){\n  return isObject(x) && isBoolean(x.done);\n}\n\nvar Undetermined = 0;\nvar Synchronous = 1;\nvar Asynchronous = 2;\n\nfunction ChainRec(step, init){\n  this._step = step;\n  this._init = init;\n}\n\nChainRec.prototype = Object.create(Core);\n\nChainRec.prototype._fork = function ChainRec$_fork(rej, res){\n\n  var _step = this._step;\n  var _init = this._init;\n  var timing = Undetermined, cancel = noop, state = Next(_init);\n\n  function resolved(it){\n    state = it;\n    timing = timing === Undetermined ? Synchronous : drain();\n  }\n\n  function drain(){\n    while(!state.done){\n      timing = Undetermined;\n      var m = _step(Next, Done, state.value);\n      cancel = m._fork(rej, resolved);\n\n      if(timing !== Synchronous){\n        timing = Asynchronous;\n        return;\n      }\n    }\n\n    res(state.value);\n  }\n\n  drain();\n\n  return function Future$chainRec$cancel(){ cancel(); };\n\n};\n\nChainRec.prototype.toString = function ChainRec$toString(){\n  return 'Future.chainRec(' + showf(this._step) + ', ' + show(this._init) + ')';\n};\n\nfunction chainRec(step, init){\n  return new ChainRec(step, init);\n}\n\nfunction ap$mval(mval, mfunc){\n  if(!Z.Apply.test(mfunc)) invalidArgument('Future.ap', 1, 'be an Apply', mfunc);\n  return Z.ap(mval, mfunc);\n}\n\nfunction ap(mval, mfunc){\n  if(!Z.Apply.test(mval)) invalidArgument('Future.ap', 0, 'be an Apply', mval);\n  if(arguments.length === 1) return partial1(ap$mval, mval);\n  return ap$mval(mval, mfunc);\n}\n\nfunction alt$left(left, right){\n  if(!Z.Alt.test(right)) invalidArgument('alt', 1, 'be an Alt', right);\n  return Z.alt(left, right);\n}\n\nfunction alt(left, right){\n  if(!Z.Alt.test(left)) invalidArgument('alt', 0, 'be an Alt', left);\n  if(arguments.length === 1) return partial1(alt$left, left);\n  return alt$left(left, right);\n}\n\nfunction map$mapper(mapper, m){\n  if(!Z.Functor.test(m)) invalidArgument('Future.map', 1, 'be a Functor', m);\n  return Z.map(mapper, m);\n}\n\nfunction map(mapper, m){\n  if(!isFunction(mapper)) invalidArgument('Future.map', 0, 'be a Function', mapper);\n  if(arguments.length === 1) return partial1(map$mapper, mapper);\n  return map$mapper(mapper, m);\n}\n\nfunction bimap$lmapper$rmapper(lmapper, rmapper, m){\n  if(!Z.Bifunctor.test(m)) invalidArgument('Future.bimap', 2, 'be a Bifunctor', m);\n  return Z.bimap(lmapper, rmapper, m);\n}\n\nfunction bimap$lmapper(lmapper, rmapper, m){\n  if(!isFunction(rmapper)) invalidArgument('Future.bimap', 1, 'be a Function', rmapper);\n  if(arguments.length === 2) return partial2(bimap$lmapper$rmapper, lmapper, rmapper);\n  return bimap$lmapper$rmapper(lmapper, rmapper, m);\n}\n\nfunction bimap(lmapper, rmapper, m){\n  if(!isFunction(lmapper)) invalidArgument('Future.bimap', 0, 'be a Function', lmapper);\n  if(arguments.length === 1) return partial1(bimap$lmapper, lmapper);\n  if(arguments.length === 2) return bimap$lmapper(lmapper, rmapper);\n  return bimap$lmapper(lmapper, rmapper, m);\n}\n\nfunction chain$chainer(chainer, m){\n  if(!Z.Chain.test(m)) invalidArgument('Future.chain', 1, 'be a Chain', m);\n  return Z.chain(chainer, m);\n}\n\nfunction chain(chainer, m){\n  if(!isFunction(chainer)) invalidArgument('Future.chain', 0, 'be a Function', chainer);\n  if(arguments.length === 1) return partial1(chain$chainer, chainer);\n  return chain$chainer(chainer, m);\n}\n\nfunction mapRej$mapper(mapper, m){\n  if(!isFuture(m)) invalidFuture('Future.mapRej', 1, m);\n  return m.mapRej(mapper);\n}\n\nfunction mapRej(mapper, m){\n  if(!isFunction(mapper)) invalidArgument('Future.mapRej', 0, 'be a Function', mapper);\n  if(arguments.length === 1) return partial1(mapRej$mapper, mapper);\n  return mapRej$mapper(mapper, m);\n}\n\nfunction chainRej$chainer(chainer, m){\n  if(!isFuture(m)) invalidFuture('Future.chainRej', 1, m);\n  return m.chainRej(chainer);\n}\n\nfunction chainRej(chainer, m){\n  if(!isFunction(chainer)) invalidArgument('Future.chainRej', 0, 'be a Function', chainer);\n  if(arguments.length === 1) return partial1(chainRej$chainer, chainer);\n  return chainRej$chainer(chainer, m);\n}\n\nfunction lastly$right(right, left){\n  if(!isFuture(left)) invalidFuture('Future.finally', 1, left);\n  return left.finally(right);\n}\n\nfunction lastly(right, left){\n  if(!isFuture(right)) invalidFuture('Future.finally', 0, right);\n  if(arguments.length === 1) return partial1(lastly$right, right);\n  return lastly$right(right, left);\n}\n\nfunction and$left(left, right){\n  if(!isFuture(right)) invalidFuture('Future.and', 1, right);\n  return left.and(right);\n}\n\nfunction and(left, right){\n  if(!isFuture(left)) invalidFuture('Future.and', 0, left);\n  if(arguments.length === 1) return partial1(and$left, left);\n  return and$left(left, right);\n}\n\nfunction both$left(left, right){\n  if(!isFuture(right)) invalidFuture('Future.both', 1, right);\n  return left.both(right);\n}\n\nfunction both(left, right){\n  if(!isFuture(left)) invalidFuture('Future.both', 0, left);\n  if(arguments.length === 1) return partial1(both$left, left);\n  return both$left(left, right);\n}\n\nfunction or$left(left, right){\n  if(!isFuture(right)) invalidFuture('Future.or', 1, right);\n  return left.or(right);\n}\n\nfunction or(left, right){\n  if(!isFuture(left)) invalidFuture('Future.or', 0, left);\n  if(arguments.length === 1) return partial1(or$left, left);\n  return or$left(left, right);\n}\n\nfunction race$right(right, left){\n  if(!isFuture(left)) invalidFuture('Future.race', 1, left);\n  return left.race(right);\n}\n\nfunction race(right, left){\n  if(!isFuture(right)) invalidFuture('Future.race', 0, right);\n  if(arguments.length === 1) return partial1(race$right, right);\n  return race$right(right, left);\n}\n\nfunction swap(m){\n  if(!isFuture(m)) invalidFuture('Future.swap', 0, m);\n  return m.swap();\n}\n\nfunction fold$f$g(f, g, m){\n  if(!isFuture(m)) invalidFuture('Future.fold', 2, m);\n  return m.fold(f, g);\n}\n\nfunction fold$f(f, g, m){\n  if(!isFunction(g)) invalidArgument('Future.fold', 1, 'be a function', g);\n  if(arguments.length === 2) return partial2(fold$f$g, f, g);\n  return fold$f$g(f, g, m);\n}\n\nfunction fold(f, g, m){\n  if(!isFunction(f)) invalidArgument('Future.fold', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(fold$f, f);\n  if(arguments.length === 2) return fold$f(f, g);\n  return fold$f(f, g, m);\n}\n\nfunction done$callback(callback, m){\n  if(!isFuture(m)) invalidFuture('Future.done', 1, m);\n  return m.done(callback);\n}\n\nfunction done(callback, m){\n  if(!isFunction(callback)) invalidArgument('Future.done', 0, 'be a Function', callback);\n  if(arguments.length === 1) return partial1(done$callback, callback);\n  return done$callback(callback, m);\n}\n\nfunction fork$f$g(f, g, m){\n  if(!isFuture(m)) invalidFuture('Future.fork', 2, m);\n  return m._fork(f, g);\n}\n\nfunction fork$f(f, g, m){\n  if(!isFunction(g)) invalidArgument('Future.fork', 1, 'be a function', g);\n  if(arguments.length === 2) return partial2(fork$f$g, f, g);\n  return fork$f$g(f, g, m);\n}\n\nfunction fork(f, g, m){\n  if(!isFunction(f)) invalidArgument('Future.fork', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(fork$f, f);\n  if(arguments.length === 2) return fork$f(f, g);\n  return fork$f(f, g, m);\n}\n\nfunction promise(m){\n  if(!isFuture(m)) invalidFuture('Future.promise', 0, m);\n  return m.promise();\n}\n\nfunction value$cont(cont, m){\n  if(!isFuture(m)) invalidFuture('Future.value', 1, m);\n  return m.value(cont);\n}\n\nfunction value(cont, m){\n  if(!isFunction(cont)) invalidArgument('Future.value', 0, 'be a Function', cont);\n  if(arguments.length === 1) return partial1(value$cont, cont);\n  return value$cont(cont, m);\n}\n\nfunction extractLeft(m){\n  if(!isFuture(m)) invalidFuture('Future.extractLeft', 0, m);\n  return m.extractLeft();\n}\n\nfunction extractRight(m){\n  if(!isFuture(m)) invalidFuture('Future.extractRight', 0, m);\n  return m.extractRight();\n}\n\nfunction check$ap$f(f){\n  if(!isFunction(f)) typeError(\n    'Future#ap expects its first argument to be a Future of a Function'\n    + '\\n  Actual: Future.of(' + show(f) + ')'\n  );\n}\n\nfunction ParallelAp(mval, mfunc){\n  this._mval = mval;\n  this._mfunc = mfunc;\n}\n\nParallelAp.prototype = Object.create(Core);\n\nParallelAp.prototype._fork = function ParallelAp$fork(rej, res){\n  var func, val, okval = false, okfunc = false, rejected = false, c1, c2;\n\n  function ParallelAp$rej(x){\n    if(!rejected){\n      rejected = true;\n      rej(x);\n    }\n  }\n\n  c1 = this._mval._fork(ParallelAp$rej, function ParallelAp$fork$resVal(x){\n    c1 = noop;\n    if(!okval) return void (okfunc = true, val = x);\n    res(func(x));\n  });\n  c2 = this._mfunc._fork(ParallelAp$rej, function ParallelAp$fork$resFunc(f){\n    c2 = noop;\n    check$ap$f(f);\n    if(!okfunc) return void (okval = true, func = f);\n    res(f(val));\n  });\n\n  return function ParallelAp$fork$cancel(){\n    c1();\n    c2();\n  };\n};\n\nParallelAp.prototype.toString = function ParallelAp$toString(){\n  return 'new ParallelAp(' + this._mval.toString() + ', ' + this._mfunc.toString() + ')';\n};\n\nfunction parallelAp(mval, mfunc){\n  return new ParallelAp(mval, mfunc);\n}\n\nfunction After$race(other){\n  return other.isSettled()\n       ? other\n       : isNever(other)\n       ? this\n       : typeof other._time === 'number'\n       ? other._time < this._time ? other : this\n       : Core._race.call(this, other);\n}\n\nfunction After(time, value){\n  this._time = time;\n  this._value = value;\n}\n\nAfter.prototype = Object.create(Core);\n\nAfter.prototype._race = After$race;\n\nAfter.prototype._swap = function After$swap(){\n  return new RejectAfter(this._time, this._value);\n};\n\nAfter.prototype._fork = function After$_fork(rej, res){\n  var id = setTimeout(res, this._time, this._value);\n  return function After$cancel(){ clearTimeout(id); };\n};\n\nAfter.prototype.extractRight = function After$extractRight(){\n  return [this._value];\n};\n\nAfter.prototype.toString = function After$toString(){\n  return 'Future.after(' + show(this._time) + ', ' + show(this._value) + ')';\n};\n\nfunction RejectAfter(time, value){\n  this._time = time;\n  this._value = value;\n}\n\nRejectAfter.prototype = Object.create(Core);\n\nRejectAfter.prototype._race = After$race;\n\nRejectAfter.prototype._swap = function RejectAfter$swap(){\n  return new After(this._time, this._value);\n};\n\nRejectAfter.prototype._fork = function RejectAfter$_fork(rej){\n  var id = setTimeout(rej, this._time, this._value);\n  return function RejectAfter$cancel(){ clearTimeout(id); };\n};\n\nRejectAfter.prototype.extractLeft = function RejectAfter$extractLeft(){\n  return [this._value];\n};\n\nRejectAfter.prototype.toString = function RejectAfter$toString(){\n  return 'Future.rejectAfter(' + show(this._time) + ', ' + show(this._value) + ')';\n};\n\nfunction after$time(time, value){\n  return time === Infinity ? never : new After(time, value);\n}\n\nfunction after(time, value){\n  if(!isUnsigned(time)) invalidArgument('Future.after', 0, 'be a positive integer', time);\n  if(arguments.length === 1) return partial1(after$time, time);\n  return after$time(time, value);\n}\n\nfunction rejectAfter$time(time, reason){\n  return time === Infinity ? never : new RejectAfter(time, reason);\n}\n\nfunction rejectAfter(time, reason){\n  if(!isUnsigned(time)) invalidArgument('Future.rejectAfter', 0, 'be a positive integer', time);\n  if(arguments.length === 1) return partial1(rejectAfter$time, time);\n  return rejectAfter$time(time, reason);\n}\n\nfunction Attempt(fn){\n  this._fn = fn;\n}\n\nAttempt.prototype = Object.create(Core);\n\nAttempt.prototype._fork = function Attempt$fork(rej, res){\n  var r;\n  try{ r = this._fn(); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nAttempt.prototype.toString = function Attempt$toString(){\n  return 'Future.try(' + showf(this._fn) + ')';\n};\n\nfunction attempt(f){\n  if(!isFunction(f)) invalidArgument('Future.try', 0, 'be a function', f);\n  return new Attempt(f);\n}\n\nvar Cold = Cached.Cold = 0;\nvar Pending = Cached.Pending = 1;\nvar Rejected$1 = Cached.Rejected = 2;\nvar Resolved$1 = Cached.Resolved = 3;\n\nfunction Queued(rej, res){\n  this[Rejected$1] = rej;\n  this[Resolved$1] = res;\n}\n\nfunction Cached(pure){\n  this._pure = pure;\n  this.reset();\n}\n\nCached.prototype = Object.create(Core);\n\nCached.prototype.isRejected = function Cached$isRejected(){\n  return this._state === Rejected$1;\n};\n\nCached.prototype.isResolved = function Cached$isResolved(){\n  return this._state === Resolved$1;\n};\n\nCached.prototype.extractLeft = function Cached$extractLeft(){\n  return this.isRejected() ? [this._value] : [];\n};\n\nCached.prototype.extractRight = function Cached$extractRight(){\n  return this.isResolved() ? [this._value] : [];\n};\n\nCached.prototype._addToQueue = function Cached$addToQueue(rej, res){\n  var _this = this;\n  if(_this._state > Pending) return noop;\n  var i = _this._queue.push(new Queued(rej, res)) - 1;\n  _this._queued = _this._queued + 1;\n\n  return function Cached$removeFromQueue(){\n    if(_this._state > Pending) return;\n    _this._queue[i] = undefined;\n    _this._queued = _this._queued - 1;\n    if(_this._queued === 0) _this.reset();\n  };\n};\n\nCached.prototype._drainQueue = function Cached$drainQueue(){\n  if(this._state <= Pending) return;\n  if(this._queued === 0) return;\n  var queue = this._queue;\n  var length = queue.length;\n  var state = this._state;\n  var value = this._value;\n\n  for(var i = 0; i < length; i++){\n    queue[i] && queue[i][state](value);\n    queue[i] = undefined;\n  }\n\n  this._queue = undefined;\n  this._queued = 0;\n};\n\nCached.prototype.reject = function Cached$reject(reason){\n  if(this._state > Pending) return;\n  this._value = reason;\n  this._state = Rejected$1;\n  this._drainQueue();\n};\n\nCached.prototype.resolve = function Cached$resolve(value){\n  if(this._state > Pending) return;\n  this._value = value;\n  this._state = Resolved$1;\n  this._drainQueue();\n};\n\nCached.prototype.run = function Cached$run(){\n  var _this = this;\n  if(_this._state > Cold) return;\n  _this._state = Pending;\n  _this._cancel = _this._pure._fork(\n    function Cached$fork$rej(x){ _this.reject(x); },\n    function Cached$fork$res(x){ _this.resolve(x); }\n  );\n};\n\nCached.prototype.reset = function Cached$reset(){\n  if(this._state === Cold) return;\n  if(this._state > Pending) this._cancel();\n  this._cancel = noop;\n  this._queue = [];\n  this._queued = 0;\n  this._value = undefined;\n  this._state = Cold;\n};\n\nCached.prototype._fork = function Cached$_fork(rej, res){\n  var cancel = noop;\n\n  switch(this._state){\n    case Pending: cancel = this._addToQueue(rej, res); break;\n    case Rejected$1: rej(this._value); break;\n    case Resolved$1: res(this._value); break;\n    default: cancel = this._addToQueue(rej, res); this.run();\n  }\n\n  return cancel;\n};\n\nCached.prototype.toString = function Cached$toString(){\n  return 'Future.cache(' + this._pure.toString() + ')';\n};\n\nfunction cache(m){\n  if(!isFuture(m)) invalidFuture('Future.cache', 0, m);\n  return new Cached(m);\n}\n\nfunction Encase(fn, a){\n  this._fn = fn;\n  this._a = a;\n}\n\nEncase.prototype = Object.create(Core);\n\nEncase.prototype._fork = function Encase$fork(rej, res){\n  var r;\n  try{ r = this._fn(this._a); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nEncase.prototype.toString = function Encase$toString(){\n  return 'Future.encase(' + showf(this._fn) + ', ' + show(this._a) + ')';\n};\n\nfunction encase(f, x){\n  if(!isFunction(f)) invalidArgument('Future.encase', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(encase, f);\n  return new Encase(f, x);\n}\n\nfunction Encase2(fn, a, b){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n}\n\nEncase2.prototype = Object.create(Core);\n\nEncase2.prototype._fork = function Encase2$fork(rej, res){\n  var r;\n  try{ r = this._fn(this._a, this._b); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nEncase2.prototype.toString = function Encase2$toString(){\n  return 'Future.encase2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n};\n\nfunction encase2(f, x, y){\n  if(!isFunction(f)) invalidArgument('Future.encase2', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encase2, f);\n    case 2: return partial2(encase2, f, x);\n    default: return new Encase2(f, x, y);\n  }\n}\n\nfunction Encase3(fn, a, b, c){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n  this._c = c;\n}\n\nEncase3.prototype = Object.create(Core);\n\nEncase3.prototype._fork = function Encase3$fork(rej, res){\n  var r;\n  try{ r = this._fn(this._a, this._b, this._c); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nEncase3.prototype.toString = function Encase3$toString(){\n  return 'Future.encase3('\n       + showf(this._fn)\n       + ', '\n       + show(this._a)\n       + ', '\n       + show(this._b)\n       + ', '\n       + show(this._c)\n       + ')';\n};\n\nfunction encase3(f, x, y, z){\n  if(!isFunction(f)) invalidArgument('Future.encase3', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encase3, f);\n    case 2: return partial2(encase3, f, x);\n    case 3: return partial3(encase3, f, x, y);\n    default: return new Encase3(f, x, y, z);\n  }\n}\n\nfunction EncaseN(fn, a){\n  this._fn = fn;\n  this._a = a;\n}\n\nEncaseN.prototype = Object.create(Core);\n\nEncaseN.prototype._fork = function EncaseN$fork(rej, res){\n  var open = true;\n  this._fn(this._a, function EncaseN$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function EncaseN$cancel(){ open = false; };\n};\n\nEncaseN.prototype.toString = function EncaseN$toString(){\n  return 'Future.encaseN(' + showf(this._fn) + ', ' + show(this._a) + ')';\n};\n\nfunction encaseN(f, x){\n  if(!isFunction(f)) invalidArgument('Future.encaseN', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(encaseN, f);\n  return new EncaseN(f, x);\n}\n\nfunction EncaseN2(fn, a, b){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n}\n\nEncaseN2.prototype = Object.create(Core);\n\nEncaseN2.prototype._fork = function EncaseN2$fork(rej, res){\n  var open = true;\n  this._fn(this._a, this._b, function EncaseN2$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function EncaseN2$cancel(){ open = false; };\n};\n\nEncaseN2.prototype.toString = function EncaseN2$toString(){\n  return 'Future.encaseN2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n};\n\nfunction encaseN2(f, x, y){\n  if(!isFunction(f)) invalidArgument('Future.encaseN2', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseN2, f);\n    case 2: return partial2(encaseN2, f, x);\n    default: return new EncaseN2(f, x, y);\n  }\n}\n\nfunction EncaseN$1(fn, a, b, c){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n  this._c = c;\n}\n\nEncaseN$1.prototype = Object.create(Core);\n\nEncaseN$1.prototype._fork = function EncaseN$3$fork(rej, res){\n  var open = true;\n  this._fn(this._a, this._b, this._c, function EncaseN$3$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function EncaseN$3$cancel(){ open = false; };\n};\n\nEncaseN$1.prototype.toString = function EncaseN$3$toString(){\n  return 'Future.encaseN3('\n       + showf(this._fn)\n       + ', '\n       + show(this._a)\n       + ', '\n       + show(this._b)\n       + ', '\n       + show(this._c)\n       + ')';\n};\n\nfunction encaseN3(f, x, y, z){\n  if(!isFunction(f)) invalidArgument('Future.encaseN3', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseN3, f);\n    case 2: return partial2(encaseN3, f, x);\n    case 3: return partial3(encaseN3, f, x, y);\n    default: return new EncaseN$1(f, x, y, z);\n  }\n}\n\nfunction check$promise(p, f, a){\n  return isThenable(p) ? p : typeError(\n    'Future.encaseP expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n    + '\\n  With: ' + (show(a))\n  );\n}\n\nfunction EncaseP(fn, a){\n  this._fn = fn;\n  this._a = a;\n}\n\nEncaseP.prototype = Object.create(Core);\n\nEncaseP.prototype._fork = function EncaseP$fork(rej, res){\n  var _fn = this._fn;\n  var _a = this._a;\n  var open = true;\n  check$promise(_fn(_a), _fn, _a).then(immediately(function EncaseP$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function EncaseP$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function EncaseP$cancel(){ open = false; };\n};\n\nEncaseP.prototype.toString = function EncaseP$toString(){\n  return 'Future.encaseP(' + showf(this._fn) + ', ' + show(this._a) + ')';\n};\n\nfunction encaseP(f, x){\n  if(!isFunction(f)) invalidArgument('Future.encaseP', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(encaseP, f);\n  return new EncaseP(f, x);\n}\n\nfunction check$promise$1(p, f, a, b){\n  return isThenable(p) ? p : typeError(\n    'Future.encaseP2 expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n    + '\\n  With 1: ' + (show(a))\n    + '\\n  With 2: ' + (show(b))\n  );\n}\n\nfunction EncaseP2(fn, a, b){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n}\n\nEncaseP2.prototype = Object.create(Core);\n\nEncaseP2.prototype._fork = function EncaseP2$fork(rej, res){\n  var _fn = this._fn;\n  var _a = this._a;\n  var _b = this._b;\n  var open = true;\n  check$promise$1(_fn(_a, _b), _fn, _a, _b).then(immediately(function EncaseP2$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function EncaseP2$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function EncaseP2$cancel(){ open = false; };\n};\n\nEncaseP2.prototype.toString = function EncaseP2$toString(){\n  return 'Future.encaseP2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n};\n\nfunction encaseP2(f, x, y){\n  if(!isFunction(f)) invalidArgument('Future.encaseP2', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseP2, f);\n    case 2: return partial2(encaseP2, f, x);\n    default: return new EncaseP2(f, x, y);\n  }\n}\n\nfunction check$promise$2(p, f, a, b, c){\n  return isThenable(p) ? p : typeError(\n    'Future.encaseP3 expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n    + '\\n  With 1: ' + (show(a))\n    + '\\n  With 2: ' + (show(b))\n    + '\\n  With 3: ' + (show(c))\n  );\n}\n\nfunction EncaseP3(fn, a, b, c){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n  this._c = c;\n}\n\nEncaseP3.prototype = Object.create(Core);\n\nEncaseP3.prototype._fork = function EncaseP3$fork(rej, res){\n  var _fn = this._fn;\n  var _a = this._a;\n  var _b = this._b;\n  var _c = this._c;\n  var open = true;\n  check$promise$2(_fn(_a, _b, _c), _fn, _a, _b, _c).then(immediately(function EncaseP3$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function EncaseP3$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function EncaseP3$cancel(){ open = false; };\n};\n\nEncaseP3.prototype.toString = function EncaseP3$toString(){\n  return 'Future.encaseP3('\n       + showf(this._fn)\n       + ', '\n       + show(this._a)\n       + ', '\n       + show(this._b)\n       + ', '\n       + show(this._c)\n       + ')';\n};\n\nfunction encaseP3(f, x, y, z){\n  if(!isFunction(f)) invalidArgument('Future.encaseP3', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseP3, f);\n    case 2: return partial2(encaseP3, f, x);\n    case 3: return partial3(encaseP3, f, x, y);\n    default: return new EncaseP3(f, x, y, z);\n  }\n}\n\n/*eslint consistent-return: 0*/\n\nfunction check$iterator(g){\n  return isIterator(g) ? g : invalidArgument(\n    'Future.do', 0, 'return an iterator, maybe you forgot the \"*\"', g\n  );\n}\n\nfunction check$iteration(o){\n  if(!isIteration(o)) typeError(\n    'Future.do was given an invalid generator:'\n    + ' Its iterator did not return a valid iteration from iterator.next()'\n    + '\\n  Actual: ' + show(o)\n  );\n  if(o.done || isFuture(o.value)) return o;\n  return invalidFuture(\n    'Future.do',\n    'the iterator to produce only valid Futures',\n    o.value,\n    '\\n  Tip: If you\\'re using a generator, make sure you always yield a Future'\n  );\n}\n\nfunction Go(generator){\n  this._generator = generator;\n}\n\nGo.prototype = Object.create(Core);\n\nGo.prototype._fork = function Go$_fork(rej, res){\n\n  var iterator = check$iterator(this._generator());\n\n  var timing = Undetermined, cancel = noop, state, value;\n\n  function resolved(x){\n    value = x;\n    if(timing === Asynchronous) return drain();\n    timing = Synchronous;\n    state = check$iteration(iterator.next(value));\n  }\n\n  function drain(){\n    state = check$iteration(iterator.next(value));\n\n    while(!state.done){\n      timing = Undetermined;\n      cancel = state.value._fork(rej, resolved);\n\n      if(timing !== Synchronous){\n        timing = Asynchronous;\n        return;\n      }\n    }\n\n    res(state.value);\n  }\n\n  drain();\n\n  return function Go$cancel(){ cancel(); };\n\n};\n\nGo.prototype.toString = function Go$toString(){\n  return 'Future.do(' + showf(this._generator) + ')';\n};\n\nfunction go(generator){\n  if(!isFunction(generator)) invalidArgument('Future.do', 0, 'be a Function', generator);\n  return new Go(generator);\n}\n\nfunction check$dispose(m, f, x){\n  if(!isFuture(m)) invalidFuture(\n    'Future.hook',\n    'the first function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nfunction check$consume(m, f, x){\n  if(!isFuture(m)) invalidFuture(\n    'Future.hook',\n    'the second function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nfunction Hook(acquire, dispose, consume){\n  this._acquire = acquire;\n  this._dispose = dispose;\n  this._consume = consume;\n}\n\nHook.prototype = Object.create(Core);\n\nHook.prototype._fork = function Hook$fork(rej, res){\n\n  var _acquire = this._acquire, _dispose = this._dispose, _consume = this._consume;\n  var cancel, cancelAcquire = noop, cancelConsume = noop, resource, value, cont = noop;\n\n  function Hook$done(){\n    cont(value);\n  }\n\n  function Hook$dispose(){\n    var disposal = _dispose(resource);\n    check$dispose(disposal, _dispose, resource);\n    cancel = disposal._fork(rej, Hook$done);\n    return cancel;\n  }\n\n  function Hook$cancelConsuption(){\n    cancelConsume();\n    Hook$dispose()();\n  }\n\n  function Hook$consumptionRejected(x){\n    cont = rej;\n    value = x;\n    Hook$dispose();\n  }\n\n  function Hook$consumptionResolved(x){\n    cont = res;\n    value = x;\n    Hook$dispose();\n  }\n\n  function Hook$acquireResolved(x){\n    resource = x;\n    var consumption = _consume(resource);\n    check$consume(consumption, _consume, resource);\n    cancel = Hook$cancelConsuption;\n    cancelConsume = consumption._fork(Hook$consumptionRejected, Hook$consumptionResolved);\n  }\n\n  cancelAcquire = _acquire._fork(rej, Hook$acquireResolved);\n\n  cancel = cancel || cancelAcquire;\n\n  return function Hook$fork$cancel(){ cancel(); };\n\n};\n\nHook.prototype.toString = function Hook$toString(){\n  return 'Future.hook('\n       + this._acquire.toString()\n       + ', '\n       + showf(this._dispose)\n       + ', '\n       + showf(this._consume)\n       + ')';\n};\n\nfunction hook$acquire$cleanup(acquire, cleanup, consume){\n  if(!isFunction(consume)) invalidArgument('Future.hook', 2, 'be a Future', consume);\n  return new Hook(acquire, cleanup, consume);\n}\n\nfunction hook$acquire(acquire, cleanup, consume){\n  if(!isFunction(cleanup)) invalidArgument('Future.hook', 1, 'be a function', cleanup);\n  if(arguments.length === 2) return partial2(hook$acquire$cleanup, acquire, cleanup);\n  return hook$acquire$cleanup(acquire, cleanup, consume);\n}\n\nfunction hook(acquire, cleanup, consume){\n  if(!isFuture(acquire)) invalidFuture('Future.hook', 0, acquire);\n  if(arguments.length === 1) return partial1(hook$acquire, acquire);\n  if(arguments.length === 2) return hook$acquire(acquire, cleanup);\n  return hook$acquire(acquire, cleanup, consume);\n}\n\nfunction Node(fn){\n  this._fn = fn;\n}\n\nNode.prototype = Object.create(Core);\n\nNode.prototype._fork = function Node$fork(rej, res){\n  var open = true;\n  this._fn(function Node$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function Node$cancel(){ open = false; };\n};\n\nNode.prototype.toString = function Node$toString(){\n  return 'Future.node(' + showf(this._fn) + ')';\n};\n\nfunction node(f){\n  if(!isFunction(f)) invalidArgument('Future.node', 0, 'be a function', f);\n  return new Node(f);\n}\n\nfunction check$parallel(m, i){\n  return isFuture(m) ? m : invalidFuture(\n    'Future.parallel',\n    'its second argument to be an array of valid Futures. '\n  + 'The value at position ' + i + ' in the array is not a Future',\n    m\n  );\n}\n\nfunction Parallel(max, futures){\n  this._futures = futures;\n  this._length = futures.length;\n  this._max = Math.min(this._length, max);\n}\n\nParallel.prototype = Object.create(Core);\n\nParallel.prototype._fork = function Parallel$_fork(rej, res){\n\n  var _futures = this._futures, _length = this._length, _max = this._max;\n  var cancels = new Array(_length), out = new Array(_length);\n  var cursor = 0, running = 0, blocked = false;\n\n  function Parallel$cancel(){\n    for(var n = 0; n < _length; n++) cancels[n] && cancels[n]();\n  }\n\n  function Parallel$run(idx){\n    running++;\n    cancels[idx] = _futures[idx]._fork(function Parallel$rej(reason){\n      cancels[idx] = noop;\n      Parallel$cancel();\n      rej(reason);\n    }, function Parallel$res(value){\n      cancels[idx] = noop;\n      out[idx] = value;\n      running--;\n      if(cursor === _length && running === 0) res(out);\n      else if(blocked) Parallel$drain();\n    });\n  }\n\n  function Parallel$drain(){\n    blocked = false;\n    while(cursor < _length && running < _max) Parallel$run(cursor++);\n    blocked = true;\n  }\n\n  Parallel$drain();\n\n  return Parallel$cancel;\n\n};\n\nParallel.prototype.toString = function Parallel$toString(){\n  return 'Future.parallel(' + this._max + ', ' + show(this._futures) + ')';\n};\n\nvar emptyArray = new Resolved([]);\n\nfunction parallel$max(max, xs){\n  if(!isArray(xs)) invalidArgument('Future.parallel', 1, 'be an array', xs);\n  var futures = mapArray(xs, check$parallel);\n  return futures.length === 0 ? emptyArray : new Parallel(max, futures);\n}\n\nfunction parallel(max, xs){\n  if(!isUnsigned(max)) invalidArgument('Future.parallel', 0, 'be a positive integer', max);\n  if(arguments.length === 1) return partial1(parallel$max, max);\n  return parallel$max(max, xs);\n}\n\nfunction check$promise$3(p, f){\n  return isThenable(p) ? p : typeError(\n    'Future.tryP expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + show(p) + '\\n  From calling: ' + showf(f)\n  );\n}\n\nfunction TryP(fn){\n  this._fn = fn;\n}\n\nTryP.prototype = Object.create(Core);\n\nTryP.prototype._fork = function TryP$fork(rej, res){\n  var open = true;\n  check$promise$3(this._fn(), this._fn).then(immediately(function TryP$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function TryP$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function TryP$cancel(){ open = false; };\n};\n\nTryP.prototype.toString = function TryP$toString(){\n  return 'Future.tryP(' + show(this._fn) + ')';\n};\n\nfunction tryP(f){\n  if(!isFunction(f)) invalidArgument('Future.tryP', 0, 'be a function', f);\n  return new TryP(f);\n}\n\nif(typeof Object.create !== 'function') error('Please polyfill Object.create to use Fluture');\nif(typeof Object.assign !== 'function') error('Please polyfill Object.assign to use Fluture');\nif(typeof Array.isArray !== 'function') error('Please polyfill Array.isArray to use Fluture');\n\nFuture.of = Future[FL.of] = of;\nFuture.chainRec = Future[FL.chainRec] = chainRec;\nFuture.reject = reject;\nFuture.ap = ap;\nFuture.map = map;\nFuture.bimap = bimap;\nFuture.chain = chain;\n\nvar Par = concurrify(Future, never, race, parallelAp);\nPar.of = Par[FL.of];\nPar.zero = Par[FL.zero];\nPar.map = map;\nPar.ap = ap;\nPar.alt = alt;\n\nfunction isParallel(x){\n  return x instanceof Par || type(x) === Par['@@type'];\n}\n\nfunction seq(par){\n  if(!isParallel(par)) invalidArgument('Future.seq', 0, 'to be a Par', par);\n  return par.sequential;\n}\n\n\n\n\nvar Fluture = Object.freeze({\n\tFuture: Future,\n\tdefault: Future,\n\tPar: Par,\n\tisParallel: isParallel,\n\tseq: seq,\n\tisFuture: isFuture,\n\treject: reject,\n\tof: of,\n\tnever: never,\n\tisNever: isNever,\n\tafter: after,\n\trejectAfter: rejectAfter,\n\tattempt: attempt,\n\ttry: attempt,\n\tcache: cache,\n\tencase: encase,\n\tencase2: encase2,\n\tencase3: encase3,\n\tencaseN: encaseN,\n\tencaseN2: encaseN2,\n\tencaseN3: encaseN3,\n\tencaseP: encaseP,\n\tencaseP2: encaseP2,\n\tencaseP3: encaseP3,\n\tgo: go,\n\tdo: go,\n\thook: hook,\n\tnode: node,\n\tparallel: parallel,\n\ttryP: tryP,\n\tap: ap,\n\talt: alt,\n\tmap: map,\n\tbimap: bimap,\n\tchain: chain,\n\tmapRej: mapRej,\n\tchainRej: chainRej,\n\tlastly: lastly,\n\tfinally: lastly,\n\tand: and,\n\tboth: both,\n\tor: or,\n\trace: race,\n\tswap: swap,\n\tfold: fold,\n\tdone: done,\n\tfork: fork,\n\tpromise: promise,\n\tvalue: value,\n\textractLeft: extractLeft,\n\textractRight: extractRight\n});\n\nvar index_cjs = Object.assign(Future, Fluture);\n\nreturn index_cjs;\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(__webpack_require__(12));\n  } else if (\"function\" === 'function' && __webpack_require__(0) != null) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(12)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Pair a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '8.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$toString :: Null ~> () -> String\n  function Null$prototype$toString() {\n    return 'null';\n  }\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$toString :: Undefined ~> () -> String\n  function Undefined$prototype$toString() {\n    return 'undefined';\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$toString :: Boolean ~> () -> String\n  function Boolean$prototype$toString() {\n    return typeof this === 'object' ?\n      'new Boolean(' + toString(this.valueOf()) + ')' :\n      this.toString();\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$toString :: Number ~> () -> String\n  function Number$prototype$toString() {\n    return typeof this === 'object' ?\n      'new Number(' + toString(this.valueOf()) + ')' :\n      1 / this === -Infinity ? '-0' : this.toString(10);\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this <= other;\n  }\n\n  //  Date$prototype$toString :: Date ~> () -> String\n  function Date$prototype$toString() {\n    var x = isNaN(this.valueOf()) ? NaN : this.toISOString();\n    return 'new Date(' + toString(x) + ')';\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$toString :: String ~> () -> String\n  function String$prototype$toString() {\n    return typeof this === 'object' ?\n      'new String(' + toString(this.valueOf()) + ')' :\n      JSON.stringify(this);\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var $todo = [x];\n    var $done = [];\n    while ($todo.length > 0) {\n      var xs = f(iterationNext, iterationDone, $todo.shift());\n      var $more = [];\n      for (var idx = 0; idx < xs.length; idx += 1) {\n        (xs[idx].done ? $done : $more).push(xs[idx].value);\n      }\n      Array.prototype.unshift.apply($todo, $more);\n    }\n    return $done;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$toString :: Array a ~> () -> String\n  function Array$prototype$toString() {\n    var reprs = this.map(toString);\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      if (!/^\\d+$/.test(k)) {\n        reprs.push(toString(k) + ': ' + toString(this[k]));\n      }\n    }\n    return '[' + reprs.join(', ') + ']';\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    this.forEach(function(x) { Array.prototype.push.apply(result, f(x)); });\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    return this.reduce(function(acc, x) { return f(acc, x); }, initial);\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$toString :: Arguments ~> String\n  function Arguments$prototype$toString() {\n    var args = Array.prototype.map.call(this, toString).join(', ');\n    return '(function () { return arguments; }(' + args + '))';\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$toString :: Error ~> () -> String\n  function Error$prototype$toString() {\n    return 'new ' + this.name + '(' + toString(this.message) + ')';\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$toString :: StrMap a ~> () -> String\n  function Object$prototype$toString() {\n    var reprs = [];\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      reprs.push(toString(k) + ': ' + toString(this[k]));\n    }\n    return '{' + reprs.join(', ') + '}';\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      prototype: {\n        toString:                   Null$prototype$toString,\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      prototype: {\n        toString:                   Undefined$prototype$toString,\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      prototype: {\n        toString:                   Boolean$prototype$toString,\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      prototype: {\n        toString:                   Number$prototype$toString,\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      prototype: {\n        toString:                   Date$prototype$toString,\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      prototype: {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      prototype: {\n        toString:                   String$prototype$toString,\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      prototype: {\n        toString:                   Array$prototype$toString,\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      prototype: {\n        toString:                   Arguments$prototype$toString,\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      prototype: {\n        toString:                   Error$prototype$toString,\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      prototype: {\n        toString:                   Object$prototype$toString,\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      prototype: {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# toString :: a -> String\n  //.\n  //. Returns a useful string representation of its argument.\n  //.\n  //. Dispatches to the argument's `toString` method if appropriate.\n  //.\n  //. Where practical, `equals(eval(toString(x)), x) = true`.\n  //.\n  //. `toString` implementations are provided for the following built-in types:\n  //. Null, Undefined, Boolean, Number, Date, String, Array, Arguments, Error,\n  //. and Object.\n  //.\n  //. ```javascript\n  //. > toString(-0)\n  //. '-0'\n  //.\n  //. > toString(['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > toString({x: 1, y: 2, z: 3})\n  //. '{\"x\": 1, \"y\": 2, \"z\": 3}'\n  //.\n  //. > toString(Cons(1, Cons(2, Cons(3, Nil))))\n  //. 'Cons(1, Cons(2, Cons(3, Nil)))'\n  //. ```\n  var toString = (function() {\n    //  $seen :: Array Any\n    var $seen = [];\n\n    function call(method, x) {\n      $seen.push(x);\n      try { return method.call(x); } finally { $seen.pop(); }\n    }\n\n    return function toString(x) {\n      if ($seen.indexOf(x) >= 0) return '<Circular>';\n\n      var xType = type(x);\n      if (xType === 'Object') {\n        var result;\n        try { result = call(x.toString, x); } catch (err) {}\n        if (result != null && result !== '[object Object]') return result;\n      }\n\n      return call(implPath([xType, 'prototype', 'toString']) || x.toString, x);\n    };\n  }());\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Pair Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Pair Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. of the given structure which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element of the given structure which satisfies the\n  //. predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(xs, x) {\n      var fx = f(x);\n      var lower = 0;\n      var upper = xs.length;\n      while (lower < upper) {\n        var idx = Math.floor((lower + upper) / 2);\n        if (lte(xs[idx].fx, fx)) lower = idx + 1; else upper = idx;\n      }\n      xs.splice(lower, 0, {x: x, fx: fx});\n      return xs;\n    }, [], foldable);\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (var idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# takeWhile :: (Applicative f, Foldable f, Monoid (f a)) => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first inner value which does not satisfy the predicate, and\n  //. all subsequent inner values.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, foldable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, foldable);\n  }\n\n  //# dropWhile :: (Applicative f, Foldable f, Monoid (f a)) => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first inner value which does not satisfy the predicate, and\n  //. all subsequent inner values.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, foldable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, foldable);\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    toString: toString,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    bimap: bimap,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      https://github.com/fantasyland/fantasy-land#alt\n//. [Alternative]:              https://github.com/fantasyland/fantasy-land#alternative\n//. [Applicative]:              https://github.com/fantasyland/fantasy-land#applicative\n//. [Apply]:                    https://github.com/fantasyland/fantasy-land#apply\n//. [Bifunctor]:                https://github.com/fantasyland/fantasy-land#bifunctor\n//. [Category]:                 https://github.com/fantasyland/fantasy-land#category\n//. [Chain]:                    https://github.com/fantasyland/fantasy-land#chain\n//. [ChainRec]:                 https://github.com/fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  https://github.com/fantasyland/fantasy-land#comonad\n//. [Contravariant]:            https://github.com/fantasyland/fantasy-land#contravariant\n//. [Extend]:                   https://github.com/fantasyland/fantasy-land#extend\n//. [FL]:                       https://github.com/fantasyland/fantasy-land\n//. [Filterable]:               https://github.com/fantasyland/fantasy-land#filterable\n//. [Foldable]:                 https://github.com/fantasyland/fantasy-land#foldable\n//. [Functor]:                  https://github.com/fantasyland/fantasy-land#functor\n//. [Group]:                    https://github.com/fantasyland/fantasy-land#group\n//. [Monad]:                    https://github.com/fantasyland/fantasy-land#monad\n//. [Monoid]:                   https://github.com/fantasyland/fantasy-land#monoid\n//. [Ord]:                      https://github.com/fantasyland/fantasy-land#ord\n//. [Plus]:                     https://github.com/fantasyland/fantasy-land#plus\n//. [Profunctor]:               https://github.com/fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                https://github.com/fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             https://github.com/fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   https://github.com/fantasyland/fantasy-land#setoid\n//. [Traversable]:              https://github.com/fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       https://github.com/fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        https://github.com/fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     https://github.com/fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     https://github.com/fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  https://github.com/fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   https://github.com/fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    https://github.com/fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: https://github.com/fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     https://github.com/fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    https://github.com/fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    https://github.com/fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   https://github.com/fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    https://github.com/fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        https://github.com/fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    https://github.com/fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       https://github.com/fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       https://github.com/fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        https://github.com/fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    https://github.com/fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    https://github.com/fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  https://github.com/fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      https://github.com/fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (\"function\" === 'function' && __webpack_require__(0) != null) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FuY3R1YXJ5LXR5cGUtY2xhc3Nlcy9ub2RlX21vZHVsZXMvc2FuY3R1YXJ5LXR5cGUtaWRlbnRpZmllcnMvaW5kZXguanM/NmFmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICAgICAgICBAQEBAQEBAICAgICAgICAgICAgQEBAQEBAQCAgICAgICAgIEBAXG4gICAgICBAQCAgICAgICBAQCAgICAgICAgQEAgICAgICAgQEAgICAgICBAQEBcbiAgICBAQCAgIEBAQCBAQCAgQEAgICAgQEAgICBAQEAgQEAgIEBAICAgQEBAQEBAIEBAICAgQEBAICBAQCBAQEAgICAgICBAQEBAXG4gICBAQCAgQEAgICBAQEAgICBAQCAgQEAgIEBAICAgQEBAICAgQEAgICBAQEAgICBAQCAgIEBAQCAgQEBAICAgQEAgIEBAQCAgIEBAXG4gICBAQCAgQEAgICBAQEAgICBAQCAgQEAgIEBAICAgQEBAICAgQEAgICBAQEAgICBAQCAgIEBAQCAgQEBAICAgQEAgIEBAQEBAQEBAXG4gICBAQCAgQEAgICBAQEAgIEBAICAgQEAgIEBAICAgQEBAICBAQCAgICBAQEAgICBAQCAgIEBAQCAgQEBAICAgQEAgIEBAQFxuICAgIEBAICAgQEBAIEBAQEBAICAgICBAQCAgIEBAQCBAQEBAQCAgICAgIEBAQCAgICBAQEAgQEAgIEBAQEBAQCAgICAgIEBAQEBAXG4gICAgICBAQCAgICAgICAgICAgICAgICAgQEAgICAgICAgICAgICAgICAgICAgICAgICAgICBAQCAgQEBcbiAgICAgICAgQEBAQEBAQCAgICAgICAgICAgIEBAQEBAQEAgICAgICAgICAgICAgICBAQEBAQCAgICBAQFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vLy4gIyBzYW5jdHVhcnktdHlwZS1pZGVudGlmaWVyc1xuLy8uXG4vLy4gQSB0eXBlIGlzIGEgc2V0IG9mIHZhbHVlcy4gQm9vbGVhbiwgZm9yIGV4YW1wbGUsIGlzIHRoZSB0eXBlIGNvbXByaXNpbmdcbi8vLiBgdHJ1ZWAgYW5kIGBmYWxzZWAuIEEgdmFsdWUgbWF5IGJlIGEgbWVtYmVyIG9mIG11bHRpcGxlIHR5cGVzIChgNDJgIGlzIGFcbi8vLiBtZW1iZXIgb2YgTnVtYmVyLCBQb3NpdGl2ZU51bWJlciwgSW50ZWdlciwgYW5kIG1hbnkgb3RoZXIgdHlwZXMpLlxuLy8uXG4vLy4gSW4gY2VydGFpbiBzaXR1YXRpb25zIGl0IGlzIHVzZWZ1bCB0byBkaXZpZGUgSmF2YVNjcmlwdCB2YWx1ZXMgaW50b1xuLy8uIG5vbi1vdmVybGFwcGluZyB0eXBlcy4gVGhlIGxhbmd1YWdlIHByb3ZpZGVzIHR3byBjb25zdHJ1Y3RzIGZvciB0aGlzXG4vLy4gcHVycG9zZTogdGhlIFtgdHlwZW9mYF1bMV0gb3BlcmF0b3IgYW5kIFtgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2BdWzJdLlxuLy8uIEVhY2ggaGFzIHByb3MgYW5kIGNvbnMsIGJ1dCBuZWl0aGVyIHN1cHBvcnRzIHVzZXItZGVmaW5lZCB0eXBlcy5cbi8vLlxuLy8uIFRoaXMgcGFja2FnZSBzcGVjaWZpZXMgYW4gW2FsZ29yaXRobV1bM10gZm9yIGRlcml2aW5nIGEgX3R5cGUgaWRlbnRpZmllcl9cbi8vLiBmcm9tIGFueSBKYXZhU2NyaXB0IHZhbHVlLCBhbmQgZXhwb3J0cyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYWxnb3JpdGhtLlxuLy8uIEF1dGhvcnMgb2YgYWxnZWJyYWljIGRhdGEgdHlwZXMgbWF5IGZvbGxvdyB0aGlzIHNwZWNpZmljYXRpb24gaW4gb3JkZXIgdG9cbi8vLiBtYWtlIHRoZWlyIGRhdGEgdHlwZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBhbGdvcml0aG0uXG4vLy5cbi8vLiAjIyMgQWxnb3JpdGhtXG4vLy5cbi8vLiAxLiAgVGFrZSBhbnkgSmF2YVNjcmlwdCB2YWx1ZSBgeGAuXG4vLy5cbi8vLiAyLiAgSWYgYHhgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYCwgZ28gdG8gc3RlcCA2LlxuLy8uXG4vLy4gMy4gIElmIGB4LmNvbnN0cnVjdG9yYCBldmFsdWF0ZXMgdG8gYG51bGxgIG9yIGB1bmRlZmluZWRgLCBnbyB0byBzdGVwIDYuXG4vLy5cbi8vLiA0LiAgSWYgYHguY29uc3RydWN0b3IucHJvdG90eXBlID09PSB4YCwgZ28gdG8gc3RlcCA2LiBUaGlzIGNoZWNrIHByZXZlbnRzIGFcbi8vLiAgICAgcHJvdG90eXBlIG9iamVjdCBmcm9tIGJlaW5nIGNvbnNpZGVyZWQgYSBtZW1iZXIgb2YgaXRzIGFzc29jaWF0ZWQgdHlwZS5cbi8vLlxuLy8uIDUuICBJZiBgdHlwZW9mIHguY29uc3RydWN0b3JbJ0BAdHlwZSddYCBldmFsdWF0ZXMgdG8gYCdzdHJpbmcnYCwgcmV0dXJuXG4vLy4gICAgIHRoZSB2YWx1ZSBvZiBgeC5jb25zdHJ1Y3RvclsnQEB0eXBlJ11gLlxuLy8uXG4vLy4gNi4gIFJldHVybiB0aGUgW2BPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYF1bMl0gcmVwcmVzZW50YXRpb24gb2YgYHhgXG4vLy4gICAgIHdpdGhvdXQgdGhlIGxlYWRpbmcgYCdbb2JqZWN0ICdgIGFuZCB0cmFpbGluZyBgJ10nYC5cbi8vLlxuLy8uICMjIyBDb21wYXRpYmlsaXR5XG4vLy5cbi8vLiBGb3IgYW4gYWxnZWJyYWljIGRhdGEgdHlwZSB0byBiZSBjb21wYXRpYmxlIHdpdGggdGhlIFthbGdvcml0aG1dWzNdOlxuLy8uXG4vLy4gICAtIGV2ZXJ5IG1lbWJlciBvZiB0aGUgdHlwZSBtdXN0IGhhdmUgYSBgY29uc3RydWN0b3JgIHByb3BlcnR5IHBvaW50aW5nXG4vLy4gICAgIHRvIGFuIG9iamVjdCBrbm93biBhcyB0aGUgX3R5cGUgcmVwcmVzZW50YXRpdmVfO1xuLy8uXG4vLy4gICAtIHRoZSB0eXBlIHJlcHJlc2VudGF0aXZlIG11c3QgaGF2ZSBhIGBAQHR5cGVgIHByb3BlcnR5OyBhbmRcbi8vLlxuLy8uICAgLSB0aGUgdHlwZSByZXByZXNlbnRhdGl2ZSdzIGBAQHR5cGVgIHByb3BlcnR5ICh0aGUgX3R5cGUgaWRlbnRpZmllcl8pXG4vLy4gICAgIG11c3QgYmUgYSBzdHJpbmcgcHJpbWl0aXZlLCBpZGVhbGx5IGAnPG5wbS1wYWNrYWdlLW5hbWU+Lzx0eXBlLW5hbWU+J2AuXG4vLy5cbi8vLiBGb3IgZXhhbXBsZTpcbi8vLlxuLy8uIGBgYGphdmFzY3JpcHRcbi8vLiAvLyAgSWRlbnRpdHkgOjogYSAtPiBJZGVudGl0eSBhXG4vLy4gZnVuY3Rpb24gSWRlbnRpdHkoeCkge1xuLy8uICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIElkZW50aXR5KSkgcmV0dXJuIG5ldyBJZGVudGl0eSh4KTtcbi8vLiAgIHRoaXMudmFsdWUgPSB4O1xuLy8uIH1cbi8vLlxuLy8uIElkZW50aXR5WydAQHR5cGUnXSA9ICdteS1wYWNrYWdlL0lkZW50aXR5Jztcbi8vLiBgYGBcbi8vLlxuLy8uIE5vdGUgdGhhdCBieSB1c2luZyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoZSBgY29uc3RydWN0b3JgIHByb3BlcnR5IGlzIHNldFxuLy8uIGltcGxpY2l0bHkgZm9yIGVhY2ggdmFsdWUgY3JlYXRlZC4gQ29uc3RydWN0b3IgZnVuY3Rpb25zIGFyZSBjb252ZW5pZW50IGZvclxuLy8uIHRoaXMgcmVhc29uLCBidXQgYXJlIG5vdCByZXF1aXJlZC4gVGhpcyBkZWZpbml0aW9uIGlzIGFsc28gdmFsaWQ6XG4vLy5cbi8vLiBgYGBqYXZhc2NyaXB0XG4vLy4gLy8gIElkZW50aXR5VHlwZVJlcCA6OiBUeXBlUmVwIElkZW50aXR5XG4vLy4gdmFyIElkZW50aXR5VHlwZVJlcCA9IHtcbi8vLiAgICdAQHR5cGUnOiAnbXktcGFja2FnZS9JZGVudGl0eSdcbi8vLiB9O1xuLy8uXG4vLy4gLy8gIElkZW50aXR5IDo6IGEgLT4gSWRlbnRpdHkgYVxuLy8uIGZ1bmN0aW9uIElkZW50aXR5KHgpIHtcbi8vLiAgIHJldHVybiB7Y29uc3RydWN0b3I6IElkZW50aXR5VHlwZVJlcCwgdmFsdWU6IHh9O1xuLy8uIH1cbi8vLiBgYGBcbi8vLlxuLy8uICMjIyBVc2FnZVxuLy8uXG4vLy4gYGBgamF2YXNjcmlwdFxuLy8uIHZhciBJZGVudGl0eSA9IHJlcXVpcmUoJ215LXBhY2thZ2UnKS5JZGVudGl0eTtcbi8vLiB2YXIgdHlwZSA9IHJlcXVpcmUoJ3NhbmN0dWFyeS10eXBlLWlkZW50aWZpZXJzJyk7XG4vLy5cbi8vLiB0eXBlKG51bGwpOyAgICAgICAgIC8vID0+ICdOdWxsJ1xuLy8uIHR5cGUodHJ1ZSk7ICAgICAgICAgLy8gPT4gJ0Jvb2xlYW4nXG4vLy4gdHlwZShbMSwgMiwgM10pOyAgICAvLyA9PiAnQXJyYXknXG4vLy4gdHlwZShJZGVudGl0eSk7ICAgICAvLyA9PiAnRnVuY3Rpb24nXG4vLy4gdHlwZShJZGVudGl0eSgwKSk7ICAvLyA9PiAnbXktcGFja2FnZS9JZGVudGl0eSdcbi8vLiBgYGBcbi8vLlxuLy8uXG4vLy4gWzFdOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvdHlwZW9mXG4vLy4gWzJdOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvdG9TdHJpbmdcbi8vLiBbM106ICNhbGdvcml0aG1cblxuKGZ1bmN0aW9uKGYpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGYoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgIT0gbnVsbCkge1xuICAgIGRlZmluZShbXSwgZik7XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5zYW5jdHVhcnlUeXBlSWRlbnRpZmllcnMgPSBmKCk7XG4gIH1cblxufShmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gICQkdHlwZSA6OiBTdHJpbmdcbiAgdmFyICQkdHlwZSA9ICdAQHR5cGUnO1xuXG4gIC8vICB0eXBlIDo6IEFueSAtPiBTdHJpbmdcbiAgZnVuY3Rpb24gdHlwZSh4KSB7XG4gICAgcmV0dXJuIHggIT0gbnVsbCAmJlxuICAgICAgICAgICB4LmNvbnN0cnVjdG9yICE9IG51bGwgJiZcbiAgICAgICAgICAgeC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgIT09IHggJiZcbiAgICAgICAgICAgdHlwZW9mIHguY29uc3RydWN0b3JbJCR0eXBlXSA9PT0gJ3N0cmluZycgP1xuICAgICAgeC5jb25zdHJ1Y3RvclskJHR5cGVdIDpcbiAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KS5zbGljZSgnW29iamVjdCAnLmxlbmd0aCwgLSddJy5sZW5ndGgpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMvbm9kZV9tb2R1bGVzL3NhbmN0dWFyeS10eXBlLWlkZW50aWZpZXJzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(__webpack_require__(14));\n  } else if (\"function\" === 'function' && __webpack_require__(0) != null) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(14)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Pair a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '7.1.1';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$toString :: Null ~> () -> String\n  function Null$prototype$toString() {\n    return 'null';\n  }\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$toString :: Undefined ~> () -> String\n  function Undefined$prototype$toString() {\n    return 'undefined';\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$toString :: Boolean ~> () -> String\n  function Boolean$prototype$toString() {\n    return typeof this === 'object' ?\n      'new Boolean(' + toString(this.valueOf()) + ')' :\n      this.toString();\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$toString :: Number ~> () -> String\n  function Number$prototype$toString() {\n    return typeof this === 'object' ?\n      'new Number(' + toString(this.valueOf()) + ')' :\n      1 / this === -Infinity ? '-0' : this.toString(10);\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this <= other;\n  }\n\n  //  Date$prototype$toString :: Date ~> () -> String\n  function Date$prototype$toString() {\n    var x = isNaN(this.valueOf()) ? NaN : this.toISOString();\n    return 'new Date(' + toString(x) + ')';\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$toString :: String ~> () -> String\n  function String$prototype$toString() {\n    return typeof this === 'object' ?\n      'new String(' + toString(this.valueOf()) + ')' :\n      JSON.stringify(this);\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var $todo = [x];\n    var $done = [];\n    while ($todo.length > 0) {\n      var xs = f(iterationNext, iterationDone, $todo.shift());\n      var $more = [];\n      for (var idx = 0; idx < xs.length; idx += 1) {\n        (xs[idx].done ? $done : $more).push(xs[idx].value);\n      }\n      Array.prototype.unshift.apply($todo, $more);\n    }\n    return $done;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$toString :: Array a ~> () -> String\n  function Array$prototype$toString() {\n    var reprs = this.map(toString);\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      if (!/^\\d+$/.test(k)) {\n        reprs.push(toString(k) + ': ' + toString(this[k]));\n      }\n    }\n    return '[' + reprs.join(', ') + ']';\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    this.forEach(function(x) { Array.prototype.push.apply(result, f(x)); });\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    return this.reduce(function(acc, x) { return f(acc, x); }, initial);\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$toString :: Arguments ~> String\n  function Arguments$prototype$toString() {\n    var args = Array.prototype.map.call(this, toString).join(', ');\n    return '(function () { return arguments; }(' + args + '))';\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$toString :: Error ~> () -> String\n  function Error$prototype$toString() {\n    return 'new ' + this.name + '(' + toString(this.message) + ')';\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$toString :: StrMap a ~> () -> String\n  function Object$prototype$toString() {\n    var reprs = [];\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      reprs.push(toString(k) + ': ' + toString(this[k]));\n    }\n    return '{' + reprs.join(', ') + '}';\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      prototype: {\n        toString:                   Null$prototype$toString,\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      prototype: {\n        toString:                   Undefined$prototype$toString,\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      prototype: {\n        toString:                   Boolean$prototype$toString,\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      prototype: {\n        toString:                   Number$prototype$toString,\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      prototype: {\n        toString:                   Date$prototype$toString,\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      prototype: {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      prototype: {\n        toString:                   String$prototype$toString,\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      prototype: {\n        toString:                   Array$prototype$toString,\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      prototype: {\n        toString:                   Arguments$prototype$toString,\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      prototype: {\n        toString:                   Error$prototype$toString,\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      prototype: {\n        toString:                   Object$prototype$toString,\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      prototype: {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# toString :: a -> String\n  //.\n  //. Returns a useful string representation of its argument.\n  //.\n  //. Dispatches to the argument's `toString` method if appropriate.\n  //.\n  //. Where practical, `equals(eval(toString(x)), x) = true`.\n  //.\n  //. `toString` implementations are provided for the following built-in types:\n  //. Null, Undefined, Boolean, Number, Date, String, Array, Arguments, Error,\n  //. and Object.\n  //.\n  //. ```javascript\n  //. > toString(-0)\n  //. '-0'\n  //.\n  //. > toString(['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > toString({x: 1, y: 2, z: 3})\n  //. '{\"x\": 1, \"y\": 2, \"z\": 3}'\n  //.\n  //. > toString(Cons(1, Cons(2, Cons(3, Nil))))\n  //. 'Cons(1, Cons(2, Cons(3, Nil)))'\n  //. ```\n  var toString = (function() {\n    //  $seen :: Array Any\n    var $seen = [];\n\n    function call(method, x) {\n      $seen.push(x);\n      try { return method.call(x); } finally { $seen.pop(); }\n    }\n\n    return function toString(x) {\n      if ($seen.indexOf(x) >= 0) return '<Circular>';\n\n      var xType = type(x);\n      if (xType === 'Object') {\n        var result;\n        try { result = call(x.toString, x); } catch (err) {}\n        if (result != null && result !== '[object Object]') return result;\n      }\n\n      return call(implPath([xType, 'prototype', 'toString']) || x.toString, x);\n    };\n  }());\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Pair Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Pair Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# filter :: (Applicative f, Foldable f, Monoid (f a)) => (a -> Boolean, f a) -> f a\n  //.\n  //. Filters its second argument in accordance with the given predicate.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`filterM`](#filterM).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //. ```\n  function filter(pred, m) {\n    //  Fast path for arrays.\n    if (Array.isArray(m)) return m.filter(function(x) { return pred(x); });\n    var M = m.constructor;\n    return reduce(function(m, x) { return pred(x) ? concat(m, of(M, x)) : m; },\n                  empty(M),\n                  m);\n  }\n\n  //# filterM :: (Alternative m, Monad m) => (a -> Boolean, m a) -> m a\n  //.\n  //. Filters its second argument in accordance with the given predicate.\n  //.\n  //. This function is derived from [`of`](#of), [`chain`](#chain), and\n  //. [`zero`](#zero).\n  //.\n  //. See also [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > filterM(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filterM(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filterM(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filterM(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filterM(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filterM(pred, m) {\n    var M = m.constructor;\n    var z = zero(M);\n    return chain(function(x) { return pred(x) ? of(M, x) : z; }, m);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(xs, x) {\n      var fx = f(x);\n      var lower = 0;\n      var upper = xs.length;\n      while (lower < upper) {\n        var idx = Math.floor((lower + upper) / 2);\n        if (lte(xs[idx].fx, fx)) lower = idx + 1; else upper = idx;\n      }\n      xs.splice(lower, 0, {x: x, fx: fx});\n      return xs;\n    }, [], foldable);\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (var idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# takeWhile :: (Applicative f, Foldable f, Monoid (f a)) => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first inner value which does not satisfy the predicate, and\n  //. all subsequent inner values.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, foldable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, foldable);\n  }\n\n  //# dropWhile :: (Applicative f, Foldable f, Monoid (f a)) => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first inner value which does not satisfy the predicate, and\n  //. all subsequent inner values.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, foldable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, foldable);\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    toString: toString,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    map: map,\n    bimap: bimap,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    filter: filter,\n    filterM: filterM,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      https://github.com/fantasyland/fantasy-land#alt\n//. [Alternative]:              https://github.com/fantasyland/fantasy-land#alternative\n//. [Applicative]:              https://github.com/fantasyland/fantasy-land#applicative\n//. [Apply]:                    https://github.com/fantasyland/fantasy-land#apply\n//. [Bifunctor]:                https://github.com/fantasyland/fantasy-land#bifunctor\n//. [Category]:                 https://github.com/fantasyland/fantasy-land#category\n//. [Chain]:                    https://github.com/fantasyland/fantasy-land#chain\n//. [ChainRec]:                 https://github.com/fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  https://github.com/fantasyland/fantasy-land#comonad\n//. [Contravariant]:            https://github.com/fantasyland/fantasy-land#contravariant\n//. [Extend]:                   https://github.com/fantasyland/fantasy-land#extend\n//. [FL]:                       https://github.com/fantasyland/fantasy-land\n//. [Foldable]:                 https://github.com/fantasyland/fantasy-land#foldable\n//. [Functor]:                  https://github.com/fantasyland/fantasy-land#functor\n//. [Group]:                    https://github.com/fantasyland/fantasy-land#group\n//. [Monad]:                    https://github.com/fantasyland/fantasy-land#monad\n//. [Monoid]:                   https://github.com/fantasyland/fantasy-land#monoid\n//. [Ord]:                      https://github.com/fantasyland/fantasy-land#ord\n//. [Plus]:                     https://github.com/fantasyland/fantasy-land#plus\n//. [Profunctor]:               https://github.com/fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                https://github.com/fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             https://github.com/fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   https://github.com/fantasyland/fantasy-land#setoid\n//. [Traversable]:              https://github.com/fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       https://github.com/fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        https://github.com/fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     https://github.com/fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     https://github.com/fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  https://github.com/fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   https://github.com/fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    https://github.com/fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: https://github.com/fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     https://github.com/fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    https://github.com/fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    https://github.com/fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   https://github.com/fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/id`]:        https://github.com/fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    https://github.com/fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       https://github.com/fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       https://github.com/fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        https://github.com/fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    https://github.com/fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    https://github.com/fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  https://github.com/fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      https://github.com/fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (\"function\" === 'function' && __webpack_require__(0) != null) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FuY3R1YXJ5LWRlZi9ub2RlX21vZHVsZXMvc2FuY3R1YXJ5LXR5cGUtY2xhc3Nlcy9ub2RlX21vZHVsZXMvc2FuY3R1YXJ5LXR5cGUtaWRlbnRpZmllcnMvaW5kZXguanM/MWMwYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICAgICAgICBAQEBAQEBAICAgICAgICAgICAgQEBAQEBAQCAgICAgICAgIEBAXG4gICAgICBAQCAgICAgICBAQCAgICAgICAgQEAgICAgICAgQEAgICAgICBAQEBcbiAgICBAQCAgIEBAQCBAQCAgQEAgICAgQEAgICBAQEAgQEAgIEBAICAgQEBAQEBAIEBAICAgQEBAICBAQCBAQEAgICAgICBAQEBAXG4gICBAQCAgQEAgICBAQEAgICBAQCAgQEAgIEBAICAgQEBAICAgQEAgICBAQEAgICBAQCAgIEBAQCAgQEBAICAgQEAgIEBAQCAgIEBAXG4gICBAQCAgQEAgICBAQEAgICBAQCAgQEAgIEBAICAgQEBAICAgQEAgICBAQEAgICBAQCAgIEBAQCAgQEBAICAgQEAgIEBAQEBAQEBAXG4gICBAQCAgQEAgICBAQEAgIEBAICAgQEAgIEBAICAgQEBAICBAQCAgICBAQEAgICBAQCAgIEBAQCAgQEBAICAgQEAgIEBAQFxuICAgIEBAICAgQEBAIEBAQEBAICAgICBAQCAgIEBAQCBAQEBAQCAgICAgIEBAQCAgICBAQEAgQEAgIEBAQEBAQCAgICAgIEBAQEBAXG4gICAgICBAQCAgICAgICAgICAgICAgICAgQEAgICAgICAgICAgICAgICAgICAgICAgICAgICBAQCAgQEBcbiAgICAgICAgQEBAQEBAQCAgICAgICAgICAgIEBAQEBAQEAgICAgICAgICAgICAgICBAQEBAQCAgICBAQFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vLy4gIyBzYW5jdHVhcnktdHlwZS1pZGVudGlmaWVyc1xuLy8uXG4vLy4gQSB0eXBlIGlzIGEgc2V0IG9mIHZhbHVlcy4gQm9vbGVhbiwgZm9yIGV4YW1wbGUsIGlzIHRoZSB0eXBlIGNvbXByaXNpbmdcbi8vLiBgdHJ1ZWAgYW5kIGBmYWxzZWAuIEEgdmFsdWUgbWF5IGJlIGEgbWVtYmVyIG9mIG11bHRpcGxlIHR5cGVzIChgNDJgIGlzIGFcbi8vLiBtZW1iZXIgb2YgTnVtYmVyLCBQb3NpdGl2ZU51bWJlciwgSW50ZWdlciwgYW5kIG1hbnkgb3RoZXIgdHlwZXMpLlxuLy8uXG4vLy4gSW4gY2VydGFpbiBzaXR1YXRpb25zIGl0IGlzIHVzZWZ1bCB0byBkaXZpZGUgSmF2YVNjcmlwdCB2YWx1ZXMgaW50b1xuLy8uIG5vbi1vdmVybGFwcGluZyB0eXBlcy4gVGhlIGxhbmd1YWdlIHByb3ZpZGVzIHR3byBjb25zdHJ1Y3RzIGZvciB0aGlzXG4vLy4gcHVycG9zZTogdGhlIFtgdHlwZW9mYF1bMV0gb3BlcmF0b3IgYW5kIFtgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2BdWzJdLlxuLy8uIEVhY2ggaGFzIHByb3MgYW5kIGNvbnMsIGJ1dCBuZWl0aGVyIHN1cHBvcnRzIHVzZXItZGVmaW5lZCB0eXBlcy5cbi8vLlxuLy8uIFRoaXMgcGFja2FnZSBzcGVjaWZpZXMgYW4gW2FsZ29yaXRobV1bM10gZm9yIGRlcml2aW5nIGEgX3R5cGUgaWRlbnRpZmllcl9cbi8vLiBmcm9tIGFueSBKYXZhU2NyaXB0IHZhbHVlLCBhbmQgZXhwb3J0cyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYWxnb3JpdGhtLlxuLy8uIEF1dGhvcnMgb2YgYWxnZWJyYWljIGRhdGEgdHlwZXMgbWF5IGZvbGxvdyB0aGlzIHNwZWNpZmljYXRpb24gaW4gb3JkZXIgdG9cbi8vLiBtYWtlIHRoZWlyIGRhdGEgdHlwZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBhbGdvcml0aG0uXG4vLy5cbi8vLiAjIyMgQWxnb3JpdGhtXG4vLy5cbi8vLiAxLiAgVGFrZSBhbnkgSmF2YVNjcmlwdCB2YWx1ZSBgeGAuXG4vLy5cbi8vLiAyLiAgSWYgYHhgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYCwgZ28gdG8gc3RlcCA2LlxuLy8uXG4vLy4gMy4gIElmIGB4LmNvbnN0cnVjdG9yYCBldmFsdWF0ZXMgdG8gYG51bGxgIG9yIGB1bmRlZmluZWRgLCBnbyB0byBzdGVwIDYuXG4vLy5cbi8vLiA0LiAgSWYgYHguY29uc3RydWN0b3IucHJvdG90eXBlID09PSB4YCwgZ28gdG8gc3RlcCA2LiBUaGlzIGNoZWNrIHByZXZlbnRzIGFcbi8vLiAgICAgcHJvdG90eXBlIG9iamVjdCBmcm9tIGJlaW5nIGNvbnNpZGVyZWQgYSBtZW1iZXIgb2YgaXRzIGFzc29jaWF0ZWQgdHlwZS5cbi8vLlxuLy8uIDUuICBJZiBgdHlwZW9mIHguY29uc3RydWN0b3JbJ0BAdHlwZSddYCBldmFsdWF0ZXMgdG8gYCdzdHJpbmcnYCwgcmV0dXJuXG4vLy4gICAgIHRoZSB2YWx1ZSBvZiBgeC5jb25zdHJ1Y3RvclsnQEB0eXBlJ11gLlxuLy8uXG4vLy4gNi4gIFJldHVybiB0aGUgW2BPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYF1bMl0gcmVwcmVzZW50YXRpb24gb2YgYHhgXG4vLy4gICAgIHdpdGhvdXQgdGhlIGxlYWRpbmcgYCdbb2JqZWN0ICdgIGFuZCB0cmFpbGluZyBgJ10nYC5cbi8vLlxuLy8uICMjIyBDb21wYXRpYmlsaXR5XG4vLy5cbi8vLiBGb3IgYW4gYWxnZWJyYWljIGRhdGEgdHlwZSB0byBiZSBjb21wYXRpYmxlIHdpdGggdGhlIFthbGdvcml0aG1dWzNdOlxuLy8uXG4vLy4gICAtIGV2ZXJ5IG1lbWJlciBvZiB0aGUgdHlwZSBtdXN0IGhhdmUgYSBgY29uc3RydWN0b3JgIHByb3BlcnR5IHBvaW50aW5nXG4vLy4gICAgIHRvIGFuIG9iamVjdCBrbm93biBhcyB0aGUgX3R5cGUgcmVwcmVzZW50YXRpdmVfO1xuLy8uXG4vLy4gICAtIHRoZSB0eXBlIHJlcHJlc2VudGF0aXZlIG11c3QgaGF2ZSBhIGBAQHR5cGVgIHByb3BlcnR5OyBhbmRcbi8vLlxuLy8uICAgLSB0aGUgdHlwZSByZXByZXNlbnRhdGl2ZSdzIGBAQHR5cGVgIHByb3BlcnR5ICh0aGUgX3R5cGUgaWRlbnRpZmllcl8pXG4vLy4gICAgIG11c3QgYmUgYSBzdHJpbmcgcHJpbWl0aXZlLCBpZGVhbGx5IGAnPG5wbS1wYWNrYWdlLW5hbWU+Lzx0eXBlLW5hbWU+J2AuXG4vLy5cbi8vLiBGb3IgZXhhbXBsZTpcbi8vLlxuLy8uIGBgYGphdmFzY3JpcHRcbi8vLiAvLyAgSWRlbnRpdHkgOjogYSAtPiBJZGVudGl0eSBhXG4vLy4gZnVuY3Rpb24gSWRlbnRpdHkoeCkge1xuLy8uICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIElkZW50aXR5KSkgcmV0dXJuIG5ldyBJZGVudGl0eSh4KTtcbi8vLiAgIHRoaXMudmFsdWUgPSB4O1xuLy8uIH1cbi8vLlxuLy8uIElkZW50aXR5WydAQHR5cGUnXSA9ICdteS1wYWNrYWdlL0lkZW50aXR5Jztcbi8vLiBgYGBcbi8vLlxuLy8uIE5vdGUgdGhhdCBieSB1c2luZyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoZSBgY29uc3RydWN0b3JgIHByb3BlcnR5IGlzIHNldFxuLy8uIGltcGxpY2l0bHkgZm9yIGVhY2ggdmFsdWUgY3JlYXRlZC4gQ29uc3RydWN0b3IgZnVuY3Rpb25zIGFyZSBjb252ZW5pZW50IGZvclxuLy8uIHRoaXMgcmVhc29uLCBidXQgYXJlIG5vdCByZXF1aXJlZC4gVGhpcyBkZWZpbml0aW9uIGlzIGFsc28gdmFsaWQ6XG4vLy5cbi8vLiBgYGBqYXZhc2NyaXB0XG4vLy4gLy8gIElkZW50aXR5VHlwZVJlcCA6OiBUeXBlUmVwIElkZW50aXR5XG4vLy4gdmFyIElkZW50aXR5VHlwZVJlcCA9IHtcbi8vLiAgICdAQHR5cGUnOiAnbXktcGFja2FnZS9JZGVudGl0eSdcbi8vLiB9O1xuLy8uXG4vLy4gLy8gIElkZW50aXR5IDo6IGEgLT4gSWRlbnRpdHkgYVxuLy8uIGZ1bmN0aW9uIElkZW50aXR5KHgpIHtcbi8vLiAgIHJldHVybiB7Y29uc3RydWN0b3I6IElkZW50aXR5VHlwZVJlcCwgdmFsdWU6IHh9O1xuLy8uIH1cbi8vLiBgYGBcbi8vLlxuLy8uICMjIyBVc2FnZVxuLy8uXG4vLy4gYGBgamF2YXNjcmlwdFxuLy8uIHZhciBJZGVudGl0eSA9IHJlcXVpcmUoJ215LXBhY2thZ2UnKS5JZGVudGl0eTtcbi8vLiB2YXIgdHlwZSA9IHJlcXVpcmUoJ3NhbmN0dWFyeS10eXBlLWlkZW50aWZpZXJzJyk7XG4vLy5cbi8vLiB0eXBlKG51bGwpOyAgICAgICAgIC8vID0+ICdOdWxsJ1xuLy8uIHR5cGUodHJ1ZSk7ICAgICAgICAgLy8gPT4gJ0Jvb2xlYW4nXG4vLy4gdHlwZShbMSwgMiwgM10pOyAgICAvLyA9PiAnQXJyYXknXG4vLy4gdHlwZShJZGVudGl0eSk7ICAgICAvLyA9PiAnRnVuY3Rpb24nXG4vLy4gdHlwZShJZGVudGl0eSgwKSk7ICAvLyA9PiAnbXktcGFja2FnZS9JZGVudGl0eSdcbi8vLiBgYGBcbi8vLlxuLy8uXG4vLy4gWzFdOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvdHlwZW9mXG4vLy4gWzJdOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvdG9TdHJpbmdcbi8vLiBbM106ICNhbGdvcml0aG1cblxuKGZ1bmN0aW9uKGYpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGYoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgIT0gbnVsbCkge1xuICAgIGRlZmluZShbXSwgZik7XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5zYW5jdHVhcnlUeXBlSWRlbnRpZmllcnMgPSBmKCk7XG4gIH1cblxufShmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gICQkdHlwZSA6OiBTdHJpbmdcbiAgdmFyICQkdHlwZSA9ICdAQHR5cGUnO1xuXG4gIC8vICB0eXBlIDo6IEFueSAtPiBTdHJpbmdcbiAgZnVuY3Rpb24gdHlwZSh4KSB7XG4gICAgcmV0dXJuIHggIT0gbnVsbCAmJlxuICAgICAgICAgICB4LmNvbnN0cnVjdG9yICE9IG51bGwgJiZcbiAgICAgICAgICAgeC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgIT09IHggJiZcbiAgICAgICAgICAgdHlwZW9mIHguY29uc3RydWN0b3JbJCR0eXBlXSA9PT0gJ3N0cmluZycgP1xuICAgICAgeC5jb25zdHJ1Y3RvclskJHR5cGVdIDpcbiAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KS5zbGljZSgnW29iamVjdCAnLmxlbmd0aCwgLSddJy5sZW5ndGgpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3NhbmN0dWFyeS1kZWYvbm9kZV9tb2R1bGVzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMvbm9kZV9tb2R1bGVzL3NhbmN0dWFyeS10eXBlLWlkZW50aWZpZXJzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(__webpack_require__(16));\n  } else if (\"function\" === 'function' && __webpack_require__(0) != null) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(16)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Pair a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '7.1.1';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$toString :: Null ~> () -> String\n  function Null$prototype$toString() {\n    return 'null';\n  }\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$toString :: Undefined ~> () -> String\n  function Undefined$prototype$toString() {\n    return 'undefined';\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$toString :: Boolean ~> () -> String\n  function Boolean$prototype$toString() {\n    return typeof this === 'object' ?\n      'new Boolean(' + toString(this.valueOf()) + ')' :\n      this.toString();\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$toString :: Number ~> () -> String\n  function Number$prototype$toString() {\n    return typeof this === 'object' ?\n      'new Number(' + toString(this.valueOf()) + ')' :\n      1 / this === -Infinity ? '-0' : this.toString(10);\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this <= other;\n  }\n\n  //  Date$prototype$toString :: Date ~> () -> String\n  function Date$prototype$toString() {\n    var x = isNaN(this.valueOf()) ? NaN : this.toISOString();\n    return 'new Date(' + toString(x) + ')';\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$toString :: String ~> () -> String\n  function String$prototype$toString() {\n    return typeof this === 'object' ?\n      'new String(' + toString(this.valueOf()) + ')' :\n      JSON.stringify(this);\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var $todo = [x];\n    var $done = [];\n    while ($todo.length > 0) {\n      var xs = f(iterationNext, iterationDone, $todo.shift());\n      var $more = [];\n      for (var idx = 0; idx < xs.length; idx += 1) {\n        (xs[idx].done ? $done : $more).push(xs[idx].value);\n      }\n      Array.prototype.unshift.apply($todo, $more);\n    }\n    return $done;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$toString :: Array a ~> () -> String\n  function Array$prototype$toString() {\n    var reprs = this.map(toString);\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      if (!/^\\d+$/.test(k)) {\n        reprs.push(toString(k) + ': ' + toString(this[k]));\n      }\n    }\n    return '[' + reprs.join(', ') + ']';\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    this.forEach(function(x) { Array.prototype.push.apply(result, f(x)); });\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    return this.reduce(function(acc, x) { return f(acc, x); }, initial);\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$toString :: Arguments ~> String\n  function Arguments$prototype$toString() {\n    var args = Array.prototype.map.call(this, toString).join(', ');\n    return '(function () { return arguments; }(' + args + '))';\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$toString :: Error ~> () -> String\n  function Error$prototype$toString() {\n    return 'new ' + this.name + '(' + toString(this.message) + ')';\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$toString :: StrMap a ~> () -> String\n  function Object$prototype$toString() {\n    var reprs = [];\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      reprs.push(toString(k) + ': ' + toString(this[k]));\n    }\n    return '{' + reprs.join(', ') + '}';\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      prototype: {\n        toString:                   Null$prototype$toString,\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      prototype: {\n        toString:                   Undefined$prototype$toString,\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      prototype: {\n        toString:                   Boolean$prototype$toString,\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      prototype: {\n        toString:                   Number$prototype$toString,\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      prototype: {\n        toString:                   Date$prototype$toString,\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      prototype: {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      prototype: {\n        toString:                   String$prototype$toString,\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      prototype: {\n        toString:                   Array$prototype$toString,\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      prototype: {\n        toString:                   Arguments$prototype$toString,\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      prototype: {\n        toString:                   Error$prototype$toString,\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      prototype: {\n        toString:                   Object$prototype$toString,\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      prototype: {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# toString :: a -> String\n  //.\n  //. Returns a useful string representation of its argument.\n  //.\n  //. Dispatches to the argument's `toString` method if appropriate.\n  //.\n  //. Where practical, `equals(eval(toString(x)), x) = true`.\n  //.\n  //. `toString` implementations are provided for the following built-in types:\n  //. Null, Undefined, Boolean, Number, Date, String, Array, Arguments, Error,\n  //. and Object.\n  //.\n  //. ```javascript\n  //. > toString(-0)\n  //. '-0'\n  //.\n  //. > toString(['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > toString({x: 1, y: 2, z: 3})\n  //. '{\"x\": 1, \"y\": 2, \"z\": 3}'\n  //.\n  //. > toString(Cons(1, Cons(2, Cons(3, Nil))))\n  //. 'Cons(1, Cons(2, Cons(3, Nil)))'\n  //. ```\n  var toString = (function() {\n    //  $seen :: Array Any\n    var $seen = [];\n\n    function call(method, x) {\n      $seen.push(x);\n      try { return method.call(x); } finally { $seen.pop(); }\n    }\n\n    return function toString(x) {\n      if ($seen.indexOf(x) >= 0) return '<Circular>';\n\n      var xType = type(x);\n      if (xType === 'Object') {\n        var result;\n        try { result = call(x.toString, x); } catch (err) {}\n        if (result != null && result !== '[object Object]') return result;\n      }\n\n      return call(implPath([xType, 'prototype', 'toString']) || x.toString, x);\n    };\n  }());\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Pair Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Pair Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# filter :: (Applicative f, Foldable f, Monoid (f a)) => (a -> Boolean, f a) -> f a\n  //.\n  //. Filters its second argument in accordance with the given predicate.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`filterM`](#filterM).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //. ```\n  function filter(pred, m) {\n    //  Fast path for arrays.\n    if (Array.isArray(m)) return m.filter(function(x) { return pred(x); });\n    var M = m.constructor;\n    return reduce(function(m, x) { return pred(x) ? concat(m, of(M, x)) : m; },\n                  empty(M),\n                  m);\n  }\n\n  //# filterM :: (Alternative m, Monad m) => (a -> Boolean, m a) -> m a\n  //.\n  //. Filters its second argument in accordance with the given predicate.\n  //.\n  //. This function is derived from [`of`](#of), [`chain`](#chain), and\n  //. [`zero`](#zero).\n  //.\n  //. See also [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > filterM(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filterM(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filterM(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filterM(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filterM(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filterM(pred, m) {\n    var M = m.constructor;\n    var z = zero(M);\n    return chain(function(x) { return pred(x) ? of(M, x) : z; }, m);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(xs, x) {\n      var fx = f(x);\n      var lower = 0;\n      var upper = xs.length;\n      while (lower < upper) {\n        var idx = Math.floor((lower + upper) / 2);\n        if (lte(xs[idx].fx, fx)) lower = idx + 1; else upper = idx;\n      }\n      xs.splice(lower, 0, {x: x, fx: fx});\n      return xs;\n    }, [], foldable);\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (var idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# takeWhile :: (Applicative f, Foldable f, Monoid (f a)) => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first inner value which does not satisfy the predicate, and\n  //. all subsequent inner values.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, foldable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, foldable);\n  }\n\n  //# dropWhile :: (Applicative f, Foldable f, Monoid (f a)) => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first inner value which does not satisfy the predicate, and\n  //. all subsequent inner values.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, foldable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, foldable);\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    toString: toString,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    map: map,\n    bimap: bimap,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    filter: filter,\n    filterM: filterM,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      https://github.com/fantasyland/fantasy-land#alt\n//. [Alternative]:              https://github.com/fantasyland/fantasy-land#alternative\n//. [Applicative]:              https://github.com/fantasyland/fantasy-land#applicative\n//. [Apply]:                    https://github.com/fantasyland/fantasy-land#apply\n//. [Bifunctor]:                https://github.com/fantasyland/fantasy-land#bifunctor\n//. [Category]:                 https://github.com/fantasyland/fantasy-land#category\n//. [Chain]:                    https://github.com/fantasyland/fantasy-land#chain\n//. [ChainRec]:                 https://github.com/fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  https://github.com/fantasyland/fantasy-land#comonad\n//. [Contravariant]:            https://github.com/fantasyland/fantasy-land#contravariant\n//. [Extend]:                   https://github.com/fantasyland/fantasy-land#extend\n//. [FL]:                       https://github.com/fantasyland/fantasy-land\n//. [Foldable]:                 https://github.com/fantasyland/fantasy-land#foldable\n//. [Functor]:                  https://github.com/fantasyland/fantasy-land#functor\n//. [Group]:                    https://github.com/fantasyland/fantasy-land#group\n//. [Monad]:                    https://github.com/fantasyland/fantasy-land#monad\n//. [Monoid]:                   https://github.com/fantasyland/fantasy-land#monoid\n//. [Ord]:                      https://github.com/fantasyland/fantasy-land#ord\n//. [Plus]:                     https://github.com/fantasyland/fantasy-land#plus\n//. [Profunctor]:               https://github.com/fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                https://github.com/fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             https://github.com/fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   https://github.com/fantasyland/fantasy-land#setoid\n//. [Traversable]:              https://github.com/fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       https://github.com/fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        https://github.com/fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     https://github.com/fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     https://github.com/fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  https://github.com/fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   https://github.com/fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    https://github.com/fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: https://github.com/fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     https://github.com/fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    https://github.com/fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    https://github.com/fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   https://github.com/fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/id`]:        https://github.com/fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    https://github.com/fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       https://github.com/fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       https://github.com/fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        https://github.com/fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    https://github.com/fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    https://github.com/fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  https://github.com/fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      https://github.com/fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (\"function\" === 'function' && __webpack_require__(0) != null) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FuY3R1YXJ5L25vZGVfbW9kdWxlcy9zYW5jdHVhcnktdHlwZS1jbGFzc2VzL25vZGVfbW9kdWxlcy9zYW5jdHVhcnktdHlwZS1pZGVudGlmaWVycy9pbmRleC5qcz8zMTM0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gICAgICAgIEBAQEBAQEAgICAgICAgICAgICBAQEBAQEBAICAgICAgICAgQEBcbiAgICAgIEBAICAgICAgIEBAICAgICAgICBAQCAgICAgICBAQCAgICAgIEBAQFxuICAgIEBAICAgQEBAIEBAICBAQCAgICBAQCAgIEBAQCBAQCAgQEAgICBAQEBAQEAgQEAgICBAQEAgIEBAIEBAQCAgICAgIEBAQEBcbiAgIEBAICBAQCAgIEBAQCAgIEBAICBAQCAgQEAgICBAQEAgICBAQCAgIEBAQCAgIEBAICAgQEBAICBAQEAgICBAQCAgQEBAICAgQEBcbiAgIEBAICBAQCAgIEBAQCAgIEBAICBAQCAgQEAgICBAQEAgICBAQCAgIEBAQCAgIEBAICAgQEBAICBAQEAgICBAQCAgQEBAQEBAQEBcbiAgIEBAICBAQCAgIEBAQCAgQEAgICBAQCAgQEAgICBAQEAgIEBAICAgIEBAQCAgIEBAICAgQEBAICBAQEAgICBAQCAgQEBAXG4gICAgQEAgICBAQEAgQEBAQEAgICAgIEBAICAgQEBAIEBAQEBAICAgICAgQEBAICAgIEBAQCBAQCAgQEBAQEBAICAgICAgQEBAQEBcbiAgICAgIEBAICAgICAgICAgICAgICAgICBAQCAgICAgICAgICAgICAgICAgICAgICAgICAgIEBAICBAQFxuICAgICAgICBAQEBAQEBAICAgICAgICAgICAgQEBAQEBAQCAgICAgICAgICAgICAgIEBAQEBAICAgIEBAXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8vLiAjIHNhbmN0dWFyeS10eXBlLWlkZW50aWZpZXJzXG4vLy5cbi8vLiBBIHR5cGUgaXMgYSBzZXQgb2YgdmFsdWVzLiBCb29sZWFuLCBmb3IgZXhhbXBsZSwgaXMgdGhlIHR5cGUgY29tcHJpc2luZ1xuLy8uIGB0cnVlYCBhbmQgYGZhbHNlYC4gQSB2YWx1ZSBtYXkgYmUgYSBtZW1iZXIgb2YgbXVsdGlwbGUgdHlwZXMgKGA0MmAgaXMgYVxuLy8uIG1lbWJlciBvZiBOdW1iZXIsIFBvc2l0aXZlTnVtYmVyLCBJbnRlZ2VyLCBhbmQgbWFueSBvdGhlciB0eXBlcykuXG4vLy5cbi8vLiBJbiBjZXJ0YWluIHNpdHVhdGlvbnMgaXQgaXMgdXNlZnVsIHRvIGRpdmlkZSBKYXZhU2NyaXB0IHZhbHVlcyBpbnRvXG4vLy4gbm9uLW92ZXJsYXBwaW5nIHR5cGVzLiBUaGUgbGFuZ3VhZ2UgcHJvdmlkZXMgdHdvIGNvbnN0cnVjdHMgZm9yIHRoaXNcbi8vLiBwdXJwb3NlOiB0aGUgW2B0eXBlb2ZgXVsxXSBvcGVyYXRvciBhbmQgW2BPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYF1bMl0uXG4vLy4gRWFjaCBoYXMgcHJvcyBhbmQgY29ucywgYnV0IG5laXRoZXIgc3VwcG9ydHMgdXNlci1kZWZpbmVkIHR5cGVzLlxuLy8uXG4vLy4gVGhpcyBwYWNrYWdlIHNwZWNpZmllcyBhbiBbYWxnb3JpdGhtXVszXSBmb3IgZGVyaXZpbmcgYSBfdHlwZSBpZGVudGlmaWVyX1xuLy8uIGZyb20gYW55IEphdmFTY3JpcHQgdmFsdWUsIGFuZCBleHBvcnRzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBhbGdvcml0aG0uXG4vLy4gQXV0aG9ycyBvZiBhbGdlYnJhaWMgZGF0YSB0eXBlcyBtYXkgZm9sbG93IHRoaXMgc3BlY2lmaWNhdGlvbiBpbiBvcmRlciB0b1xuLy8uIG1ha2UgdGhlaXIgZGF0YSB0eXBlcyBjb21wYXRpYmxlIHdpdGggdGhlIGFsZ29yaXRobS5cbi8vLlxuLy8uICMjIyBBbGdvcml0aG1cbi8vLlxuLy8uIDEuICBUYWtlIGFueSBKYXZhU2NyaXB0IHZhbHVlIGB4YC5cbi8vLlxuLy8uIDIuICBJZiBgeGAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLCBnbyB0byBzdGVwIDYuXG4vLy5cbi8vLiAzLiAgSWYgYHguY29uc3RydWN0b3JgIGV2YWx1YXRlcyB0byBgbnVsbGAgb3IgYHVuZGVmaW5lZGAsIGdvIHRvIHN0ZXAgNi5cbi8vLlxuLy8uIDQuICBJZiBgeC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHhgLCBnbyB0byBzdGVwIDYuIFRoaXMgY2hlY2sgcHJldmVudHMgYVxuLy8uICAgICBwcm90b3R5cGUgb2JqZWN0IGZyb20gYmVpbmcgY29uc2lkZXJlZCBhIG1lbWJlciBvZiBpdHMgYXNzb2NpYXRlZCB0eXBlLlxuLy8uXG4vLy4gNS4gIElmIGB0eXBlb2YgeC5jb25zdHJ1Y3RvclsnQEB0eXBlJ11gIGV2YWx1YXRlcyB0byBgJ3N0cmluZydgLCByZXR1cm5cbi8vLiAgICAgdGhlIHZhbHVlIG9mIGB4LmNvbnN0cnVjdG9yWydAQHR5cGUnXWAuXG4vLy5cbi8vLiA2LiAgUmV0dXJuIHRoZSBbYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXVsyXSByZXByZXNlbnRhdGlvbiBvZiBgeGBcbi8vLiAgICAgd2l0aG91dCB0aGUgbGVhZGluZyBgJ1tvYmplY3QgJ2AgYW5kIHRyYWlsaW5nIGAnXSdgLlxuLy8uXG4vLy4gIyMjIENvbXBhdGliaWxpdHlcbi8vLlxuLy8uIEZvciBhbiBhbGdlYnJhaWMgZGF0YSB0eXBlIHRvIGJlIGNvbXBhdGlibGUgd2l0aCB0aGUgW2FsZ29yaXRobV1bM106XG4vLy5cbi8vLiAgIC0gZXZlcnkgbWVtYmVyIG9mIHRoZSB0eXBlIG11c3QgaGF2ZSBhIGBjb25zdHJ1Y3RvcmAgcHJvcGVydHkgcG9pbnRpbmdcbi8vLiAgICAgdG8gYW4gb2JqZWN0IGtub3duIGFzIHRoZSBfdHlwZSByZXByZXNlbnRhdGl2ZV87XG4vLy5cbi8vLiAgIC0gdGhlIHR5cGUgcmVwcmVzZW50YXRpdmUgbXVzdCBoYXZlIGEgYEBAdHlwZWAgcHJvcGVydHk7IGFuZFxuLy8uXG4vLy4gICAtIHRoZSB0eXBlIHJlcHJlc2VudGF0aXZlJ3MgYEBAdHlwZWAgcHJvcGVydHkgKHRoZSBfdHlwZSBpZGVudGlmaWVyXylcbi8vLiAgICAgbXVzdCBiZSBhIHN0cmluZyBwcmltaXRpdmUsIGlkZWFsbHkgYCc8bnBtLXBhY2thZ2UtbmFtZT4vPHR5cGUtbmFtZT4nYC5cbi8vLlxuLy8uIEZvciBleGFtcGxlOlxuLy8uXG4vLy4gYGBgamF2YXNjcmlwdFxuLy8uIC8vICBJZGVudGl0eSA6OiBhIC0+IElkZW50aXR5IGFcbi8vLiBmdW5jdGlvbiBJZGVudGl0eSh4KSB7XG4vLy4gICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSWRlbnRpdHkpKSByZXR1cm4gbmV3IElkZW50aXR5KHgpO1xuLy8uICAgdGhpcy52YWx1ZSA9IHg7XG4vLy4gfVxuLy8uXG4vLy4gSWRlbnRpdHlbJ0BAdHlwZSddID0gJ215LXBhY2thZ2UvSWRlbnRpdHknO1xuLy8uIGBgYFxuLy8uXG4vLy4gTm90ZSB0aGF0IGJ5IHVzaW5nIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhlIGBjb25zdHJ1Y3RvcmAgcHJvcGVydHkgaXMgc2V0XG4vLy4gaW1wbGljaXRseSBmb3IgZWFjaCB2YWx1ZSBjcmVhdGVkLiBDb25zdHJ1Y3RvciBmdW5jdGlvbnMgYXJlIGNvbnZlbmllbnQgZm9yXG4vLy4gdGhpcyByZWFzb24sIGJ1dCBhcmUgbm90IHJlcXVpcmVkLiBUaGlzIGRlZmluaXRpb24gaXMgYWxzbyB2YWxpZDpcbi8vLlxuLy8uIGBgYGphdmFzY3JpcHRcbi8vLiAvLyAgSWRlbnRpdHlUeXBlUmVwIDo6IFR5cGVSZXAgSWRlbnRpdHlcbi8vLiB2YXIgSWRlbnRpdHlUeXBlUmVwID0ge1xuLy8uICAgJ0BAdHlwZSc6ICdteS1wYWNrYWdlL0lkZW50aXR5J1xuLy8uIH07XG4vLy5cbi8vLiAvLyAgSWRlbnRpdHkgOjogYSAtPiBJZGVudGl0eSBhXG4vLy4gZnVuY3Rpb24gSWRlbnRpdHkoeCkge1xuLy8uICAgcmV0dXJuIHtjb25zdHJ1Y3RvcjogSWRlbnRpdHlUeXBlUmVwLCB2YWx1ZTogeH07XG4vLy4gfVxuLy8uIGBgYFxuLy8uXG4vLy4gIyMjIFVzYWdlXG4vLy5cbi8vLiBgYGBqYXZhc2NyaXB0XG4vLy4gdmFyIElkZW50aXR5ID0gcmVxdWlyZSgnbXktcGFja2FnZScpLklkZW50aXR5O1xuLy8uIHZhciB0eXBlID0gcmVxdWlyZSgnc2FuY3R1YXJ5LXR5cGUtaWRlbnRpZmllcnMnKTtcbi8vLlxuLy8uIHR5cGUobnVsbCk7ICAgICAgICAgLy8gPT4gJ051bGwnXG4vLy4gdHlwZSh0cnVlKTsgICAgICAgICAvLyA9PiAnQm9vbGVhbidcbi8vLiB0eXBlKFsxLCAyLCAzXSk7ICAgIC8vID0+ICdBcnJheSdcbi8vLiB0eXBlKElkZW50aXR5KTsgICAgIC8vID0+ICdGdW5jdGlvbidcbi8vLiB0eXBlKElkZW50aXR5KDApKTsgIC8vID0+ICdteS1wYWNrYWdlL0lkZW50aXR5J1xuLy8uIGBgYFxuLy8uXG4vLy5cbi8vLiBbMV06IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy90eXBlb2Zcbi8vLiBbMl06IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC90b1N0cmluZ1xuLy8uIFszXTogI2FsZ29yaXRobVxuXG4oZnVuY3Rpb24oZikge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZigpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCAhPSBudWxsKSB7XG4gICAgZGVmaW5lKFtdLCBmKTtcbiAgfSBlbHNlIHtcbiAgICBzZWxmLnNhbmN0dWFyeVR5cGVJZGVudGlmaWVycyA9IGYoKTtcbiAgfVxuXG59KGZ1bmN0aW9uKCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyAgJCR0eXBlIDo6IFN0cmluZ1xuICB2YXIgJCR0eXBlID0gJ0BAdHlwZSc7XG5cbiAgLy8gIHR5cGUgOjogQW55IC0+IFN0cmluZ1xuICBmdW5jdGlvbiB0eXBlKHgpIHtcbiAgICByZXR1cm4geCAhPSBudWxsICYmXG4gICAgICAgICAgIHguY29uc3RydWN0b3IgIT0gbnVsbCAmJlxuICAgICAgICAgICB4LmNvbnN0cnVjdG9yLnByb3RvdHlwZSAhPT0geCAmJlxuICAgICAgICAgICB0eXBlb2YgeC5jb25zdHJ1Y3RvclskJHR5cGVdID09PSAnc3RyaW5nJyA/XG4gICAgICB4LmNvbnN0cnVjdG9yWyQkdHlwZV0gOlxuICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpLnNsaWNlKCdbb2JqZWN0ICcubGVuZ3RoLCAtJ10nLmxlbmd0aCk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcblxufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2FuY3R1YXJ5L25vZGVfbW9kdWxlcy9zYW5jdHVhcnktdHlwZS1jbGFzc2VzL25vZGVfbW9kdWxlcy9zYW5jdHVhcnktdHlwZS1pZGVudGlmaWVycy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adjustHue\", function() { return curriedAdjustHue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"animation\", function() { return animation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"backgroundImages\", function() { return backgroundImages; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"backgrounds\", function() { return backgrounds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"borderColor\", function() { return borderColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"borderRadius\", function() { return borderRadius; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"borderStyle\", function() { return borderStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"borderWidth\", function() { return borderWidth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buttons\", function() { return buttons; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearFix\", function() { return clearFix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"complement\", function() { return complement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"darken\", function() { return curriedDarken; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"desaturate\", function() { return curriedDesaturate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"directionalProperty\", function() { return directionalProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ellipsis\", function() { return ellipsis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"em\", function() { return em; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fontFace\", function() { return fontFace; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLuminance\", function() { return getLuminance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"grayscale\", function() { return grayscale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hideText\", function() { return hideText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hideVisually\", function() { return hideVisually; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hiDPI\", function() { return hiDPI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hsl\", function() { return hsl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hsla\", function() { return hsla; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lighten\", function() { return curriedLighten; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"margin\", function() { return margin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mix\", function() { return curriedMix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modularScale\", function() { return modularScale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"opacify\", function() { return curriedOpacify; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"padding\", function() { return padding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseToHsl\", function() { return parseToHsl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseToRgb\", function() { return parseToRgb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"placeholder\", function() { return placeholder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"position\", function() { return position; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"radialGradient\", function() { return radialGradient; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readableColor\", function() { return curriedReadableColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rem\", function() { return rem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"retinaImage\", function() { return retinaImage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgb\", function() { return rgb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgba\", function() { return rgba; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"saturate\", function() { return curriedSaturate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selection\", function() { return selection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setHue\", function() { return curriedSetHue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setLightness\", function() { return curriedSetLightness; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setSaturation\", function() { return curriedSetSaturation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shade\", function() { return curriedShade; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"size\", function() { return size; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stripUnit\", function() { return stripUnit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"textInputs\", function() { return textInputs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"timingFunctions\", function() { return timingFunctions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tint\", function() { return curriedTint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toColorString\", function() { return toColorString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transitions\", function() { return transitions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transparentize\", function() { return curriedTransparentize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"triangle\", function() { return triangle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"wordWrap\", function() { return wordWrap; });\n//      \n\n// @private\nfunction capitalizeString(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n//      \nvar positionMap = ['Top', 'Right', 'Bottom', 'Left'];\n\nfunction generateProperty(property, position) {\n  if (!property) return position.toLowerCase();\n  var splitProperty = property.split('-');\n  if (splitProperty.length > 1) {\n    splitProperty.splice(1, 0, position);\n    return splitProperty.reduce(function (acc, val) {\n      return '' + acc + capitalizeString(val);\n    });\n  }\n  var joinedProperty = property.replace(/([a-z])([A-Z])/g, '$1' + position + '$2');\n  return property === joinedProperty ? '' + property + position : joinedProperty;\n}\n\nfunction generateStyles(property, valuesWithDefaults) {\n  var styles = {};\n  for (var i = 0; i < valuesWithDefaults.length; i += 1) {\n    if (valuesWithDefaults[i] || valuesWithDefaults[i] === 0) {\n      styles[generateProperty(property, positionMap[i])] = valuesWithDefaults[i];\n    }\n  }\n  return styles;\n}\n\n/**\n * A helper that enables shorthand for direction based properties. It accepts a property (hyphenated or camelCased) and up to four values that map to top, right, bottom, and left, respectively. You can optionally pass an empty string to get only the directional values as properties. You can also optionally pass a null argument for a directional value to ignore it.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...directionalProperty('padding', '12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${directionalProperty('padding', '12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'paddingTop': '12px',\n *   'paddingRight': '24px',\n *   'paddingBottom': '36px',\n *   'paddingLeft': '48px'\n * }\n */\n\nfunction directionalProperty(property) {\n  for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  //  prettier-ignore\n  var firstValue = values[0],\n      _values$ = values[1],\n      secondValue = _values$ === undefined ? firstValue : _values$,\n      _values$2 = values[2],\n      thirdValue = _values$2 === undefined ? firstValue : _values$2,\n      _values$3 = values[3],\n      fourthValue = _values$3 === undefined ? secondValue : _values$3;\n\n  var valuesWithDefaults = [firstValue, secondValue, thirdValue, fourthValue];\n  return generateStyles(property, valuesWithDefaults);\n}\n\n//      \n\n/**\n * Check if a string ends with something\n * @private\n */\nvar endsWith = function (string, suffix) {\n  return string.substr(-suffix.length) === suffix;\n};\n\n//      \n\n/**\n * Strip the unit from a given CSS value, returning just the number. (or the original value if an invalid string was passed)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   '--dimension': stripUnit('100px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   --dimension: ${stripUnit('100px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   '--dimension': 100\n * }\n */\n\nfunction stripUnit(value) {\n  var unitlessValue = parseFloat(value);\n  if (isNaN(unitlessValue)) return value;\n  return unitlessValue;\n}\n\n//      \n\n/**\n * Factory function that creates pixel-to-x converters\n * @private\n */\nvar pxtoFactory = function pxtoFactory(to) {\n  return function (pxval) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '16px';\n\n    var newPxval = pxval;\n    var newBase = base;\n    if (typeof pxval === 'string') {\n      if (!endsWith(pxval, 'px')) {\n        throw new Error('Expected a string ending in \"px\" or a number passed as the first argument to ' + to + '(), got \"' + pxval + '\" instead.');\n      }\n      newPxval = stripUnit(pxval);\n    }\n\n    if (typeof base === 'string') {\n      if (!endsWith(base, 'px')) {\n        throw new Error('Expected a string ending in \"px\" or a number passed as the second argument to ' + to + '(), got \"' + base + '\" instead.');\n      }\n      newBase = stripUnit(base);\n    }\n\n    if (typeof newPxval === 'string') {\n      throw new Error('Passed invalid pixel value (\"' + pxval + '\") to ' + to + '(), please pass a value like \"12px\" or 12.');\n    }\n\n    if (typeof newBase === 'string') {\n      throw new Error('Passed invalid base value (\"' + base + '\") to ' + to + '(), please pass a value like \"12px\" or 12.');\n    }\n\n    return '' + newPxval / newBase + to;\n  };\n};\n\n//      \n/**\n * Convert pixel value to ems. The default base value is 16px, but can be changed by passing a\n * second argument to the function.\n * @function\n * @param {string|number} pxval\n * @param {string|number} [base='16px']\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': em('16px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${em('16px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '1em'\n * }\n */\n\nvar em = /*#__PURE__*/pxtoFactory('em');\n\n//      \n\nvar ratioNames = {\n  minorSecond: 1.067,\n  majorSecond: 1.125,\n  minorThird: 1.2,\n  majorThird: 1.25,\n  perfectFourth: 1.333,\n  augFourth: 1.414,\n  perfectFifth: 1.5,\n  minorSixth: 1.6,\n  goldenSection: 1.618,\n  majorSixth: 1.667,\n  minorSeventh: 1.778,\n  majorSeventh: 1.875,\n  octave: 2,\n  majorTenth: 2.5,\n  majorEleventh: 2.667,\n  majorTwelfth: 3,\n  doubleOctave: 4\n};\n\n/** */\n\n/**\n * Establish consistent measurements and spacial relationships throughout your projects by incrementing up or down a defined scale. We provide a list of commonly used scales as pre-defined variables, see below.\n * @example\n * // Styles as object usage\n * const styles = {\n *    // Increment two steps up the default scale\n *   'fontSize': modularScale(2)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *    // Increment two steps up the default scale\n *   fontSize: ${modularScale(2)}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'fontSize': '1.77689em'\n * }\n */\nfunction modularScale(steps) {\n  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1em';\n  var ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'perfectFourth';\n\n  if (typeof steps !== 'number') {\n    throw new Error('Please provide a number of steps to the modularScale helper.');\n  }\n  if (typeof ratio === 'string' && !ratioNames[ratio]) {\n    throw new Error('Please pass a number or one of the predefined scales to the modularScale helper as the ratio.');\n  }\n\n  var realBase = typeof base === 'string' ? stripUnit(base) : base;\n  var realRatio = typeof ratio === 'string' ? ratioNames[ratio] : ratio;\n\n  if (typeof realBase === 'string') {\n    throw new Error('Invalid value passed as base to modularScale, expected number or em string but got \"' + base + '\"');\n  }\n\n  return realBase * Math.pow(realRatio, steps) + 'em';\n}\n\n//      \n\n/**\n * Convert pixel value to rems. The default base value is 16px, but can be changed by passing a\n * second argument to the function.\n * @function\n * @param {string|number} pxval\n * @param {string|number} [base='16px']\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': rem('16px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${rem('16px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '1rem'\n * }\n */\n\nvar rem = /*#__PURE__*/pxtoFactory('rem');\n\n//      \n\n/**\n * CSS to contain a float (credit to CSSMojo).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *    ...clearFix(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${clearFix()}\n * `\n *\n * // CSS as JS Output\n *\n * '&::after': {\n *   'clear': 'both',\n *   'content': '\"\"',\n *   'display': 'table'\n * }\n */\n\nfunction clearFix() {\n  var _ref;\n\n  var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '&';\n\n  var pseudoSelector = parent + '::after';\n  return _ref = {}, _ref[pseudoSelector] = {\n    clear: 'both',\n    content: '\"\"',\n    display: 'table'\n  }, _ref;\n}\n\n//      \n\n/**\n * CSS to represent truncated text with an ellipsis.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...ellipsis('250px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${ellipsis('250px')}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   'display': 'inline-block',\n *   'maxWidth': '250px',\n *   'overflow': 'hidden',\n *   'textOverflow': 'ellipsis',\n *   'whiteSpace': 'nowrap',\n *   'wordWrap': 'normal'\n * }\n */\n\nfunction ellipsis() {\n  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '100%';\n\n  return {\n    display: 'inline-block',\n    maxWidth: width,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal'\n  };\n}\n\n//      \n\n/** */\n\nfunction generateFileReferences(fontFilePath, fileFormats) {\n  var fileFontReferences = fileFormats.map(function (format) {\n    return 'url(\"' + fontFilePath + '.' + format + '\")';\n  });\n  return fileFontReferences.join(', ');\n}\n\nfunction generateLocalReferences(localFonts) {\n  var localFontReferences = localFonts.map(function (font) {\n    return 'local(\"' + font + '\")';\n  });\n  return localFontReferences.join(', ');\n}\n\nfunction generateSources(fontFilePath, localFonts, fileFormats) {\n  var fontReferences = [];\n  if (localFonts) fontReferences.push(generateLocalReferences(localFonts));\n  if (fontFilePath) {\n    fontReferences.push(generateFileReferences(fontFilePath, fileFormats));\n  }\n  return fontReferences.join(', ');\n}\n\n/**\n * CSS for a @font-face declaration.\n *\n * @example\n * // Styles as object basic usage\n * const styles = {\n *    ...fontFace({\n *      'fontFamily': 'Sans-Pro'\n *      'fontFilePath': 'path/to/file'\n *    })\n * }\n *\n * // styled-components basic usage\n * injectGlobal`${\n *   fontFace({\n *     'fontFamily': 'Sans-Pro'\n *     'fontFilePath': 'path/to/file'\n *   }\n * )}`\n *\n * // CSS as JS Output\n *\n * '@font-face': {\n *   'fontFamily': 'Sans-Pro',\n *   'src': 'url(\"path/to/file.eot\"), url(\"path/to/file.woff2\"), url(\"path/to/file.woff\"), url(\"path/to/file.ttf\"), url(\"path/to/file.svg\")',\n * }\n */\n\nfunction fontFace(_ref) {\n  var fontFamily = _ref.fontFamily,\n      fontFilePath = _ref.fontFilePath,\n      fontStretch = _ref.fontStretch,\n      fontStyle = _ref.fontStyle,\n      fontVariant = _ref.fontVariant,\n      fontWeight = _ref.fontWeight,\n      _ref$fileFormats = _ref.fileFormats,\n      fileFormats = _ref$fileFormats === undefined ? ['eot', 'woff2', 'woff', 'ttf', 'svg'] : _ref$fileFormats,\n      localFonts = _ref.localFonts,\n      unicodeRange = _ref.unicodeRange;\n\n  // Error Handling\n  if (!fontFamily) throw new Error('fontFace expects a name of a font-family.');\n  if (!fontFilePath && !localFonts) {\n    throw new Error('fontFace expects either the path to the font file(s) or a name of a local copy.');\n  }\n  if (localFonts && !Array.isArray(localFonts)) {\n    throw new Error('fontFace expects localFonts to be an array.');\n  }\n  if (!Array.isArray(fileFormats)) {\n    throw new Error('fontFace expects fileFormats to be an array.');\n  }\n\n  var fontFaceDeclaration = {\n    '@font-face': {\n      fontFamily: fontFamily,\n      src: generateSources(fontFilePath, localFonts, fileFormats),\n      unicodeRange: unicodeRange,\n      fontStretch: fontStretch,\n      fontStyle: fontStyle,\n      fontVariant: fontVariant,\n      fontWeight: fontWeight\n    }\n  };\n\n  // Removes undefined fields for cleaner css object.\n  return JSON.parse(JSON.stringify(fontFaceDeclaration));\n}\n\n//      \n\n/**\n * CSS to hide text to show a background image in a SEO-friendly way.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'backgroundImage': 'url(logo.png)',\n *   ...hideText(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   backgroundImage: url(logo.png);\n *   ${hideText()};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'backgroundImage': 'url(logo.png)',\n *   'textIndent': '101%',\n *   'overflow': 'hidden',\n *   'whiteSpace': 'nowrap',\n * }\n */\n\nfunction hideText() {\n  return {\n    textIndent: '101%',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap'\n  };\n}\n\n//      \n\n/**\n * CSS to hide content visually but remain accessible to screen readers.\n * from [HTML5 Boilerplate](https://github.com/h5bp/html5-boilerplate/blob/9a176f57af1cfe8ec70300da4621fb9b07e5fa31/src/css/main.css#L121)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...hideVisually(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${hideVisually()};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'border': '0',\n *   'clip': 'rect(0 0 0 0)',\n *   'clipPath': 'inset(50%)',\n *   'height': '1px',\n *   'margin': '-1px',\n *   'overflow': 'hidden',\n *   'padding': '0',\n *   'position': 'absolute',\n *   'whiteSpace': 'nowrap',\n *   'width': '1px',\n * }\n */\n\nfunction hideVisually() {\n  return {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    clipPath: 'inset(50%)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    whiteSpace: 'nowrap',\n    width: '1px'\n  };\n}\n\n//      \n\n/**\n * Generates a media query to target HiDPI devices.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *  [hiDPI(1.5)]: {\n *    width: 200px;\n *  }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${hiDPI(1.5)} {\n *     width: 200px;\n *   }\n * `\n *\n * // CSS as JS Output\n *\n * '@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n *  only screen and (min--moz-device-pixel-ratio: 1.5),\n *  only screen and (-o-min-device-pixel-ratio: 1.5/1),\n *  only screen and (min-resolution: 144dpi),\n *  only screen and (min-resolution: 1.5dppx)': {\n *   'width': '200px',\n * }\n */\n\nfunction hiDPI() {\n  var ratio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.3;\n\n  return \"\\n    @media only screen and (-webkit-min-device-pixel-ratio: \" + ratio + \"),\\n    only screen and (min--moz-device-pixel-ratio: \" + ratio + \"),\\n    only screen and (-o-min-device-pixel-ratio: \" + ratio + \"/1),\\n    only screen and (min-resolution: \" + Math.round(ratio * 96) + \"dpi),\\n    only screen and (min-resolution: \" + ratio + \"dppx)\\n  \";\n}\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nvar _opinionatedRules;\nvar _abbrTitle;\nvar _unopinionatedRules;\n\n//      \nvar opinionatedRules = (_opinionatedRules = {\n  html: {\n    fontFamily: 'sans-serif'\n  },\n\n  body: {\n    margin: '0'\n  }\n\n}, _opinionatedRules['a:active,\\n  a:hover'] = {\n  outlineWidth: '0'\n}, _opinionatedRules['button,\\n  input,\\n  optgroup,\\n  select,\\n  textarea'] = {\n  fontFamily: 'sans-serif',\n  fontSize: '100%',\n  lineHeight: '1.15'\n}, _opinionatedRules);\n\nvar unopinionatedRules = (_unopinionatedRules = {\n  html: {\n    lineHeight: '1.15',\n    textSizeAdjust: '100%'\n  }\n\n}, _unopinionatedRules['article,\\n  aside,\\n  footer,\\n  header,\\n  nav,\\n  section'] = {\n  display: 'block'\n}, _unopinionatedRules.h1 = {\n  fontSize: '2em',\n  margin: '0.67em 0'\n}, _unopinionatedRules['figcaption,\\n  figure,\\n  main'] = {\n  display: 'block'\n}, _unopinionatedRules.figure = {\n  margin: '1em 40px'\n}, _unopinionatedRules.hr = {\n  boxSizing: 'content-box',\n  height: '0',\n  overflow: 'visible'\n}, _unopinionatedRules.pre = {\n  fontFamily: 'monospace, monospace',\n  fontSize: '1em'\n}, _unopinionatedRules.a = {\n  'background-color': 'transparent',\n  '-webkit-text-decoration-skip': 'objects'\n}, _unopinionatedRules['abbr[title]'] = (_abbrTitle = {\n  borderBottom: 'none',\n  textDecoration: 'underline'\n}, _abbrTitle['textDecoration'] = 'underline dotted', _abbrTitle), _unopinionatedRules['b,\\n  strong'] = {\n  fontWeight: 'inherit'\n}, _unopinionatedRules['code,\\n  kbd,\\n  samp'] = {\n  fontFamily: 'monospace, monospace',\n  fontSize: '1em'\n}, _unopinionatedRules.dfn = {\n  fontStyle: 'italic'\n}, _unopinionatedRules.mark = {\n  backgroundColor: '#ff0',\n  color: '#000'\n}, _unopinionatedRules.small = {\n  fontSize: '80%'\n}, _unopinionatedRules['sub,\\n  sup'] = {\n  fontSize: '75%',\n  lineHeight: '0',\n  position: 'relative',\n  verticalAlign: 'baseline'\n}, _unopinionatedRules.sub = {\n  bottom: '-0.25em'\n}, _unopinionatedRules.sup = {\n  top: '-0.5em'\n}, _unopinionatedRules['audio,\\n  video'] = {\n  display: 'inline-block'\n}, _unopinionatedRules['audio:not([controls])'] = {\n  display: 'none',\n  height: '0'\n}, _unopinionatedRules.img = {\n  borderStyle: 'none'\n}, _unopinionatedRules['svg:not(:root)'] = {\n  overflow: 'hidden'\n}, _unopinionatedRules['button,\\n  input,\\n  optgroup,\\n  select,\\n  textarea'] = {\n  margin: '0'\n}, _unopinionatedRules['button,\\n  input'] = {\n  overflow: 'visible'\n}, _unopinionatedRules['button,\\n  select'] = {\n  textTransform: 'none'\n}, _unopinionatedRules['button,\\n  html [type=\"button\"],\\n  [type=\"reset\"],\\n  [type=\"submit\"]'] = {\n  '-webkit-appearance': 'button'\n}, _unopinionatedRules['button::-moz-focus-inner,\\n  [type=\"button\"]::-moz-focus-inner,\\n  [type=\"reset\"]::-moz-focus-inner,\\n  [type=\"submit\"]::-moz-focus-inner'] = {\n  borderStyle: 'none',\n  padding: '0'\n}, _unopinionatedRules['button:-moz-focusring,\\n  [type=\"button\"]:-moz-focusring,\\n  [type=\"reset\"]:-moz-focusring,\\n  [type=\"submit\"]:-moz-focusring'] = {\n  outline: '1px dotted ButtonText'\n}, _unopinionatedRules.fieldset = {\n  border: '1px solid #c0c0c0',\n  margin: '0 2px',\n  padding: '0.35em 0.625em 0.75em'\n}, _unopinionatedRules.legend = {\n  boxSizing: 'border-box',\n  color: 'inherit',\n  display: 'table',\n  maxWidth: '100%',\n  padding: '0',\n  whiteSpace: 'normal'\n}, _unopinionatedRules.progress = {\n  display: 'inline-block',\n  verticalAlign: 'baseline'\n}, _unopinionatedRules.textarea = {\n  overflow: 'auto'\n}, _unopinionatedRules['[type=\"checkbox\"],\\n  [type=\"radio\"]'] = {\n  boxSizing: 'border-box',\n  padding: '0'\n}, _unopinionatedRules['[type=\"number\"]::-webkit-inner-spin-button,\\n  [type=\"number\"]::-webkit-outer-spin-button'] = {\n  height: 'auto'\n}, _unopinionatedRules['[type=\"search\"]'] = {\n  '-webkit-appearance': 'textfield',\n  outlineOffset: '-2px'\n}, _unopinionatedRules['[type=\"search\"]::-webkit-search-cancel-button,\\n  [type=\"search\"]::-webkit-search-decoration'] = {\n  '-webkit-appearance': 'none'\n}, _unopinionatedRules['::-webkit-file-upload-button'] = {\n  '-webkit-appearance': 'button',\n  font: 'inherit'\n}, _unopinionatedRules['details,\\n  menu'] = {\n  display: 'block'\n}, _unopinionatedRules.summary = {\n  display: 'list-item'\n}, _unopinionatedRules.canvas = {\n  display: 'inline-block'\n}, _unopinionatedRules.template = {\n  display: 'none'\n}, _unopinionatedRules['[hidden]'] = {\n  display: 'none'\n}, _unopinionatedRules);\n\nfunction mergeRules(baseRules, additionalRules) {\n  var mergedRules = _extends({}, baseRules);\n  Object.keys(additionalRules).forEach(function (key) {\n    if (mergedRules[key]) {\n      mergedRules[key] = _extends({}, mergedRules[key], additionalRules[key]);\n    } else {\n      mergedRules[key] = _extends({}, additionalRules[key]);\n    }\n  });\n  return mergedRules;\n}\n\n/**\n * CSS to normalize abnormalities across browsers (normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *    ...normalize(),\n * }\n *\n * // styled-components usage\n * injectGlobal`${normalize()}`\n *\n * // CSS as JS Output\n *\n * html {\n *   fontFamily: 'sans-serif',\n *   lineHeight: 1.15,\n *   textSizeAdjust: 100%,\n * } ...\n */\nfunction normalize(excludeOpinionated) {\n  if (excludeOpinionated) return unopinionatedRules;\n  return mergeRules(unopinionatedRules, opinionatedRules);\n}\n\n//      \n\n/**\n * CSS to style the placeholder pseudo-element.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...placeholder({'color': 'blue'})\n * }\n *\n * // styled-components usage\n * const div = styled.input`\n *    ${placeholder({'color': 'blue'})}\n * `\n *\n * // CSS as JS Output\n *\n * 'input': {\n *   '&:-moz-placeholder': {\n *     'color': 'blue',\n *   },\n *   '&:-ms-input-placeholder': {\n *     'color': 'blue',\n *   },\n *   '&::-moz-placeholder': {\n *     'color': 'blue',\n *   },\n *   '&::-webkit-input-placeholder': {\n *     'color': 'blue',\n *   },\n * },\n */\n\nfunction placeholder(styles) {\n  var _ref;\n\n  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '&';\n\n  return _ref = {}, _ref[parent + '::-webkit-input-placeholder'] = _extends({}, styles), _ref[parent + ':-moz-placeholder'] = _extends({}, styles), _ref[parent + '::-moz-placeholder'] = _extends({}, styles), _ref[parent + ':-ms-input-placeholder'] = _extends({}, styles), _ref;\n}\n\nvar _templateObject = /*#__PURE__*/ taggedTemplateLiteralLoose(['radial-gradient(', '', '', '', ')'], ['radial-gradient(', '', '', '', ')']);\n\n//      \n\n/** */\n\nfunction parseFallback(colorStops) {\n  return colorStops[0].split(' ')[0];\n}\n\nfunction constructGradientValue(literals) {\n  var template = '';\n  for (var i = 0; i < literals.length; i += 1) {\n    template += literals[i];\n    // Adds leading coma if properties preceed color-stops\n    if (i === 3 && (arguments.length <= i + 1 ? undefined : arguments[i + 1]) && ((arguments.length <= 1 ? undefined : arguments[1]) || (arguments.length <= 2 ? undefined : arguments[2]) || (arguments.length <= 3 ? undefined : arguments[3]))) {\n      template = template.slice(0, -1);\n      template += ', ' + (arguments.length <= i + 1 ? undefined : arguments[i + 1]);\n      // No trailing space if color-stops is the only param provided\n    } else if (i === 3 && (arguments.length <= i + 1 ? undefined : arguments[i + 1]) && !(arguments.length <= 1 ? undefined : arguments[1]) && !(arguments.length <= 2 ? undefined : arguments[2]) && !(arguments.length <= 3 ? undefined : arguments[3])) {\n      template += '' + (arguments.length <= i + 1 ? undefined : arguments[i + 1]);\n      // Only adds substitution if it is defined\n    } else if (arguments.length <= i + 1 ? undefined : arguments[i + 1]) {\n      template += (arguments.length <= i + 1 ? undefined : arguments[i + 1]) + ' ';\n    }\n  }\n  return template.trim();\n}\n\n/**\n * CSS for declaring a radial gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })}\n *`\n *\n * // CSS as JS Output\n *\n * div: {\n *   'backgroundColor': '#00FFFF',\n *   'backgroundImage': 'radial-gradient(center ellipse farthest-corner at 45px 45px, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n * }\n */\n\nfunction radialGradient(_ref) {\n  var colorStops = _ref.colorStops,\n      extent = _ref.extent,\n      fallback = _ref.fallback,\n      position = _ref.position,\n      shape = _ref.shape;\n\n  if (!colorStops || colorStops.length < 2) {\n    throw new Error('radialGradient requries at least 2 color-stops to properly render.');\n  }\n  return {\n    backgroundColor: fallback || parseFallback(colorStops),\n    backgroundImage: constructGradientValue(_templateObject, position, shape, extent, colorStops.join(', '))\n  };\n}\n\n//      \n\n/**\n * A helper to generate a retina background image and non-retina\n * background image. The retina background image will output to a HiDPI media query. The mixin uses\n * a _2x.png filename suffix by default.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *  ...retinaImage('my-img')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${retinaImage('my-img')}\n * `\n *\n * // CSS as JS Output\n * div {\n *   backgroundImage: 'url(my-img.png)',\n *   '@media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n *    only screen and (min--moz-device-pixel-ratio: 1.3),\n *    only screen and (-o-min-device-pixel-ratio: 1.3/1),\n *    only screen and (min-resolution: 144dpi),\n *    only screen and (min-resolution: 1.5dppx)': {\n *     backgroundImage: 'url(my-img_2x.png)',\n *   }\n * }\n */\nfunction retinaImage(filename, backgroundSize) {\n  var extension = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'png';\n\n  var _ref;\n\n  var retinaFilename = arguments[3];\n  var retinaSuffix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '_2x';\n\n  if (!filename) {\n    throw new Error('Please supply a filename to retinaImage() as the first argument.');\n  }\n  // Replace the dot at the beginning of the passed extension if one exists\n  var ext = extension.replace(/^\\./, '');\n  var rFilename = retinaFilename ? retinaFilename + '.' + ext : '' + filename + retinaSuffix + '.' + ext;\n\n  return _ref = {\n    backgroundImage: 'url(' + filename + '.' + ext + ')'\n  }, _ref[hiDPI()] = {\n    backgroundImage: 'url(' + rFilename + ')',\n    backgroundSize: backgroundSize\n  }, _ref;\n}\n\n//      \n\n/**\n * CSS to style the selection pseudo-element.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...selection({\n *     'backgroundColor': 'blue'\n *   }, 'section')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${selection({'backgroundColor': 'blue'}, 'section')}\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'section::-moz-selection': {\n *     'backgroundColor':'blue',\n *   },\n *   'section::selection': {\n *     'backgroundColor': 'blue',\n *   }\n * }\n */\n\nfunction selection(styles) {\n  var _ref;\n\n  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  return _ref = {}, _ref[parent + '::-moz-selection'] = _extends({}, styles), _ref[parent + '::selection'] = _extends({}, styles), _ref;\n}\n\n//      \n\n/* eslint-disable key-spacing */\nvar functionsMap = {\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n  easeInCirc: 'cubic-bezier(0.600,  0.040, 0.980, 0.335)',\n  easeInCubic: 'cubic-bezier(0.550,  0.055, 0.675, 0.190)',\n  easeInExpo: 'cubic-bezier(0.950,  0.050, 0.795, 0.035)',\n  easeInQuad: 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n  easeInQuart: 'cubic-bezier(0.895,  0.030, 0.685, 0.220)',\n  easeInQuint: 'cubic-bezier(0.755,  0.050, 0.855, 0.060)',\n  easeInSine: 'cubic-bezier(0.470,  0.000, 0.745, 0.715)',\n\n  easeOutBack: 'cubic-bezier(0.175,  0.885, 0.320, 1.275)',\n  easeOutCubic: 'cubic-bezier(0.215,  0.610, 0.355, 1.000)',\n  easeOutCirc: 'cubic-bezier(0.075,  0.820, 0.165, 1.000)',\n  easeOutExpo: 'cubic-bezier(0.190,  1.000, 0.220, 1.000)',\n  easeOutQuad: 'cubic-bezier(0.250,  0.460, 0.450, 0.940)',\n  easeOutQuart: 'cubic-bezier(0.165,  0.840, 0.440, 1.000)',\n  easeOutQuint: 'cubic-bezier(0.230,  1.000, 0.320, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390,  0.575, 0.565, 1.000)',\n\n  easeInOutBack: 'cubic-bezier(0.680, -0.550, 0.265, 1.550)',\n  easeInOutCirc: 'cubic-bezier(0.785,  0.135, 0.150, 0.860)',\n  easeInOutCubic: 'cubic-bezier(0.645,  0.045, 0.355, 1.000)',\n  easeInOutExpo: 'cubic-bezier(1.000,  0.000, 0.000, 1.000)',\n  easeInOutQuad: 'cubic-bezier(0.455,  0.030, 0.515, 0.955)',\n  easeInOutQuart: 'cubic-bezier(0.770,  0.000, 0.175, 1.000)',\n  easeInOutQuint: 'cubic-bezier(0.860,  0.000, 0.070, 1.000)',\n  easeInOutSine: 'cubic-bezier(0.445,  0.050, 0.550, 0.950)'\n};\n/* eslint-enable key-spacing */\n\n/** */\n\n/**\n * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'transitionTimingFunction': timingFunctions('easeInQuad')\n * }\n *\n * // styled-components usage\n *  const div = styled.div`\n *   transitionTimingFunction: ${timingFunctions('easeInQuad')};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'transitionTimingFunction': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n * }\n */\n\nfunction timingFunctions(timingFunction) {\n  return functionsMap[timingFunction];\n}\n\n//      \n\n/** */\n\nvar getBorderWidth = function getBorderWidth(pointingDirection, height, width) {\n  switch (pointingDirection) {\n    case 'top':\n      return '0 ' + width / 2 + 'px ' + height + 'px ' + width / 2 + 'px';\n    case 'left':\n      return height / 2 + 'px ' + width + 'px ' + height / 2 + 'px 0';\n    case 'bottom':\n      return height + 'px ' + width / 2 + 'px 0 ' + width / 2 + 'px';\n    case 'right':\n      return height / 2 + 'px 0 ' + height / 2 + 'px ' + width + 'px';\n\n    default:\n      throw new Error(\"Passed invalid argument to triangle, please pass correct poitingDirection e.g. 'right'.\");\n  }\n};\n\n// needed for border-color\nvar reverseDirection = {\n  left: 'Right',\n  right: 'Left',\n  top: 'Bottom',\n  bottom: 'Top'\n};\n\n/**\n * CSS to represent triangle with any pointing direction with an optional background color. Accepts number or px values for height and width.\n *\n * @example\n * // Styles as object usage\n *\n * const styles = {\n *   ...triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })\n * }\n *\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })}\n *\n *\n * // CSS as JS Output\n *\n * div: {\n *  'borderColor': 'transparent',\n *  'borderLeftColor': 'red !important',\n *  'borderStyle': 'solid',\n *  'borderWidth': '50px 0 50px 100px',\n *  'height': '0',\n *  'width': '0',\n * }\n */\n\nfunction triangle(_ref) {\n  var _ref2;\n\n  var pointingDirection = _ref.pointingDirection,\n      height = _ref.height,\n      width = _ref.width,\n      foregroundColor = _ref.foregroundColor,\n      _ref$backgroundColor = _ref.backgroundColor,\n      backgroundColor = _ref$backgroundColor === undefined ? 'transparent' : _ref$backgroundColor;\n\n  var unitlessHeight = parseFloat(height);\n  var unitlessWidth = parseFloat(width);\n  if (isNaN(unitlessHeight) || isNaN(unitlessWidth)) {\n    throw new Error('Passed an invalid value to `height` or `width`. Please provide a pixel based unit');\n  }\n\n  return _ref2 = {\n    borderColor: backgroundColor,\n    width: '0',\n    height: '0',\n    borderWidth: getBorderWidth(pointingDirection, unitlessHeight, unitlessWidth),\n    borderStyle: 'solid'\n  }, _ref2['border' + reverseDirection[pointingDirection] + 'Color'] = foregroundColor + ' !important', _ref2;\n}\n\n//      \n\n/**\n * Provides an easy way to change the `wordWrap` property.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...wordWrap('break-word')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${wordWrap('break-word')}\n * `\n *\n * // CSS as JS Output\n *\n * const styles = {\n *   overflowWrap: 'break-word',\n *   wordWrap: 'break-word',\n *   wordBreak: 'break-all',\n * }\n */\n\nfunction wordWrap() {\n  var wrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'break-word';\n\n  var wordBreak = wrap === 'break-word' ? 'break-all' : wrap;\n  return {\n    overflowWrap: wrap,\n    wordWrap: wrap,\n    wordBreak: wordBreak\n  };\n}\n\n//      \n\n\nfunction colorToInt(color) {\n  return Math.round(color * 255);\n}\n\nfunction convertToInt(red, green, blue) {\n  return colorToInt(red) + \",\" + colorToInt(green) + \",\" + colorToInt(blue);\n}\n\nfunction hslToRgb(hue, saturation, lightness) {\n  var convert = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : convertToInt;\n\n  if (saturation === 0) {\n    // achromatic\n    return convert(lightness, lightness, lightness);\n  }\n\n  // formular from https://en.wikipedia.org/wiki/HSL_and_HSV\n  var huePrime = hue % 360 / 60;\n  var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;\n  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  var lightnessModification = lightness - chroma / 2;\n  var finalRed = red + lightnessModification;\n  var finalGreen = green + lightnessModification;\n  var finalBlue = blue + lightnessModification;\n  return convert(finalRed, finalGreen, finalBlue);\n}\n\n//      \nvar namedColorMap = {\n  aliceblue: 'f0f8ff',\n  antiquewhite: 'faebd7',\n  aqua: '00ffff',\n  aquamarine: '7fffd4',\n  azure: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '000',\n  blanchedalmond: 'ffebcd',\n  blue: '0000ff',\n  blueviolet: '8a2be2',\n  brown: 'a52a2a',\n  burlywood: 'deb887',\n  cadetblue: '5f9ea0',\n  chartreuse: '7fff00',\n  chocolate: 'd2691e',\n  coral: 'ff7f50',\n  cornflowerblue: '6495ed',\n  cornsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: '00ffff',\n  darkblue: '00008b',\n  darkcyan: '008b8b',\n  darkgoldenrod: 'b8860b',\n  darkgray: 'a9a9a9',\n  darkgreen: '006400',\n  darkgrey: 'a9a9a9',\n  darkkhaki: 'bdb76b',\n  darkmagenta: '8b008b',\n  darkolivegreen: '556b2f',\n  darkorange: 'ff8c00',\n  darkorchid: '9932cc',\n  darkred: '8b0000',\n  darksalmon: 'e9967a',\n  darkseagreen: '8fbc8f',\n  darkslateblue: '483d8b',\n  darkslategray: '2f4f4f',\n  darkslategrey: '2f4f4f',\n  darkturquoise: '00ced1',\n  darkviolet: '9400d3',\n  deeppink: 'ff1493',\n  deepskyblue: '00bfff',\n  dimgray: '696969',\n  dimgrey: '696969',\n  dodgerblue: '1e90ff',\n  firebrick: 'b22222',\n  floralwhite: 'fffaf0',\n  forestgreen: '228b22',\n  fuchsia: 'ff00ff',\n  gainsboro: 'dcdcdc',\n  ghostwhite: 'f8f8ff',\n  gold: 'ffd700',\n  goldenrod: 'daa520',\n  gray: '808080',\n  green: '008000',\n  greenyellow: 'adff2f',\n  grey: '808080',\n  honeydew: 'f0fff0',\n  hotpink: 'ff69b4',\n  indianred: 'cd5c5c',\n  indigo: '4b0082',\n  ivory: 'fffff0',\n  khaki: 'f0e68c',\n  lavender: 'e6e6fa',\n  lavenderblush: 'fff0f5',\n  lawngreen: '7cfc00',\n  lemonchiffon: 'fffacd',\n  lightblue: 'add8e6',\n  lightcoral: 'f08080',\n  lightcyan: 'e0ffff',\n  lightgoldenrodyellow: 'fafad2',\n  lightgray: 'd3d3d3',\n  lightgreen: '90ee90',\n  lightgrey: 'd3d3d3',\n  lightpink: 'ffb6c1',\n  lightsalmon: 'ffa07a',\n  lightseagreen: '20b2aa',\n  lightskyblue: '87cefa',\n  lightslategray: '789',\n  lightslategrey: '789',\n  lightsteelblue: 'b0c4de',\n  lightyellow: 'ffffe0',\n  lime: '0f0',\n  limegreen: '32cd32',\n  linen: 'faf0e6',\n  magenta: 'f0f',\n  maroon: '800000',\n  mediumaquamarine: '66cdaa',\n  mediumblue: '0000cd',\n  mediumorchid: 'ba55d3',\n  mediumpurple: '9370db',\n  mediumseagreen: '3cb371',\n  mediumslateblue: '7b68ee',\n  mediumspringgreen: '00fa9a',\n  mediumturquoise: '48d1cc',\n  mediumvioletred: 'c71585',\n  midnightblue: '191970',\n  mintcream: 'f5fffa',\n  mistyrose: 'ffe4e1',\n  moccasin: 'ffe4b5',\n  navajowhite: 'ffdead',\n  navy: '000080',\n  oldlace: 'fdf5e6',\n  olive: '808000',\n  olivedrab: '6b8e23',\n  orange: 'ffa500',\n  orangered: 'ff4500',\n  orchid: 'da70d6',\n  palegoldenrod: 'eee8aa',\n  palegreen: '98fb98',\n  paleturquoise: 'afeeee',\n  palevioletred: 'db7093',\n  papayawhip: 'ffefd5',\n  peachpuff: 'ffdab9',\n  peru: 'cd853f',\n  pink: 'ffc0cb',\n  plum: 'dda0dd',\n  powderblue: 'b0e0e6',\n  purple: '800080',\n  rebeccapurple: '639',\n  red: 'f00',\n  rosybrown: 'bc8f8f',\n  royalblue: '4169e1',\n  saddlebrown: '8b4513',\n  salmon: 'fa8072',\n  sandybrown: 'f4a460',\n  seagreen: '2e8b57',\n  seashell: 'fff5ee',\n  sienna: 'a0522d',\n  silver: 'c0c0c0',\n  skyblue: '87ceeb',\n  slateblue: '6a5acd',\n  slategray: '708090',\n  slategrey: '708090',\n  snow: 'fffafa',\n  springgreen: '00ff7f',\n  steelblue: '4682b4',\n  tan: 'd2b48c',\n  teal: '008080',\n  thistle: 'd8bfd8',\n  tomato: 'ff6347',\n  turquoise: '40e0d0',\n  violet: 'ee82ee',\n  wheat: 'f5deb3',\n  white: 'fff',\n  whitesmoke: 'f5f5f5',\n  yellow: 'ff0',\n  yellowgreen: '9acd32'\n};\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n * @private\n */\nfunction nameToHex(color) {\n  if (typeof color !== 'string') return color;\n  var normalizedColorName = color.toLowerCase();\n  return namedColorMap[normalizedColorName] ? '#' + namedColorMap[normalizedColorName] : color;\n}\n\n//      \nvar hexRegex = /^#[a-fA-F0-9]{6}$/;\nvar reducedHexRegex = /^#[a-fA-F0-9]{3}$/;\nvar rgbRegex = /^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/;\nvar rgbaRegex = /^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([-+]?[0-9]*[.]?[0-9]+)\\s*\\)$/;\nvar hslRegex = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/;\nvar hslaRegex = /^hsla\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([-+]?[0-9]*[.]?[0-9]+)\\s*\\)$/;\n\n/**\n * Returns an RgbColor or RgbaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a RgbColor or RgbaColor object back to a string.\n *\n * @example\n * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1\n * const color1 = 'rgb(255, 0, 0)';\n * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2\n * const color2 = 'hsla(210, 10%, 40%, 0.75)';\n */\nfunction parseToRgb(color) {\n  if (typeof color !== 'string') {\n    throw new Error('Passed an incorrect argument to a color function, please pass a string representation of a color.');\n  }\n  var normalizedColor = nameToHex(color);\n  if (normalizedColor.match(hexRegex)) {\n    return {\n      red: parseInt('' + normalizedColor[1] + normalizedColor[2], 16),\n      green: parseInt('' + normalizedColor[3] + normalizedColor[4], 16),\n      blue: parseInt('' + normalizedColor[5] + normalizedColor[6], 16)\n    };\n  }\n  if (normalizedColor.match(reducedHexRegex)) {\n    return {\n      red: parseInt('' + normalizedColor[1] + normalizedColor[1], 16),\n      green: parseInt('' + normalizedColor[2] + normalizedColor[2], 16),\n      blue: parseInt('' + normalizedColor[3] + normalizedColor[3], 16)\n    };\n  }\n  var rgbMatched = rgbRegex.exec(normalizedColor);\n  if (rgbMatched) {\n    return {\n      red: parseInt('' + rgbMatched[1], 10),\n      green: parseInt('' + rgbMatched[2], 10),\n      blue: parseInt('' + rgbMatched[3], 10)\n    };\n  }\n  var rgbaMatched = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatched) {\n    return {\n      red: parseInt('' + rgbaMatched[1], 10),\n      green: parseInt('' + rgbaMatched[2], 10),\n      blue: parseInt('' + rgbaMatched[3], 10),\n      alpha: parseFloat('' + rgbaMatched[4])\n    };\n  }\n  var hslMatched = hslRegex.exec(normalizedColor);\n  if (hslMatched) {\n    var hue = parseInt('' + hslMatched[1], 10);\n    var saturation = parseInt('' + hslMatched[2], 10) / 100;\n    var lightness = parseInt('' + hslMatched[3], 10) / 100;\n    var rgbColorString = 'rgb(' + hslToRgb(hue, saturation, lightness) + ')';\n    var hslRgbMatched = rgbRegex.exec(rgbColorString);\n    return {\n      red: parseInt('' + hslRgbMatched[1], 10),\n      green: parseInt('' + hslRgbMatched[2], 10),\n      blue: parseInt('' + hslRgbMatched[3], 10)\n    };\n  }\n  var hslaMatched = hslaRegex.exec(normalizedColor);\n  if (hslaMatched) {\n    var _hue = parseInt('' + hslaMatched[1], 10);\n    var _saturation = parseInt('' + hslaMatched[2], 10) / 100;\n    var _lightness = parseInt('' + hslaMatched[3], 10) / 100;\n    var _rgbColorString = 'rgb(' + hslToRgb(_hue, _saturation, _lightness) + ')';\n    var _hslRgbMatched = rgbRegex.exec(_rgbColorString);\n    return {\n      red: parseInt('' + _hslRgbMatched[1], 10),\n      green: parseInt('' + _hslRgbMatched[2], 10),\n      blue: parseInt('' + _hslRgbMatched[3], 10),\n      alpha: parseFloat('' + hslaMatched[4])\n    };\n  }\n  throw new Error(\"Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\");\n}\n\n//      \n\n\nfunction rgbToHsl(color) {\n  // make sure rgb are contained in a set of [0, 255]\n  var red = color.red / 255;\n  var green = color.green / 255;\n  var blue = color.blue / 255;\n\n  var max = Math.max(red, green, blue);\n  var min = Math.min(red, green, blue);\n  var lightness = (max + min) / 2;\n\n  if (max === min) {\n    // achromatic\n    if (color.alpha !== undefined) {\n      return { hue: 0, saturation: 0, lightness: lightness, alpha: color.alpha };\n    } else {\n      return { hue: 0, saturation: 0, lightness: lightness };\n    }\n  }\n\n  var hue = void 0;\n  var delta = max - min;\n  var saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n  switch (max) {\n    case red:\n      hue = (green - blue) / delta + (green < blue ? 6 : 0);\n      break;\n    case green:\n      hue = (blue - red) / delta + 2;\n      break;\n    default:\n      // blue case\n      hue = (red - green) / delta + 4;\n      break;\n  }\n\n  hue *= 60;\n  if (color.alpha !== undefined) {\n    return { hue: hue, saturation: saturation, lightness: lightness, alpha: color.alpha };\n  }\n  return { hue: hue, saturation: saturation, lightness: lightness };\n}\n\n//      \n\n/**\n * Returns an HslColor or HslaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a HslColor or HslaColor object back to a string.\n *\n * @example\n * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1\n * const color1 = 'rgb(255, 0, 0)';\n * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2\n * const color2 = 'hsla(210, 10%, 40%, 0.75)';\n */\nfunction parseToHsl(color) {\n  // Note: At a later stage we can optimize this function as right now a hsl\n  // color would be parsed converted to rgb values and converted back to hsl.\n  return rgbToHsl(parseToRgb(color));\n}\n\n//      \n\n/**\n * Reduces hex values if possible e.g. #ff8866 to #f86\n * @private\n */\nvar reduceHexValue = function reduceHexValue(value) {\n  if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {\n    return \"#\" + value[1] + value[3] + value[5];\n  }\n  return value;\n};\n\n//      \nfunction numberToHex(value) {\n  var hex = value.toString(16);\n  return hex.length === 1 ? \"0\" + hex : hex;\n}\n\n//      \n\n/**\n * Returns a string value for the color. The returned result is the smallest possible hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgb(255, 205, 100),\n *   background: rgb({ red: 255, green: 205, blue: 100 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgb(255, 205, 100)};\n *   background: ${rgb({ red: 255, green: 205, blue: 100 })};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#ffcd64\";\n *   background: \"#ffcd64\";\n * }\n */\nfunction rgb(value, green, blue) {\n  if (typeof value === 'number' && typeof green === 'number' && typeof blue === 'number') {\n    return reduceHexValue('#' + numberToHex(value) + numberToHex(green) + numberToHex(blue));\n  } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && green === undefined && blue === undefined) {\n    return reduceHexValue('#' + numberToHex(value.red) + numberToHex(value.green) + numberToHex(value.blue));\n  }\n\n  throw new Error('Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).');\n}\n\n//      \n\n/**\n * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.\n *\n * Can also be used to fade a color by passing a hex value or named CSS color along with an alpha value.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgba(255, 205, 100, 0.7),\n *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),\n *   background: rgba(255, 205, 100, 1),\n *   background: rgba('#ffffff', 0.4),\n *   background: rgba('black', 0.7),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgba(255, 205, 100, 0.7)};\n *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};\n *   background: ${rgba(255, 205, 100, 1)};\n *   background: ${rgba('#ffffff', 0.4)};\n *   background: ${rgba('black', 0.7)};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,205,100,0.7)\";\n *   background: \"rgba(255,205,100,0.7)\";\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,255,255,0.4)\";\n *   background: \"rgba(0,0,0,0.7)\";\n * }\n */\nfunction rgba(firstValue, secondValue, thirdValue, fourthValue) {\n  if (typeof firstValue === 'string' && typeof secondValue === 'number') {\n    var rgbValue = parseToRgb(firstValue);\n    return 'rgba(' + rgbValue.red + ',' + rgbValue.green + ',' + rgbValue.blue + ',' + secondValue + ')';\n  } else if (typeof firstValue === 'number' && typeof secondValue === 'number' && typeof thirdValue === 'number' && typeof fourthValue === 'number') {\n    return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : 'rgba(' + firstValue + ',' + secondValue + ',' + thirdValue + ',' + fourthValue + ')';\n  } else if ((typeof firstValue === 'undefined' ? 'undefined' : _typeof(firstValue)) === 'object' && secondValue === undefined && thirdValue === undefined && fourthValue === undefined) {\n    return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : 'rgba(' + firstValue.red + ',' + firstValue.green + ',' + firstValue.blue + ',' + firstValue.alpha + ')';\n  }\n\n  throw new Error('Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).');\n}\n\n//      \nfunction colorToHex(color) {\n  return numberToHex(Math.round(color * 255));\n}\n\nfunction convertToHex(red, green, blue) {\n  return reduceHexValue('#' + colorToHex(red) + colorToHex(green) + colorToHex(blue));\n}\n\nfunction hslToHex(hue, saturation, lightness) {\n  return hslToRgb(hue, saturation, lightness, convertToHex);\n}\n\n//      \n\n/**\n * Returns a string value for the color. The returned result is the smallest possible hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hsl(359, 0.75, 0.4),\n *   background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hsl(359, 0.75, 0.4)};\n *   background: ${hsl({ hue: 360, saturation: 0.75, lightness: 0.4 })};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#b3191c\";\n *   background: \"#b3191c\";\n * }\n */\nfunction hsl(value, saturation, lightness) {\n  if (typeof value === 'number' && typeof saturation === 'number' && typeof lightness === 'number') {\n    return hslToHex(value, saturation, lightness);\n  } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && saturation === undefined && lightness === undefined) {\n    return hslToHex(value.hue, value.saturation, value.lightness);\n  }\n\n  throw new Error('Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).');\n}\n\n//      \n\n/**\n * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hsla(359, 0.75, 0.4, 0.7),\n *   background: hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 }),\n *   background: hsla(359, 0.75, 0.4, 1),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hsla(359, 0.75, 0.4, 0.7)};\n *   background: ${hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 })};\n *   background: ${hsla(359, 0.75, 0.4, 1)};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(179,25,28,0.7)\";\n *   background: \"rgba(179,25,28,0.7)\";\n *   background: \"#b3191c\";\n * }\n */\nfunction hsla(value, saturation, lightness, alpha) {\n  if (typeof value === 'number' && typeof saturation === 'number' && typeof lightness === 'number' && typeof alpha === 'number') {\n    return alpha >= 1 ? hslToHex(value, saturation, lightness) : 'rgba(' + hslToRgb(value, saturation, lightness) + ',' + alpha + ')';\n  } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && saturation === undefined && lightness === undefined && alpha === undefined) {\n    return value.alpha >= 1 ? hslToHex(value.hue, value.saturation, value.lightness) : 'rgba(' + hslToRgb(value.hue, value.saturation, value.lightness) + ',' + value.alpha + ')';\n  }\n\n  throw new Error('Passed invalid arguments to hsla, please pass multiple numbers e.g. hsl(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).');\n}\n\n//      \nvar isRgb = function isRgb(color) {\n  return typeof color.red === 'number' && typeof color.green === 'number' && typeof color.blue === 'number' && (typeof color.alpha !== 'number' || typeof color.alpha === 'undefined');\n};\n\nvar isRgba = function isRgba(color) {\n  return typeof color.red === 'number' && typeof color.green === 'number' && typeof color.blue === 'number' && typeof color.alpha === 'number';\n};\n\nvar isHsl = function isHsl(color) {\n  return typeof color.hue === 'number' && typeof color.saturation === 'number' && typeof color.lightness === 'number' && (typeof color.alpha !== 'number' || typeof color.alpha === 'undefined');\n};\n\nvar isHsla = function isHsla(color) {\n  return typeof color.hue === 'number' && typeof color.saturation === 'number' && typeof color.lightness === 'number' && typeof color.alpha === 'number';\n};\n\nvar errMsg = 'Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.';\n\n/**\n * Converts a RgbColor, RgbaColor, HslColor or HslaColor object to a color string.\n * This util is useful in case you only know on runtime which color object is\n * used. Otherwise we recommend to rely on `rgb`, `rgba`, `hsl` or `hsla`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: toColorString({ red: 255, green: 205, blue: 100 }),\n *   background: toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),\n *   background: toColorString({ hue: 240, saturation: 1, lightness: 0.5 }),\n *   background: toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${toColorString({ red: 255, green: 205, blue: 100 })};\n *   background: ${toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};\n *   background: ${toColorString({ hue: 240, saturation: 1, lightness: 0.5 })};\n *   background: ${toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,205,100,0.72)\";\n *   background: \"#00f\";\n *   background: \"rgba(179,25,25,0.72)\";\n * }\n */\n\nfunction toColorString(color) {\n  if ((typeof color === 'undefined' ? 'undefined' : _typeof(color)) !== 'object') throw new Error(errMsg);\n  if (isRgba(color)) return rgba(color);\n  if (isRgb(color)) return rgb(color);\n  if (isHsla(color)) return hsla(color);\n  if (isHsl(color)) return hsl(color);\n\n  throw new Error(errMsg);\n}\n\n//      \n\n// Type definitions taken from https://github.com/gcanti/flow-static-land/blob/master/src/Fun.js\n\n\n// eslint-disable-next-line no-unused-vars\n\n\n// eslint-disable-next-line no-unused-vars\n\n// eslint-disable-next-line no-redeclare\n\n\nfunction curried(f, length, acc) {\n  return function fn() {\n    // eslint-disable-next-line prefer-rest-params\n    var combined = acc.concat(Array.prototype.slice.call(arguments));\n    return combined.length >= length ? f.apply(this, combined) : curried(f, length, combined);\n  };\n}\n\n// eslint-disable-next-line no-redeclare\nfunction curry(f) {\n  // eslint-disable-line no-redeclare\n  return curried(f, f.length, []);\n}\n\n//      \n\n/**\n * Changes the hue of the color. Hue is a number between 0 to 360. The first\n * argument for adjustHue is the amount of degrees the color is rotated along\n * the color wheel.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: adjustHue(180, '#448'),\n *   background: adjustHue(180, 'rgba(101,100,205,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${adjustHue(180, '#448')};\n *   background: ${adjustHue(180, 'rgba(101,100,205,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#888844\";\n *   background: \"rgba(136,136,68,0.7)\";\n * }\n */\nfunction adjustHue(degree, color) {\n  var hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    hue: (hslColor.hue + degree) % 360\n  }));\n}\n\nvar curriedAdjustHue = /*#__PURE__*/curry(adjustHue);\n\n//      \n\n/**\n * Returns the complement of the provided color. This is identical to adjustHue(180, <color>).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: complement('#448'),\n *   background: complement('rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${complement('#448')};\n *   background: ${complement('rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#884\";\n *   background: \"rgba(153,153,153,0.7)\";\n * }\n */\nfunction complement(color) {\n  var hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    hue: (hslColor.hue + 180) % 360\n  }));\n}\n\n//      \n\nfunction guard(lowerBoundary, upperBoundary, value) {\n  return Math.max(lowerBoundary, Math.min(upperBoundary, value));\n}\n\n//      \n\n/**\n * Returns a string value for the darkened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: darken(0.2, '#FFCD64'),\n *   background: darken(0.2, 'rgba(255,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${darken(0.2, '#FFCD64')};\n *   background: ${darken(0.2, 'rgba(255,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#ffbd31\";\n *   background: \"rgba(255,189,49,0.7)\";\n * }\n */\nfunction darken(amount, color) {\n  var hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    lightness: guard(0, 1, hslColor.lightness - amount)\n  }));\n}\n\nvar curriedDarken = /*#__PURE__*/curry(darken);\n\n//      \n\n/**\n * Decreases the intensity of a color. Its range is between 0 to 1. The first\n * argument of the desaturate function is the amount by how much the color\n * intensity should be decreased.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: desaturate(0.2, '#CCCD64'),\n *   background: desaturate(0.2, 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${desaturate(0.2, '#CCCD64')};\n *   background: ${desaturate(0.2, 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#b8b979\";\n *   background: \"rgba(184,185,121,0.7)\";\n * }\n */\nfunction desaturate(amount, color) {\n  var hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    saturation: guard(0, 1, hslColor.saturation - amount)\n  }));\n}\n\nvar curriedDesaturate = /*#__PURE__*/curry(desaturate);\n\n//      \n/**\n * Returns a number (float) representing the luminance of a color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff',\n *   background: getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?\n *                             'rgba(58, 133, 255, 1)' :\n *                             'rgba(255, 57, 149, 1)',\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff'};\n *   background: ${getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?\n *                             'rgba(58, 133, 255, 1)' :\n *                             'rgba(255, 57, 149, 1)'};\n *\n * // CSS in JS Output\n *\n * div {\n *   background: \"#CCCD64\";\n *   background: \"rgba(58, 133, 255, 1)\";\n * }\n */\nfunction getLuminance(color) {\n  var rgbColor = parseToRgb(color);\n\n  var _Object$keys$map = Object.keys(rgbColor).map(function (key) {\n    var channel = rgbColor[key] / 255;\n    return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);\n  }),\n      r = _Object$keys$map[0],\n      g = _Object$keys$map[1],\n      b = _Object$keys$map[2];\n\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\n//      \n\n/**\n * Converts the color to a grayscale, by reducing its saturation to 0.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: grayscale('#CCCD64'),\n *   background: grayscale('rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${grayscale('#CCCD64')};\n *   background: ${grayscale('rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#999\";\n *   background: \"rgba(153,153,153,0.7)\";\n * }\n */\nfunction grayscale(color) {\n  return toColorString(_extends({}, parseToHsl(color), {\n    saturation: 0\n  }));\n}\n\n//      \n\n/**\n * Inverts the red, green and blue values of a color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: invert('#CCCD64'),\n *   background: invert('rgba(101,100,205,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${invert('#CCCD64')};\n *   background: ${invert('rgba(101,100,205,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#33329b\";\n *   background: \"rgba(154,155,50,0.7)\";\n * }\n */\nfunction invert(color) {\n  // parse color string to rgb\n  var value = parseToRgb(color);\n  return toColorString(_extends({}, value, {\n    red: 255 - value.red,\n    green: 255 - value.green,\n    blue: 255 - value.blue\n  }));\n}\n\n//      \n\n/**\n * Returns a string value for the lightened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: lighten(0.2, '#CCCD64'),\n *   background: lighten(0.2, 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${lighten(0.2, '#FFCD64')};\n *   background: ${lighten(0.2, 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e5e6b1\";\n *   background: \"rgba(229,230,177,0.7)\";\n * }\n */\nfunction lighten(amount, color) {\n  var hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    lightness: guard(0, 1, hslColor.lightness + amount)\n  }));\n}\n\nvar curriedLighten = /*#__PURE__*/curry(lighten);\n\n//      \n\n/**\n * Mixes two colors together by calculating the average of each of the RGB components.\n *\n * By default the weight is 0.5 meaning that half of the first color and half the second\n * color should be used. Optionally the weight can be modified by providing a number\n * as the first argument. 0.25 means that a quarter of the first color and three quarters\n * of the second color should be used.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: mix(0.5, '#f00', '#00f')\n *   background: mix(0.25, '#f00', '#00f')\n *   background: mix(0.5, 'rgba(255, 0, 0, 0.5)', '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${mix(0.5, '#f00', '#00f')};\n *   background: ${mix(0.25, '#f00', '#00f')};\n *   background: ${mix(0.5, 'rgba(255, 0, 0, 0.5)', '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#7f007f\";\n *   background: \"#3f00bf\";\n *   background: \"rgba(63, 0, 191, 0.75)\";\n * }\n */\nfunction mix() {\n  var weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n  var color = arguments[1];\n  var otherColor = arguments[2];\n\n  var parsedColor1 = parseToRgb(color);\n  var color1 = _extends({}, parsedColor1, {\n    alpha: typeof parsedColor1.alpha === 'number' ? parsedColor1.alpha : 1\n  });\n\n  var parsedColor2 = parseToRgb(otherColor);\n  var color2 = _extends({}, parsedColor2, {\n    alpha: typeof parsedColor2.alpha === 'number' ? parsedColor2.alpha : 1\n  });\n\n  // The formular is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  var alphaDelta = color1.alpha - color2.alpha;\n  var x = weight * 2 - 1;\n  var y = x * alphaDelta === -1 ? x : x + alphaDelta;\n  var z = 1 + x * alphaDelta;\n  var weight1 = (y / z + 1) / 2.0;\n  var weight2 = 1 - weight1;\n\n  var mixedColor = {\n    red: Math.floor(color1.red * weight1 + color2.red * weight2),\n    green: Math.floor(color1.green * weight1 + color2.green * weight2),\n    blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),\n    alpha: color1.alpha + (color2.alpha - color1.alpha) * (weight / 1.0)\n  };\n\n  return rgba(mixedColor);\n}\n\nvar curriedMix = /*#__PURE__*/curry(mix);\n\n//      \n/**\n * Increases the opacity of a color. Its range for the amount is between 0 to 1.\n *\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: opacify(0.1, 'rgba(255, 255, 255, 0.9)');\n *   background: opacify(0.2, 'hsla(0, 0%, 100%, 0.5)'),\n *   background: opacify(0.5, 'rgba(255, 0, 0, 0.2)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${opacify(0.1, 'rgba(255, 255, 255, 0.9)')};\n *   background: ${opacify(0.2, 'hsla(0, 0%, 100%, 0.5)')},\n *   background: ${opacify(0.5, 'rgba(255, 0, 0, 0.2)')},\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#fff\";\n *   background: \"rgba(255,255,255,0.7)\";\n *   background: \"rgba(255,0,0,0.7)\";\n * }\n */\nfunction opacify(amount, color) {\n  var parsedColor = parseToRgb(color);\n  var alpha = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1;\n  var colorWithAlpha = _extends({}, parsedColor, {\n    alpha: guard(0, 1, (alpha * 100 + amount * 100) / 100)\n  });\n  return rgba(colorWithAlpha);\n}\n\nvar curriedOpacify = /*#__PURE__*/curry(opacify);\n\n//      \n/**\n * Selects black or white for best contrast depending on the luminosity of the given color.\n * Follows W3C specs for readability at https://www.w3.org/TR/WCAG20-TECHS/G18.html\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   color: readableColor('#000'),\n *   color: readableColor('papayawhip'),\n *   color: readableColor('rgb(255,0,0)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   color: ${readableColor('#000')};\n *   color: ${readableColor('papayawhip')};\n *   color: ${readableColor('rgb(255,0,0)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   color: \"#fff\";\n *   color: \"#fff\";\n *   color: \"#000\";\n * }\n */\n\nfunction readableColor(color) {\n  return getLuminance(color) > 0.179 ? '#000' : '#fff';\n}\n\nvar curriedReadableColor = /*#__PURE__*/curry(readableColor);\n\n//      \n\n/**\n * Increases the intensity of a color. Its range is between 0 to 1. The first\n * argument of the saturate function is the amount by how much the color\n * intensity should be increased.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: saturate(0.2, '#CCCD64'),\n *   background: saturate(0.2, 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${saturate(0.2, '#FFCD64')};\n *   background: ${saturate(0.2, 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e0e250\";\n *   background: \"rgba(224,226,80,0.7)\";\n * }\n */\nfunction saturate(amount, color) {\n  var hslColor = parseToHsl(color);\n  return toColorString(_extends({}, hslColor, {\n    saturation: guard(0, 1, hslColor.saturation + amount)\n  }));\n}\n\nvar curriedSaturate = /*#__PURE__*/curry(saturate);\n\n//      \n\n/**\n * Sets the hue of a color to the provided value. The hue range can be\n * from 0 and 359.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setHue(42, '#CCCD64'),\n *   background: setHue(244, 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setHue(42, '#CCCD64')};\n *   background: ${setHue(244, 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#cdae64\";\n *   background: \"rgba(107,100,205,0.7)\";\n * }\n */\nfunction setHue(hue, color) {\n  return toColorString(_extends({}, parseToHsl(color), {\n    hue: hue\n  }));\n}\n\nvar curriedSetHue = /*#__PURE__*/curry(setHue);\n\n//      \n\n/**\n * Sets the lightness of a color to the provided value. The lightness range can be\n * from 0 and 1.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setLightness(0.2, '#CCCD64'),\n *   background: setLightness(0.75, 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setLightness(0.2, '#CCCD64')};\n *   background: ${setLightness(0.75, 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#4d4d19\";\n *   background: \"rgba(223,224,159,0.7)\";\n * }\n */\nfunction setLightness(lightness, color) {\n  return toColorString(_extends({}, parseToHsl(color), {\n    lightness: lightness\n  }));\n}\n\nvar curriedSetLightness = /*#__PURE__*/curry(setLightness);\n\n//      \n\n/**\n * Sets the saturation of a color to the provided value. The lightness range can be\n * from 0 and 1.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setSaturation(0.2, '#CCCD64'),\n *   background: setSaturation(0.75, 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setSaturation(0.2, '#CCCD64')};\n *   background: ${setSaturation(0.75, 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#adad84\";\n *   background: \"rgba(228,229,76,0.7)\";\n * }\n */\nfunction setSaturation(saturation, color) {\n  return toColorString(_extends({}, parseToHsl(color), {\n    saturation: saturation\n  }));\n}\n\nvar curriedSetSaturation = /*#__PURE__*/curry(setSaturation);\n\n//      \n\n/**\n * Shades a color by mixing it with black. `shade` can produce\n * hue shifts, where as `darken` manipulates the luminance channel and therefore\n * doesn't produce hue shifts.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: shade(0.25, '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${shade(0.25, '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#00003f\";\n * }\n */\n\nfunction shade(percentage, color) {\n  if (typeof percentage !== 'number' || percentage > 1 || percentage < -1) {\n    throw new Error('Passed an incorrect argument to shade, please pass a percentage less than or equal to 1 and larger than or equal to -1.');\n  }\n  if (typeof color !== 'string') {\n    throw new Error('Passed an incorrect argument to a color function, please pass a string representation of a color.');\n  }\n  return curriedMix(percentage, color, 'rgb(0, 0, 0)');\n}\n\nvar curriedShade = /*#__PURE__*/curry(shade);\n\n//      \n\n/**\n * Tints a color by mixing it with white. `tint` can produce\n * hue shifts, where as `lighten` manipulates the luminance channel and therefore\n * doesn't produce hue shifts.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: tint(0.25, '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${tint(0.25, '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#bfbfff\";\n * }\n */\n\nfunction tint(percentage, color) {\n  if (typeof percentage !== 'number' || percentage > 1 || percentage < -1) {\n    throw new Error('Passed an incorrect argument to tint, please pass a percentage less than or equal to 1 and larger than or equal to -1.');\n  }\n  if (typeof color !== 'string') {\n    throw new Error('Passed an incorrect argument to a color function, please pass a string representation of a color.');\n  }\n  return curriedMix(percentage, color, 'rgb(255, 255, 255)');\n}\n\nvar curriedTint = /*#__PURE__*/curry(tint);\n\n//      \n/**\n * Decreases the opacity of a color. Its range for the amount is between 0 to 1.\n *\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: transparentize(0.1, '#fff');\n *   background: transparentize(0.2, 'hsl(0, 0%, 100%)'),\n *   background: transparentize(0.5, 'rgba(255, 0, 0, 0.8)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${transparentize(0.1, '#fff')};\n *   background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')},\n *   background: ${transparentize(0.5, 'rgba(255, 0, 0, 0.8)')},\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,255,255,0.9)\";\n *   background: \"rgba(255,255,255,0.8)\";\n *   background: \"rgba(255,0,0,0.3)\";\n * }\n */\nfunction transparentize(amount, color) {\n  var parsedColor = parseToRgb(color);\n  var alpha = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1;\n  var colorWithAlpha = _extends({}, parsedColor, {\n    alpha: guard(0, 1, (alpha * 100 - amount * 100) / 100)\n  });\n  return rgba(colorWithAlpha);\n}\n\nvar curriedTransparentize = /*#__PURE__*/curry(transparentize);\n\n//      \n\n/** */\n\n/**\n * Shorthand for easily setting the animation property. Allows either multiple arrays with animations\n * or a single animation spread over the arguments.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out, colorchange 2s'\n * }\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation('rotate', '1s', 'ease-in-out')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation('rotate', '1s', 'ease-in-out')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out'\n * }\n */\nfunction animation() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  // Allow single or multiple animations passed\n  var multiMode = Array.isArray(args[0]);\n  if (!multiMode && args.length > 8) {\n    throw new Error('The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation');\n  }\n  var code = args.map(function (arg) {\n    if (multiMode && !Array.isArray(arg) || !multiMode && Array.isArray(arg)) {\n      throw new Error(\"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\");\n    }\n    if (Array.isArray(arg) && arg.length > 8) {\n      throw new Error('The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation');\n    }\n\n    return Array.isArray(arg) ? arg.join(' ') : arg;\n  }).join(', ');\n\n  return {\n    animation: code\n  };\n}\n\n//      \n\n/**\n * Shorthand that accepts any number of backgroundImage values as parameters for creating a single background statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'backgroundImage': 'url(\"/image/background.jpg\"), linear-gradient(red, green)'\n * }\n */\n\nfunction backgroundImages() {\n  for (var _len = arguments.length, properties = Array(_len), _key = 0; _key < _len; _key++) {\n    properties[_key] = arguments[_key];\n  }\n\n  return {\n    backgroundImage: properties.join(', ')\n  };\n}\n\n//      \n\n/**\n * Shorthand that accepts any number of background values as parameters for creating a single background statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'background': 'url(\"/image/background.jpg\"), linear-gradient(red, green), center no-repeat'\n * }\n */\nfunction backgrounds() {\n  for (var _len = arguments.length, properties = Array(_len), _key = 0; _key < _len; _key++) {\n    properties[_key] = arguments[_key];\n  }\n\n  return {\n    background: properties.join(', ')\n  };\n}\n\n//      \n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderColor('red', 'green', 'blue', 'yellow')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderColor('red', 'green', 'blue', 'yellow')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopColor': 'red',\n *   'borderRightColor': 'green',\n *   'borderBottomColor': 'blue',\n *   'borderLeftColor': 'yellow'\n * }\n */\n\nfunction borderColor() {\n  for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n\n  return directionalProperty.apply(undefined, ['borderColor'].concat(values));\n}\n\n//      \n/**\n * Shorthand that accepts a value for side and a value for radius and applies the radius value to both corners of the side.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderRadius('top', '5px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderRadius('top', '5px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopRightRadius': '5px',\n *   'borderTopLeftRadius': '5px',\n * }\n */\n\nfunction borderRadius(side, radius) {\n  var uppercaseSide = capitalizeString(side);\n  if (!radius && radius !== 0) {\n    throw new Error('borderRadius expects a radius value as a string or number as the second argument.');\n  }\n  if (uppercaseSide === 'Top' || uppercaseSide === 'Bottom') {\n    var _ref;\n\n    return _ref = {}, _ref['border' + uppercaseSide + 'RightRadius'] = radius, _ref['border' + uppercaseSide + 'LeftRadius'] = radius, _ref;\n  }\n\n  if (uppercaseSide === 'Left' || uppercaseSide === 'Right') {\n    var _ref2;\n\n    return _ref2 = {}, _ref2['borderTop' + uppercaseSide + 'Radius'] = radius, _ref2['borderBottom' + uppercaseSide + 'Radius'] = radius, _ref2;\n  }\n\n  throw new Error('borderRadius expects one of \"top\", \"bottom\", \"left\" or \"right\" as the first argument.');\n}\n\n//      \n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderStyle('solid', 'dashed', 'dotted', 'double')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderStyle('solid', 'dashed', 'dotted', 'double')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopStyle': 'solid',\n *   'borderRightStyle': 'dashed',\n *   'borderBottomStyle': 'dotted',\n *   'borderLeftStyle': 'double'\n * }\n */\n\nfunction borderStyle() {\n  for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n\n  return directionalProperty.apply(undefined, ['borderStyle'].concat(values));\n}\n\n//      \n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderWidth('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderWidth('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopWidth': '12px',\n *   'borderRightWidth': '24px',\n *   'borderBottomWidth': '36px',\n *   'borderLeftWidth': '48px'\n * }\n */\nfunction borderWidth() {\n  for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n\n  return directionalProperty.apply(undefined, ['borderWidth'].concat(values));\n}\n\n//      \n\n\nfunction generateSelectors(template, state) {\n  var stateSuffix = state ? ':' + state : '';\n  return template(stateSuffix);\n}\n\n/**\n * Function helper that adds an array of states to a template of selectors. Used in textInputs and buttons.\n * @private\n */\nfunction statefulSelectors(states, template, stateMap) {\n  if (!template) throw new Error('You must provide a template to this method.');\n  if (states.length === 0) return generateSelectors(template, null);\n  var selectors = [];\n  for (var i = 0; i < states.length; i += 1) {\n    if (stateMap && stateMap.indexOf(states[i]) < 0) {\n      throw new Error('You passed an unsupported selector state to this method.');\n    }\n    selectors.push(generateSelectors(template, states[i]));\n  }\n  selectors = selectors.join(',');\n  return selectors;\n}\n\n//      \nvar stateMap = [undefined, null, 'active', 'focus', 'hover'];\n\nfunction template(state) {\n  return 'button' + state + ',\\n  input[type=\"button\"]' + state + ',\\n  input[type=\"reset\"]' + state + ',\\n  input[type=\"submit\"]' + state;\n}\n\n/**\n * Populates selectors that target all buttons. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [buttons('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${buttons('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  'button:active,\n *  'input[type=\"button\"]:active,\n *  'input[type=\\\"reset\\\"]:active,\n *  'input[type=\\\"submit\\\"]:active: {\n *   'border': 'none'\n * }\n */\n\nfunction buttons() {\n  for (var _len = arguments.length, states = Array(_len), _key = 0; _key < _len; _key++) {\n    states[_key] = arguments[_key];\n  }\n\n  return statefulSelectors(states, template, stateMap);\n}\n\n//      \n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...margin('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${margin('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'marginTop': '12px',\n *   'marginRight': '24px',\n *   'marginBottom': '36px',\n *   'marginLeft': '48px'\n * }\n */\n\nfunction margin() {\n  for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n\n  return directionalProperty.apply(undefined, ['margin'].concat(values));\n}\n\n//      \n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...padding('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${padding('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'paddingTop': '12px',\n *   'paddingRight': '24px',\n *   'paddingBottom': '36px',\n *   'paddingLeft': '48px'\n * }\n */\n\nfunction padding() {\n  for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n\n  return directionalProperty.apply(undefined, ['padding'].concat(values));\n}\n\n//      \nvar positionMap$1 = ['absolute', 'fixed', 'relative', 'static', 'sticky'];\n\n/**\n * Shorthand accepts up to five values, including null to skip a value, and maps them to their respective directions. The first value can optionally be a position keyword.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...position('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${position('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'top': '12px',\n *   'right': '24px',\n *   'bottom': '36px',\n *   'left': '48px'\n * }\n *\n * // Styles as object usage\n * const styles = {\n *   ...position('absolute', '12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${position('absolute', '12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'position': 'absolute',\n *   'top': '12px',\n *   'right': '24px',\n *   'bottom': '36px',\n *   'left': '48px'\n * }\n */\n\nfunction position(positionKeyword) {\n  for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  if (positionMap$1.indexOf(positionKeyword) >= 0) {\n    return _extends({\n      position: positionKeyword\n    }, directionalProperty.apply(undefined, [''].concat(values)));\n  } else {\n    var firstValue = positionKeyword; // in this case position is actually the first value\n    return directionalProperty.apply(undefined, ['', firstValue].concat(values));\n  }\n}\n\n//      \n\n/**\n * Shorthand to set the height and width properties in a single statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...size('300px', '250px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${size('300px', '250px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'height': '300px',\n *   'width': '250px',\n * }\n */\n\nfunction size(height) {\n  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : height;\n\n  return {\n    height: height,\n    width: width\n  };\n}\n\n//      \nvar stateMap$1 = [undefined, null, 'active', 'focus', 'hover'];\n\nfunction template$1(state) {\n  return 'input[type=\"color\"]' + state + ',\\n    input[type=\"date\"]' + state + ',\\n    input[type=\"datetime\"]' + state + ',\\n    input[type=\"datetime-local\"]' + state + ',\\n    input[type=\"email\"]' + state + ',\\n    input[type=\"month\"]' + state + ',\\n    input[type=\"number\"]' + state + ',\\n    input[type=\"password\"]' + state + ',\\n    input[type=\"search\"]' + state + ',\\n    input[type=\"tel\"]' + state + ',\\n    input[type=\"text\"]' + state + ',\\n    input[type=\"time\"]' + state + ',\\n    input[type=\"url\"]' + state + ',\\n    input[type=\"week\"]' + state + ',\\n    input:not([type])' + state + ',\\n    textarea' + state;\n}\n\n/**\n * Populates selectors that target all text inputs. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [textInputs('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${textInputs('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  'input[type=\"color\"]:active,\n *  input[type=\"date\"]:active,\n *  input[type=\"datetime\"]:active,\n *  input[type=\"datetime-local\"]:active,\n *  input[type=\"email\"]:active,\n *  input[type=\"month\"]:active,\n *  input[type=\"number\"]:active,\n *  input[type=\"password\"]:active,\n *  input[type=\"search\"]:active,\n *  input[type=\"tel\"]:active,\n *  input[type=\"text\"]:active,\n *  input[type=\"time\"]:active,\n *  input[type=\"url\"]:active,\n *  input[type=\"week\"]:active,\n *  input:not([type]):active,\n *  textarea:active': {\n *   'border': 'none'\n * }\n */\n\nfunction textInputs() {\n  for (var _len = arguments.length, states = Array(_len), _key = 0; _key < _len; _key++) {\n    states[_key] = arguments[_key];\n  }\n\n  return statefulSelectors(states, template$1, stateMap$1);\n}\n\n//      \n\n/**\n * Shorthand that accepts any number of transition values as parameters for creating a single transition statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'\n * }\n */\n\nfunction transitions() {\n  for (var _len = arguments.length, properties = Array(_len), _key = 0; _key < _len; _key++) {\n    properties[_key] = arguments[_key];\n  }\n\n  return {\n    transition: properties.join(', ')\n  };\n}\n\n//      \n// Helpers\n// Mixins\n// Color\n// Shorthands\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return memoize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return STYLES_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return TARGET_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return unitless; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return hashString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return pa; });\n// murmurhash2 via https://gist.github.com/raycmorgan/588423\nfunction hashString(str) {\n  return hash(str, str.length).toString(36);\n}\n\nfunction hash(str, seed) {\n  var m = 0x5bd1e995;\n  var r = 24;\n  var h = seed ^ str.length;\n  var length = str.length;\n  var currentIndex = 0;\n\n  while (length >= 4) {\n    var k = UInt32(str, currentIndex);\n    k = Umul32(k, m);\n    k ^= k >>> r;\n    k = Umul32(k, m);\n    h = Umul32(h, m);\n    h ^= k;\n    currentIndex += 4;\n    length -= 4;\n  }\n\n  switch (length) {\n    case 3:\n      h ^= UInt16(str, currentIndex);\n      h ^= str.charCodeAt(currentIndex + 2) << 16;\n      h = Umul32(h, m);\n      break;\n\n    case 2:\n      h ^= UInt16(str, currentIndex);\n      h = Umul32(h, m);\n      break;\n\n    case 1:\n      h ^= str.charCodeAt(currentIndex);\n      h = Umul32(h, m);\n      break;\n  }\n\n  h ^= h >>> 13;\n  h = Umul32(h, m);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nfunction UInt32(str, pos) {\n  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);\n}\n\nfunction UInt16(str, pos) {\n  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);\n}\n\nfunction Umul32(n, m) {\n  n = n | 0;\n  m = m | 0;\n  var nlo = n & 0xffff;\n  var nhi = n >>> 16;\n  var res = nlo * m + ((nhi * m & 0xffff) << 16) | 0;\n  return res;\n}\n\nvar pa = function fa(ha) {\n  function V(b, c, d, k, l) {\n    for (var a = 0, f = 0, n = 0, e = 0, h, q, m, v = 0, A = 0, B = 0, x = 0, C = 0, p = 0, G = 0, r = 0, N = q = 0, L = 0, t = 0, D = d.length, F = D - 1, g = \"\", u = \"\", S = \"\", M = \"\", H; r < D;) {\n      m = d.charCodeAt(r);\n      r === F && 0 !== f + e + n + a && (0 !== f && (m = 47 === f ? 10 : 47), e = n = a = 0, D++, F++);\n\n      if (0 === f + e + n + a) {\n        if (r === F && (0 < q && (g = g.replace(P, \"\")), 0 < g.trim().length)) {\n          switch (m) {\n            case 32:\n            case 9:\n            case 59:\n            case 13:\n            case 10:\n              break;\n\n            default:\n              g += d.charAt(r);\n          }\n\n          m = 59;\n        }\n\n        if (1 === N) switch (m) {\n          case 123:\n          case 125:\n          case 59:\n          case 34:\n          case 39:\n          case 40:\n          case 41:\n          case 44:\n            N = 0;\n\n          case 9:\n          case 13:\n          case 10:\n          case 32:\n            break;\n\n          default:\n            for (N = 0, t = r, h = m, r--, m = 59; t < D;) {\n              switch (d.charCodeAt(++t)) {\n                case 10:\n                case 13:\n                case 59:\n                  r++, m = h;\n\n                case 58:\n                case 123:\n                  t = D;\n              }\n            }\n\n        }\n\n        switch (m) {\n          case 123:\n            g = g.trim();\n            h = g.charCodeAt(0);\n            x = 1;\n\n            for (t = ++r; r < D;) {\n              m = d.charCodeAt(r);\n\n              switch (m) {\n                case 123:\n                  x++;\n                  break;\n\n                case 125:\n                  x--;\n              }\n\n              if (0 === x) break;\n              r++;\n            }\n\n            p = d.substring(t, r);\n            0 === h && (h = (g = g.replace(qa, \"\").trim()).charCodeAt(0));\n\n            switch (h) {\n              case 64:\n                0 < q && (g = g.replace(P, \"\"));\n                q = g.charCodeAt(1);\n\n                switch (q) {\n                  case 100:\n                  case 109:\n                  case 115:\n                  case 45:\n                    h = c;\n                    break;\n\n                  default:\n                    h = W;\n                }\n\n                p = V(c, h, p, q, l + 1);\n                t = p.length;\n                0 < X && 0 === t && (t = g.length);\n                0 < E && (h = ia(W, g, L), H = O(3, p, h, c, I, y, t, q, l), g = h.join(\"\"), void 0 !== H && 0 === (t = (p = H.trim()).length) && (q = 0, p = \"\"));\n                if (0 < t) switch (q) {\n                  case 115:\n                    g = g.replace(ra, sa);\n\n                  case 100:\n                  case 109:\n                  case 45:\n                    p = g + \"{\" + p + \"}\";\n                    break;\n\n                  case 107:\n                    g = g.replace(ta, \"$1 $2\" + (0 < Q ? T : \"\"));\n                    p = g + \"{\" + p + \"}\";\n                    p = 1 === w || 2 === w && U(\"@\" + p, 3) ? \"@-webkit-\" + p + \"@\" + p : \"@\" + p;\n                    break;\n\n                  default:\n                    p = g + p, 112 === k && (p = (u += p, \"\"));\n                } else p = \"\";\n                break;\n\n              default:\n                p = V(c, ia(c, g, L), p, k, l + 1);\n            }\n\n            S += p;\n            p = L = q = G = N = C = 0;\n            g = \"\";\n            m = d.charCodeAt(++r);\n            break;\n\n          case 125:\n          case 59:\n            g = (0 < q ? g.replace(P, \"\") : g).trim();\n            if (1 < (t = g.length)) switch (0 === G && (h = g.charCodeAt(0), 45 === h || 96 < h && 123 > h) && (t = (g = g.replace(\" \", \":\")).length), 0 < E && void 0 !== (H = O(1, g, c, b, I, y, u.length, k, l)) && 0 === (t = (g = H.trim()).length) && (g = \"\\x00\\x00\"), h = g.charCodeAt(0), q = g.charCodeAt(1), h + q) {\n              case 0:\n                break;\n\n              case 169:\n              case 163:\n                M += g + d.charAt(r);\n                break;\n\n              default:\n                58 !== g.charCodeAt(t - 1) && (u += ja(g, h, q, g.charCodeAt(2)));\n            }\n            L = q = G = N = C = 0;\n            g = \"\";\n            m = d.charCodeAt(++r);\n        }\n      }\n\n      switch (m) {\n        case 13:\n        case 10:\n          if (0 === f + e + n + a + ka) switch (B) {\n            case 41:\n            case 39:\n            case 34:\n            case 64:\n            case 126:\n            case 62:\n            case 42:\n            case 43:\n            case 47:\n            case 45:\n            case 58:\n            case 44:\n            case 59:\n            case 123:\n            case 125:\n              break;\n\n            default:\n              0 < G && (N = 1);\n          }\n          47 === f ? f = 0 : 0 === z + C && (q = 1, g += \"\\x00\");\n          0 < E * la && O(0, g, c, b, I, y, u.length, k, l);\n          y = 1;\n          I++;\n          break;\n\n        case 59:\n        case 125:\n          if (0 === f + e + n + a) {\n            y++;\n            break;\n          }\n\n        default:\n          y++;\n          h = d.charAt(r);\n\n          switch (m) {\n            case 9:\n            case 32:\n              if (0 === e + a + f) switch (v) {\n                case 44:\n                case 58:\n                case 9:\n                case 32:\n                  h = \"\";\n                  break;\n\n                default:\n                  32 !== m && (h = \" \");\n              }\n              break;\n\n            case 0:\n              h = \"\\\\0\";\n              break;\n\n            case 12:\n              h = \"\\\\f\";\n              break;\n\n            case 11:\n              h = \"\\\\v\";\n              break;\n\n            case 38:\n              0 === e + f + a && 0 < z && (q = L = 1, h = \"\\f\" + h);\n              break;\n\n            case 108:\n              if (0 === e + f + a + J && 0 < G) switch (r - G) {\n                case 2:\n                  112 === v && 58 === d.charCodeAt(r - 3) && (J = v);\n\n                case 8:\n                  111 === A && (J = A);\n              }\n              break;\n\n            case 58:\n              0 === e + f + a && (G = r);\n              break;\n\n            case 44:\n              0 === f + n + e + a && (q = 1, h += \"\\r\");\n              break;\n\n            case 34:\n              0 === f && (e = e === m ? 0 : 0 === e ? m : e);\n              break;\n\n            case 39:\n              0 === f && (e = e === m ? 0 : 0 === e ? m : e);\n              break;\n\n            case 91:\n              0 === e + f + n && a++;\n              break;\n\n            case 93:\n              0 === e + f + n && a--;\n              break;\n\n            case 41:\n              0 === e + f + a && n--;\n              break;\n\n            case 40:\n              if (0 === e + f + a) {\n                if (0 === C) switch (2 * v + 3 * A) {\n                  case 533:\n                    break;\n\n                  default:\n                    x = 0, C = 1;\n                }\n                n++;\n              }\n\n              break;\n\n            case 64:\n              0 === f + n + e + a + G + p && (p = 1);\n              break;\n\n            case 42:\n            case 47:\n              if (!(0 < e + a + n)) switch (f) {\n                case 0:\n                  switch (2 * m + 3 * d.charCodeAt(r + 1)) {\n                    case 235:\n                      f = 47;\n                      break;\n\n                    case 220:\n                      t = r, f = 42;\n                  }\n\n                  break;\n\n                case 42:\n                  47 === m && 42 === v && (33 === d.charCodeAt(t + 2) && (u += d.substring(t, r + 1)), h = \"\", f = 0);\n              }\n          }\n\n          if (0 === f) {\n            if (0 === z + e + a + p && 107 !== k && 59 !== m) switch (m) {\n              case 44:\n              case 126:\n              case 62:\n              case 43:\n              case 41:\n              case 40:\n                if (0 === C) {\n                  switch (v) {\n                    case 9:\n                    case 32:\n                    case 10:\n                    case 13:\n                      h += \"\\x00\";\n                      break;\n\n                    default:\n                      h = \"\\x00\" + h + (44 === m ? \"\" : \"\\x00\");\n                  }\n\n                  q = 1;\n                } else switch (m) {\n                  case 40:\n                    C = ++x;\n                    break;\n\n                  case 41:\n                    0 === (C = --x) && (q = 1, h += \"\\x00\");\n                }\n\n                break;\n\n              case 9:\n              case 32:\n                switch (v) {\n                  case 0:\n                  case 123:\n                  case 125:\n                  case 59:\n                  case 44:\n                  case 12:\n                  case 9:\n                  case 32:\n                  case 10:\n                  case 13:\n                    break;\n\n                  default:\n                    0 === C && (q = 1, h += \"\\x00\");\n                }\n\n            }\n            g += h;\n            32 !== m && 9 !== m && (B = m);\n          }\n\n      }\n\n      A = v;\n      v = m;\n      r++;\n    }\n\n    t = u.length;\n    0 < X && 0 === t && 0 === S.length && 0 === c[0].length === !1 && (109 !== k || 1 === c.length && (0 < z ? K : R) === c[0]) && (t = c.join(\",\").length + 2);\n\n    if (0 < t) {\n      if (0 === z && 107 !== k) {\n        d = 0;\n        a = c.length;\n\n        for (f = Array(a); d < a; ++d) {\n          v = c[d].split(ua);\n          A = \"\";\n          B = 0;\n\n          for (D = v.length; B < D; ++B) {\n            if (!(0 === (x = (e = v[B]).length) && 1 < D)) {\n              r = A.charCodeAt(A.length - 1);\n              L = e.charCodeAt(0);\n              n = \"\";\n              if (0 !== B) switch (r) {\n                case 42:\n                case 126:\n                case 62:\n                case 43:\n                case 32:\n                case 40:\n                  break;\n\n                default:\n                  n = \" \";\n              }\n\n              switch (L) {\n                case 38:\n                  e = n + K;\n\n                case 126:\n                case 62:\n                case 43:\n                case 32:\n                case 41:\n                case 40:\n                  break;\n\n                case 91:\n                  e = n + e + K;\n                  break;\n\n                case 58:\n                  switch (2 * e.charCodeAt(1) + 3 * e.charCodeAt(2)) {\n                    case 530:\n                      if (0 < Y) {\n                        e = n + e.substring(8, x - 1);\n                        break;\n                      }\n\n                    default:\n                      if (1 > B || 1 > v[B - 1].length) e = n + K + e;\n                  }\n\n                  break;\n\n                case 44:\n                  n = \"\";\n\n                default:\n                  e = 1 < x && 0 < e.indexOf(\":\") ? n + e.replace(va, \"$1\" + K + \"$2\") : n + e + K;\n              }\n\n              A += e;\n            }\n          }\n\n          f[d] = A.replace(P, \"\").trim();\n        }\n\n        c = f;\n      }\n\n      h = c;\n      if (0 < E && (H = O(2, u, h, b, I, y, t, k, l), void 0 !== H && 0 === (u = H).length)) return M + u + S;\n      u = h.join(\",\") + \"{\" + u + \"}\";\n\n      if (0 !== w * J) {\n        2 !== w || U(u, 2) || (J = 0);\n\n        switch (J) {\n          case 111:\n            u = u.replace(wa, \":-moz-$1\") + u;\n            break;\n\n          case 112:\n            u = u.replace(Z, \"::-webkit-input-$1\") + u.replace(Z, \"::-moz-$1\") + u.replace(Z, \":-ms-input-$1\") + u;\n        }\n\n        J = 0;\n      }\n    }\n\n    return M + u + S;\n  }\n\n  function ia(b, c, d) {\n    var k = c.trim().split(xa);\n    c = k;\n    var l = k.length,\n        a = b.length;\n\n    switch (a) {\n      case 0:\n      case 1:\n        var f = 0;\n\n        for (b = 0 === a ? \"\" : b[0] + \" \"; f < l; ++f) {\n          c[f] = ma(b, c[f], d, a).trim();\n        }\n\n        break;\n\n      default:\n        var n = f = 0;\n\n        for (c = []; f < l; ++f) {\n          for (var e = 0; e < a; ++e) {\n            c[n++] = ma(b[e] + \" \", k[f], d, a).trim();\n          }\n        }\n\n    }\n\n    return c;\n  }\n\n  function ma(b, c, d, k) {\n    var l = c.charCodeAt(0);\n    33 > l && (l = (c = c.trim()).charCodeAt(0));\n\n    switch (l) {\n      case 38:\n        switch (z + k) {\n          case 0:\n          case 1:\n            if (0 === b.trim().length) break;\n\n          default:\n            return c.replace(M, \"$1\" + b.trim());\n        }\n\n        break;\n\n      case 58:\n        switch (c.charCodeAt(1)) {\n          case 103:\n            if (0 < Y && 0 < z) return c.replace(ya, \"$1\").replace(M, \"$1\" + R);\n            break;\n\n          default:\n            return b.trim() + c;\n        }\n\n      default:\n        if (0 < d * z && 0 < c.indexOf(\"\\f\")) return c.replace(M, (58 === b.charCodeAt(0) ? \"\" : \"$1\") + b.trim());\n    }\n\n    return b + c;\n  }\n\n  function ja(b, c, d, k) {\n    var l = 0,\n        a = b + \";\";\n    c = 2 * c + 3 * d + 4 * k;\n\n    if (944 === c) {\n      l = a.length;\n      b = a.indexOf(\":\", 9) + 1;\n      d = a.substring(0, b).trim();\n      k = a.substring(b, l - 1).trim();\n\n      switch (a.charCodeAt(9) * Q) {\n        case 0:\n          break;\n\n        case 45:\n          if (110 !== a.charCodeAt(10)) break;\n\n        default:\n          for (a = k.split((k = \"\", za)), b = c = 0, l = a.length; c < l; b = 0, ++c) {\n            for (var f = a[c], n = f.split(Aa); f = n[b];) {\n              var e = f.charCodeAt(0);\n              if (1 === Q && (64 < e && 90 > e || 96 < e && 123 > e || 95 === e || 45 === e && 45 !== f.charCodeAt(1))) switch (isNaN(parseFloat(f)) + (-1 !== f.indexOf(\"(\"))) {\n                case 1:\n                  switch (f) {\n                    case \"infinite\":\n                    case \"alternate\":\n                    case \"backwards\":\n                    case \"running\":\n                    case \"normal\":\n                    case \"forwards\":\n                    case \"both\":\n                    case \"none\":\n                    case \"linear\":\n                    case \"ease\":\n                    case \"ease-in\":\n                    case \"ease-out\":\n                    case \"ease-in-out\":\n                    case \"paused\":\n                    case \"reverse\":\n                    case \"alternate-reverse\":\n                    case \"inherit\":\n                    case \"initial\":\n                    case \"unset\":\n                    case \"step-start\":\n                    case \"step-end\":\n                      break;\n\n                    default:\n                      f += T;\n                  }\n\n              }\n              n[b++] = f;\n            }\n\n            k += (0 === c ? \"\" : \",\") + n.join(\" \");\n          }\n\n      }\n\n      k = d + k + \";\";\n      return 1 === w || 2 === w && U(k, 1) ? \"-webkit-\" + k + k : k;\n    }\n\n    if (0 === w || 2 === w && !U(a, 1)) return a;\n\n    switch (c) {\n      case 1015:\n        return 45 === a.charCodeAt(9) ? \"-webkit-\" + a + a : a;\n\n      case 951:\n        return 116 === a.charCodeAt(3) ? \"-webkit-\" + a + a : a;\n\n      case 963:\n        return 110 === a.charCodeAt(5) ? \"-webkit-\" + a + a : a;\n\n      case 1009:\n        if (100 !== a.charCodeAt(4)) break;\n\n      case 969:\n      case 942:\n        return \"-webkit-\" + a + a;\n\n      case 978:\n        return \"-webkit-\" + a + \"-moz-\" + a + a;\n\n      case 1019:\n      case 983:\n        return \"-webkit-\" + a + \"-moz-\" + a + \"-ms-\" + a + a;\n\n      case 883:\n        return 45 === a.charCodeAt(8) ? \"-webkit-\" + a + a : a;\n\n      case 932:\n        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {\n          case 103:\n            return \"-webkit-box-\" + a.replace(\"-grow\", \"\") + \"-webkit-\" + a + \"-ms-\" + a.replace(\"grow\", \"positive\") + a;\n\n          case 115:\n            return \"-webkit-\" + a + \"-ms-\" + a.replace(\"shrink\", \"negative\") + a;\n\n          case 98:\n            return \"-webkit-\" + a + \"-ms-\" + a.replace(\"basis\", \"preferred-size\") + a;\n        }\n        return \"-webkit-\" + a + \"-ms-\" + a + a;\n\n      case 964:\n        return \"-webkit-\" + a + \"-ms-flex-\" + a + a;\n\n      case 1023:\n        if (99 !== a.charCodeAt(8)) break;\n        b = a.substring(a.indexOf(\":\", 15)).replace(\"flex-\", \"\").replace(\"space-between\", \"justify\");\n        return \"-webkit-box-pack\" + b + \"-webkit-\" + a + \"-ms-flex-pack\" + b + a;\n\n      case 1005:\n        return Ba.test(a) ? a.replace(na, \":-webkit-\") + a.replace(na, \":-moz-\") + a : a;\n\n      case 1E3:\n        b = a.substring(13).trim();\n        l = b.indexOf(\"-\") + 1;\n\n        switch (b.charCodeAt(0) + b.charCodeAt(l)) {\n          case 226:\n            b = a.replace(aa, \"tb\");\n            break;\n\n          case 232:\n            b = a.replace(aa, \"tb-rl\");\n            break;\n\n          case 220:\n            b = a.replace(aa, \"lr\");\n            break;\n\n          default:\n            return a;\n        }\n\n        return \"-webkit-\" + a + \"-ms-\" + b + a;\n\n      case 1017:\n        if (-1 === a.indexOf(\"sticky\", 9)) break;\n\n      case 975:\n        l = (a = b).length - 10;\n        b = (33 === a.charCodeAt(l) ? a.substring(0, l) : a).substring(b.indexOf(\":\", 7) + 1).trim();\n\n        switch (c = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {\n          case 203:\n            if (111 > b.charCodeAt(8)) break;\n\n          case 115:\n            a = a.replace(b, \"-webkit-\" + b) + \";\" + a;\n            break;\n\n          case 207:\n          case 102:\n            a = a.replace(b, \"-webkit-\" + (102 < c ? \"inline-\" : \"\") + \"box\") + \";\" + a.replace(b, \"-webkit-\" + b) + \";\" + a.replace(b, \"-ms-\" + b + \"box\") + \";\" + a;\n        }\n\n        return a + \";\";\n\n      case 938:\n        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {\n          case 105:\n            return b = a.replace(\"-items\", \"\"), \"-webkit-\" + a + \"-webkit-box-\" + b + \"-ms-flex-\" + b + a;\n\n          case 115:\n            return \"-webkit-\" + a + \"-ms-flex-item-\" + a.replace(Ca, \"\") + a;\n\n          default:\n            return \"-webkit-\" + a + \"-ms-flex-line-pack\" + a.replace(\"align-content\", \"\") + a;\n        }\n        break;\n\n      case 953:\n        if (0 < (l = a.indexOf(\"-content\", 9)) && 109 === a.charCodeAt(l - 3) && 45 !== a.charCodeAt(l - 4)) return b = a.substring(l - 3), \"width:-webkit-\" + b + \"width:-moz-\" + b + \"width:\" + b;\n        break;\n\n      case 962:\n        if (a = \"-webkit-\" + a + (102 === a.charCodeAt(5) ? \"-ms-\" + a : \"\") + a, 211 === d + k && 105 === a.charCodeAt(13) && 0 < a.indexOf(\"transform\", 10)) return a.substring(0, a.indexOf(\";\", 27) + 1).replace(Da, \"$1-webkit-$2\") + a;\n    }\n\n    return a;\n  }\n\n  function U(b, c) {\n    var d = b.indexOf(1 === c ? \":\" : \"{\"),\n        k = b.substring(0, 3 !== c ? d : 10);\n    d = b.substring(d + 1, b.length - 1);\n    return ba(2 !== c ? k : k.replace(Ea, \"$1\"), d, c);\n  }\n\n  function sa(b, c) {\n    var d = ja(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));\n    return d !== c + \";\" ? d.replace(Fa, \" or ($1)\").substring(4) : \"(\" + c + \")\";\n  }\n\n  function O(b, c, d, k, l, a, f, n, e) {\n    for (var h = 0, q = c, m; h < E; ++h) {\n      switch (m = ca[h].call(F, b, q, d, k, l, a, f, n, e)) {\n        case void 0:\n        case !1:\n        case !0:\n        case null:\n          break;\n\n        default:\n          q = m;\n      }\n    }\n\n    switch (q) {\n      case void 0:\n      case !1:\n      case !0:\n      case null:\n      case c:\n        break;\n\n      default:\n        return q;\n    }\n  }\n\n  function da(b) {\n    switch (b) {\n      case void 0:\n      case null:\n        E = ca.length = 0;\n        break;\n\n      default:\n        switch (b.constructor) {\n          case Array:\n            for (var c = 0, d = b.length; c < d; ++c) {\n              da(b[c]);\n            }\n\n            break;\n\n          case Function:\n            ca[E++] = b;\n            break;\n\n          case Boolean:\n            la = !!b | 0;\n        }\n\n    }\n\n    return da;\n  }\n\n  function ea(b) {\n    for (var c in b) {\n      var d = b[c];\n\n      switch (c) {\n        case \"keyframe\":\n          Q = d | 0;\n          break;\n\n        case \"global\":\n          Y = d | 0;\n          break;\n\n        case \"cascade\":\n          z = d | 0;\n          break;\n\n        case \"compress\":\n          oa = d | 0;\n          break;\n\n        case \"semicolon\":\n          ka = d | 0;\n          break;\n\n        case \"preserve\":\n          X = d | 0;\n          break;\n\n        case \"prefix\":\n          ba = null, d ? \"function\" !== typeof d ? w = 1 : (w = 2, ba = d) : w = 0;\n      }\n    }\n\n    return ea;\n  }\n\n  function F(b, c) {\n    if (void 0 !== this && this.constructor === F) return fa(b);\n    var d = b,\n        k = d.charCodeAt(0);\n    33 > k && (k = (d = d.trim()).charCodeAt(0));\n    0 < Q && (T = d.replace(Ga, 91 === k ? \"\" : \"-\"));\n    k = 1;\n    1 === z ? R = d : K = d;\n    d = [R];\n\n    if (0 < E) {\n      var l = O(-1, c, d, d, I, y, 0, 0, 0);\n      void 0 !== l && \"string\" === typeof l && (c = l);\n    }\n\n    var a = V(W, d, c, 0, 0);\n    0 < E && (l = O(-2, a, d, d, I, y, a.length, 0, 0), void 0 !== l && \"string\" !== typeof (a = l) && (k = 0));\n    K = R = T = \"\";\n    J = 0;\n    y = I = 1;\n    return 0 === oa * k ? a : a.replace(P, \"\").replace(Ha, \"\").replace(Ia, \"$1\").replace(Ja, \"$1\").replace(Ka, \" \");\n  }\n\n  var qa = /^\\0+/g,\n      P = /[\\0\\r\\f]/g,\n      na = /: */g,\n      Ba = /zoo|gra/,\n      Da = /([,: ])(transform)/g,\n      za = /,+\\s*(?![^(]*[)])/g,\n      Aa = / +\\s*(?![^(]*[)])/g,\n      ua = / *[\\0] */g,\n      xa = /,\\r+?/g,\n      M = /([\\t\\r\\n ])*\\f?&/g,\n      ya = /:global\\(((?:[^\\(\\)\\[\\]]*|\\[.*\\]|\\([^\\(\\)]*\\))*)\\)/g,\n      Ga = /\\W+/g,\n      ta = /@(k\\w+)\\s*(\\S*)\\s*/,\n      Z = /::(place)/g,\n      wa = /:(read-only)/g,\n      Ha = /\\s+(?=[{\\];=:>])/g,\n      Ia = /([[}=:>])\\s+/g,\n      Ja = /(\\{[^{]+?);(?=\\})/g,\n      Ka = /\\s{2,}/g,\n      va = /([^\\(])(:+) */g,\n      aa = /[svh]\\w+-[tblr]{2}/,\n      ra = /\\(\\s*(.*)\\s*\\)/g,\n      Fa = /([^]*?);/g,\n      Ca = /-self|flex-/g,\n      Ea = /[^]*?(:[rp][el]a[\\w-]+)[^]*/,\n      y = 1,\n      I = 1,\n      J = 0,\n      z = 1,\n      w = 1,\n      Y = 1,\n      oa = 0,\n      ka = 0,\n      X = 0,\n      W = [],\n      ca = [],\n      E = 0,\n      ba = null,\n      la = 0,\n      Q = 1,\n      T = \"\",\n      K = \"\",\n      R = \"\";\n  F.use = da;\n  F.set = ea;\n  void 0 !== ha && ea(ha);\n  return F;\n};\n\n//  weak\nfunction memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\nvar STYLES_KEY = '__emotion_styles';\nvar TARGET_KEY = '__emotion_target';\nvar unitless = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  fontWeight: 1,\n  lineClamp: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return sheet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return useStylisPlugin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return registered; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return inserted; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return css; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return keyframes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return injectGlobal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return fontFace; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return getRegisteredStyles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return merge; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return cx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return hydrate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return flush; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_emotion_utils__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_stylis_rule_sheet__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_stylis_rule_sheet___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_stylis_rule_sheet__);\n\n\n\n/*\n\nhigh performance StyleSheet for css-in-js systems\n\n- uses multiple style tags behind the scenes for millions of rules\n- uses `insertRule` for appending in production for *much* faster performance\n- 'polyfills' on server side\n\n// usage\n\nimport StyleSheet from 'glamor/lib/sheet'\nlet styleSheet = new StyleSheet()\n\nstyleSheet.inject()\n- 'injects' the stylesheet into the page (or into memory if on server)\n\nstyleSheet.insert('#box { border: 1px solid red; }')\n- appends a css rule into the stylesheet\n\nstyleSheet.flush()\n- empties the stylesheet of all its contents\n\n*/\nfunction sheetForTag(tag) {\n  if (tag.sheet) {\n    return tag.sheet;\n  } // this weirdness brought to you by firefox\n\n\n  for (var i = 0; i < document.styleSheets.length; i++) {\n    if (document.styleSheets[i].ownerNode === tag) {\n      return document.styleSheets[i];\n    }\n  }\n}\n\nfunction makeStyleTag() {\n  var tag = document.createElement('style');\n  tag.type = 'text/css';\n  tag.setAttribute('data-emotion', '');\n  tag.appendChild(document.createTextNode(''));\n  document.head.appendChild(tag);\n  return tag;\n}\n\nvar StyleSheet =\n/*#__PURE__*/\nfunction () {\n  function StyleSheet() {\n    this.isBrowser = typeof window !== 'undefined';\n    this.isSpeedy = \"development\" === 'production'; // the big drawback here is that the css won't be editable in devtools\n\n    this.tags = [];\n    this.ctr = 0;\n  }\n\n  var _proto = StyleSheet.prototype;\n\n  _proto.inject = function inject() {\n    if (this.injected) {\n      throw new Error('already injected!');\n    }\n\n    if (this.isBrowser) {\n      this.tags[0] = makeStyleTag();\n    } else {\n      // server side 'polyfill'. just enough behavior to be useful.\n      this.sheet = [];\n    }\n\n    this.injected = true;\n  };\n\n  _proto.speedy = function speedy(bool) {\n    if (this.ctr !== 0) {\n      // cannot change speedy mode after inserting any rule to sheet. Either call speedy(${bool}) earlier in your app, or call flush() before speedy(${bool})\n      throw new Error(\"cannot change speedy now\");\n    }\n\n    this.isSpeedy = !!bool;\n  };\n\n  _proto.insert = function insert(rule, sourceMap) {\n    if (this.isBrowser) {\n      // this is the ultrafast version, works across browsers\n      if (this.isSpeedy) {\n        var tag = this.tags[this.tags.length - 1];\n        var sheet = sheetForTag(tag);\n\n        try {\n          sheet.insertRule(rule, sheet.cssRules.length);\n        } catch (e) {\n          if (true) {\n            console.warn('illegal rule', rule); // eslint-disable-line no-console\n          }\n        }\n      } else {\n        var _tag = makeStyleTag();\n\n        this.tags.push(_tag);\n\n        _tag.appendChild(document.createTextNode(rule + (sourceMap || '')));\n      }\n\n      this.ctr++;\n\n      if (this.ctr % 65000 === 0) {\n        this.tags.push(makeStyleTag());\n      }\n    } else {\n      // enough 'spec compliance' to be able to extract the rules later\n      // in other words, just the rule\n      this.sheet.push(rule);\n    }\n  };\n\n  _proto.flush = function flush() {\n    if (this.isBrowser) {\n      this.tags.forEach(function (tag) {\n        return tag.parentNode.removeChild(tag);\n      });\n      this.tags = [];\n      this.ctr = 0; // todo - look for remnants in document.styleSheets\n    } else {\n      // simpler on server\n      this.sheet = [];\n    }\n\n    this.injected = false;\n  };\n\n  return StyleSheet;\n}();\n\nvar sheet = new StyleSheet(); // 🚀\n\nsheet.inject();\nvar stylisOptions = {\n  keyframe: false\n};\n\nif (true) {\n  stylisOptions.compress = false;\n}\n\nvar stylis = new __WEBPACK_IMPORTED_MODULE_0_emotion_utils__[\"b\" /* Stylis */](stylisOptions);\nvar externalStylisPlugins = [];\nvar use = stylis.use;\n\nfunction insertRule(rule) {\n  sheet.insert(rule, currentSourceMap);\n}\n\nvar insertionPlugin = __WEBPACK_IMPORTED_MODULE_1_stylis_rule_sheet___default()(insertRule);\nvar useStylisPlugin = function useStylisPlugin(plugin) {\n  externalStylisPlugins.push(plugin);\n  use(null)(externalStylisPlugins)(insertionPlugin);\n};\nvar registered = {};\nvar inserted = {};\nvar currentSourceMap = '';\nstylis.use(insertionPlugin);\n\nfunction handleInterpolation(interpolation, couldBeSelectorInterpolation) {\n  if (interpolation == null) {\n    return '';\n  }\n\n  switch (typeof interpolation) {\n    case 'boolean':\n      return '';\n\n    case 'function':\n      if (interpolation[__WEBPACK_IMPORTED_MODULE_0_emotion_utils__[\"a\" /* STYLES_KEY */]] !== undefined) {\n        if (\"development\" !== 'production' && interpolation[__WEBPACK_IMPORTED_MODULE_0_emotion_utils__[\"c\" /* TARGET_KEY */]] === undefined) {\n          throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');\n        }\n\n        return \".\" + interpolation[__WEBPACK_IMPORTED_MODULE_0_emotion_utils__[\"c\" /* TARGET_KEY */]];\n      }\n\n      return handleInterpolation.call(this, this === undefined ? interpolation() : interpolation(this.mergedProps, this.context), couldBeSelectorInterpolation);\n\n    case 'object':\n      return createStringFromObject.call(this, interpolation);\n\n    default:\n      var cached = registered[interpolation];\n      return couldBeSelectorInterpolation === false && cached !== undefined ? cached : interpolation;\n  }\n}\n\nvar hyphenateRegex = /[A-Z]|^ms/g;\nvar processStyleName = Object(__WEBPACK_IMPORTED_MODULE_0_emotion_utils__[\"e\" /* memoize */])(function (styleName) {\n  return styleName.replace(hyphenateRegex, '-$&').toLowerCase();\n});\n\nvar processStyleValue = function processStyleValue(key, value) {\n  if (value === undefined || value === null || typeof value === 'boolean') return '';\n\n  if (__WEBPACK_IMPORTED_MODULE_0_emotion_utils__[\"f\" /* unitless */][key] !== 1 && key.charCodeAt(1) !== 45 && // custom properties\n  !isNaN(value) && value !== 0) {\n    return value + 'px';\n  }\n\n  return value;\n};\n\nvar objectToStringCache = new WeakMap();\n\nfunction createStringFromObject(obj) {\n  if (objectToStringCache.has(obj)) {\n    return objectToStringCache.get(obj);\n  }\n\n  var string = '';\n\n  if (Array.isArray(obj)) {\n    obj.forEach(function (interpolation) {\n      string += handleInterpolation.call(this, interpolation, false);\n    }, this);\n  } else {\n    Object.keys(obj).forEach(function (key) {\n      if (typeof obj[key] !== 'object') {\n        if (registered[obj[key]] !== undefined) {\n          string += key + \"{\" + registered[obj[key]] + \"}\";\n        } else {\n          string += processStyleName(key) + \":\" + processStyleValue(key, obj[key]) + \";\";\n        }\n      } else {\n        string += key + \"{\" + handleInterpolation.call(this, obj[key], false) + \"}\";\n      }\n    }, this);\n  }\n\n  objectToStringCache.set(obj, string);\n  return string;\n}\n\nfunction isLastCharDot(string) {\n  return string.charCodeAt(string.length - 1) === 46; // .\n}\n\nvar hash;\nvar name;\nvar labelPattern = /label:\\s*([^\\s;\\n]+)\\s*[;\\n]/g;\n\nfunction createStyles(strings) {\n  var stringMode = true;\n  var styles = '';\n  var identifierName = '';\n\n  if (strings == null || strings.raw === undefined) {\n    stringMode = false;\n    styles = handleInterpolation.call(this, strings, false);\n  } else {\n    styles = strings[0];\n  }\n\n  for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    interpolations[_key - 1] = arguments[_key];\n  }\n\n  interpolations.forEach(function (interpolation, i) {\n    styles += handleInterpolation.call(this, interpolation, isLastCharDot(styles));\n\n    if (stringMode === true && strings[i + 1] !== undefined) {\n      styles += strings[i + 1];\n    }\n  }, this);\n  styles = styles.replace(labelPattern, function (match, p1) {\n    identifierName += \"-\" + p1;\n    return '';\n  });\n  hash = Object(__WEBPACK_IMPORTED_MODULE_0_emotion_utils__[\"d\" /* hashString */])(styles + identifierName);\n  name = hash + identifierName;\n  return styles;\n}\n\nif (true) {\n  var sourceMapRegEx = /\\/\\*#\\ssourceMappingURL=data:application\\/json;\\S+\\s+\\*\\//;\n  var oldStylis = stylis;\n\n  stylis = function stylis(selector, styles) {\n    var result = sourceMapRegEx.exec(styles);\n    currentSourceMap = result ? result[0] : '';\n    oldStylis(selector, styles);\n    currentSourceMap = '';\n  };\n}\n\nfunction css() {\n  var styles = createStyles.apply(this, arguments);\n  var selector = \"css-\" + name;\n\n  if (registered[selector] === undefined) {\n    registered[selector] = styles;\n  }\n\n  if (inserted[hash] === undefined) {\n    stylis(\".\" + selector, styles);\n    inserted[hash] = true;\n  }\n\n  return selector;\n}\nfunction keyframes() {\n  var styles = createStyles.apply(this, arguments);\n  var animation = \"animation-\" + name;\n\n  if (inserted[hash] === undefined) {\n    stylis('', \"@keyframes \" + animation + \"{\" + styles + \"}\");\n    inserted[hash] = true;\n  }\n\n  return animation;\n}\nfunction injectGlobal() {\n  var styles = createStyles.apply(this, arguments);\n\n  if (inserted[hash] === undefined) {\n    stylis('', styles);\n    inserted[hash] = true;\n  }\n}\nfunction fontFace() {\n  var styles = createStyles.apply(void 0, arguments);\n\n  if (inserted[hash] === undefined) {\n    stylis('', \"@font-face{\" + styles + \"}\");\n    inserted[hash] = true;\n  }\n}\nfunction getRegisteredStyles(registeredStyles, classNames) {\n  var rawClassName = '';\n  classNames.split(' ').forEach(function (className) {\n    if (registered[className] !== undefined) {\n      registeredStyles.push(className);\n    } else {\n      rawClassName += className + \" \";\n    }\n  });\n  return rawClassName;\n}\nfunction merge(className, sourceMap) {\n  var registeredStyles = [];\n  var rawClassName = getRegisteredStyles(registeredStyles, className);\n\n  if (registeredStyles.length < 2) {\n    return className;\n  }\n\n  return rawClassName + css(registeredStyles, sourceMap);\n}\n\nfunction classnames() {\n  var len = arguments.length;\n  var i = 0;\n  var cls = '';\n\n  for (; i < len; i++) {\n    var arg = arguments[i];\n    if (arg == null) continue;\n    var next = cls && cls + ' ' || cls;\n\n    switch (typeof arg) {\n      case 'boolean':\n        break;\n\n      case 'function':\n        cls = next + classnames(arg());\n        break;\n\n      case 'object':\n        {\n          if (Array.isArray(arg)) {\n            cls = next + classnames.apply(null, arg);\n          } else {\n            for (var k in arg) {\n              if (arg[k]) {\n                cls && (cls += ' ');\n                cls += k;\n              }\n            }\n          }\n\n          break;\n        }\n\n      default:\n        {\n          cls = next + arg;\n        }\n    }\n  }\n\n  return cls;\n}\n\nfunction cx() {\n  return merge(classnames.apply(void 0, arguments));\n}\nfunction hydrate(ids) {\n  ids.forEach(function (id) {\n    inserted[id] = true;\n  });\n}\nfunction flush() {\n  sheet.flush();\n  inserted = {};\n  registered = {};\n  sheet.inject();\n}\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcz83YmFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (true) {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzPzczMTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\nvar emptyFunction = __webpack_require__(20);\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (true) {\n  var printWarning = function printWarning(format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function warning(condition, format) {\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcz82MzI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBlbXB0eUZ1bmN0aW9uO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAnKSA9PT0gMCkge1xuICAgICAgcmV0dXJuOyAvLyBJZ25vcmUgQ29tcG9zaXRlQ29tcG9uZW50IHByb3B0eXBlIGNoZWNrLlxuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanM/ODJkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _preact = __webpack_require__(2);\n\nvar _randomcolor = __webpack_require__(25);\n\nvar _randomcolor2 = _interopRequireDefault(_randomcolor);\n\nvar _store = __webpack_require__(6);\n\nvar _actions = __webpack_require__(7);\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nvar _api = __webpack_require__(8);\n\nvar _polished = __webpack_require__(17);\n\nvar P = _interopRequireWildcard(_polished);\n\nvar _components = __webpack_require__(31);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/***********  FUTURES DEMO  *************/\n\n// Why Futures      versus       promises?\n//     -------                   ---------\n//     lazy                      eager\n//     cancellable               not cancellable\n//     not cached                cached          (you may make Futures stateful by wrapping it in a caching helper)\n//     enforced error handling   optional error handling\n//     catch expected errors     catch all errors\n\n// look at api.js to see the Futures\n// To see the effection fo cancellation, comment out the this.cancel() code below\n// and checkout the network tab when clicking around\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getBreeds();\n      this.loadImages = this.loadImages.bind(this);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var nextIndex = _ref.imagesIndex,\n          breeds = _ref.breeds;\n\n      if (nextIndex === null && breeds.length > 0) {\n        // default to 'a' in breeds list\n        this.props.setImagesIndex(0);\n      }\n      if (this.props.imagesIndex !== nextIndex) {\n        // load new images\n        // In case there is an unresolved Future, cancel\n        if (this.cancel) {\n          this.cancel();\n          this.props.setLoading(false);\n        }\n        this.loadImages(nextIndex);\n      }\n    }\n  }, {\n    key: \"loadImages\",\n    value: function loadImages(nextIndex) {\n      var _this2 = this;\n\n      this.props.setLoading(true);\n      var breeds = this.props.breeds;\n\n      var ids = breeds[nextIndex];\n      // future executed when fork is called\n      this.cancel = (0, _api.getImagesConcurrently)(ids).fork(\n      // rejection branch\n      function (err) {\n        console.log(err);\n        _this2.props.setLoading(false);\n      },\n      // success branch\n      function (res) {\n        _this2.props.setImages(res);\n        _this2.props.setLoading(false);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(_ref2) {\n      var letters = _ref2.letters,\n          color = _ref2.color,\n          imagesIndex = _ref2.imagesIndex,\n          toggleColor = _ref2.toggleColor,\n          getImages = _ref2.getImages,\n          decrementIndex = _ref2.decrementIndex,\n          incrementIndex = _ref2.incrementIndex,\n          setImagesIndex = _ref2.setImagesIndex,\n          images = _ref2.images,\n          breeds = _ref2.breeds,\n          loading = _ref2.loading;\n\n      // Change background so we see each rerender\n      var superColor = (0, _randomcolor2.default)({ luminosity: \"light\" });\n      return (0, _preact.h)(\n        \"div\",\n        { style: { backgroundColor: P.lighten(0.1, superColor), height: '180vh', padding: '10px' } },\n        (0, _preact.h)(\n          _components.Nav,\n          null,\n          letters.map(function (letter, i) {\n            return (0, _preact.h)(\n              _components.LetterButton,\n              {\n                key: i,\n                \"data-images-index\": i,\n                color: superColor,\n                onClick: function onClick(e) {\n                  return setImagesIndex(Number(e.target.getAttribute(\"data-images-index\")));\n                },\n                active: i === imagesIndex\n              },\n              letter\n            );\n          })\n        ),\n        (0, _preact.h)(\n          _components.ArrowButtons,\n          null,\n          (0, _preact.h)(\n            _components.Arrow,\n            { onClick: decrementIndex },\n            \"\\u2190\"\n          ),\n          (0, _preact.h)(\n            _components.Arrow,\n            { onClick: incrementIndex },\n            \"\\u2192\"\n          )\n        ),\n        (0, _preact.h)(\n          _components.Main,\n          null,\n          !loading ? images.map(function (src, i) {\n            return (0, _preact.h)(_components.Pic, { src: src, key: src, name: breeds[imagesIndex][i] });\n          }) : (0, _preact.h)(_components.LoadingSpinner, { color: superColor })\n        ),\n        (0, _preact.h)(_components.SourceLink, { color: superColor })\n      );\n    }\n  }]);\n\n  return App;\n}(_preact.Component);\n\nexports.default = (0, _store.connect)(\"imagesIndex,letters,images,breeds,loading\", _actions2.default)(App);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FwcC5qcz8xNGIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGgsIENvbXBvbmVudCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCByYW5kb21Db2xvciBmcm9tIFwicmFuZG9tY29sb3JcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwiLi9zdG9yZVwiO1xuaW1wb3J0IGFjdGlvbnMgZnJvbSBcIi4vYWN0aW9uc1wiO1xuaW1wb3J0IHsgZ2V0QnJlZWRzLCBnZXRJbWFnZXMsIGdldEltYWdlc0NvbmN1cnJlbnRseSB9IGZyb20gXCIuL2FwaVwiO1xuaW1wb3J0ICogYXMgUCBmcm9tIFwicG9saXNoZWRcIjtcbmltcG9ydCB7XG4gIExldHRlckJ1dHRvbixcbiAgTmF2LFxuICBBcnJvd0J1dHRvbnMsXG4gIEFycm93LFxuICBNYWluLFxuICBQaWMsXG4gIExvYWRpbmdTcGlubmVyLFxuICBTb3VyY2VMaW5rXG59IGZyb20gXCIuL2NvbXBvbmVudHNcIjtcblxuLyoqKioqKioqKioqICBGVVRVUkVTIERFTU8gICoqKioqKioqKioqKiovXG5cbi8vIFdoeSBGdXR1cmVzICAgICAgdmVyc3VzICAgICAgIHByb21pc2VzP1xuLy8gICAgIC0tLS0tLS0gICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tXG4vLyAgICAgbGF6eSAgICAgICAgICAgICAgICAgICAgICBlYWdlclxuLy8gICAgIGNhbmNlbGxhYmxlICAgICAgICAgICAgICAgbm90IGNhbmNlbGxhYmxlXG4vLyAgICAgbm90IGNhY2hlZCAgICAgICAgICAgICAgICBjYWNoZWQgICAgICAgICAgKHlvdSBtYXkgbWFrZSBGdXR1cmVzIHN0YXRlZnVsIGJ5IHdyYXBwaW5nIGl0IGluIGEgY2FjaGluZyBoZWxwZXIpXG4vLyAgICAgZW5mb3JjZWQgZXJyb3IgaGFuZGxpbmcgICBvcHRpb25hbCBlcnJvciBoYW5kbGluZ1xuLy8gICAgIGNhdGNoIGV4cGVjdGVkIGVycm9ycyAgICAgY2F0Y2ggYWxsIGVycm9yc1xuXG4vLyBsb29rIGF0IGFwaS5qcyB0byBzZWUgdGhlIEZ1dHVyZXNcbi8vIFRvIHNlZSB0aGUgZWZmZWN0aW9uIGZvIGNhbmNlbGxhdGlvbiwgY29tbWVudCBvdXQgdGhlIHRoaXMuY2FuY2VsKCkgY29kZSBiZWxvd1xuLy8gYW5kIGNoZWNrb3V0IHRoZSBuZXR3b3JrIHRhYiB3aGVuIGNsaWNraW5nIGFyb3VuZFxuXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmdldEJyZWVkcygpO1xuICAgIHRoaXMubG9hZEltYWdlcyA9IHRoaXMubG9hZEltYWdlcy5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyh7IGltYWdlc0luZGV4OiBuZXh0SW5kZXgsIGJyZWVkcyB9KSB7XG4gICAgaWYgKG5leHRJbmRleCA9PT0gbnVsbCAmJiBicmVlZHMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gZGVmYXVsdCB0byAnYScgaW4gYnJlZWRzIGxpc3RcbiAgICAgIHRoaXMucHJvcHMuc2V0SW1hZ2VzSW5kZXgoMCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLmltYWdlc0luZGV4ICE9PSBuZXh0SW5kZXgpIHtcbiAgICAgIC8vIGxvYWQgbmV3IGltYWdlc1xuICAgICAgLy8gSW4gY2FzZSB0aGVyZSBpcyBhbiB1bnJlc29sdmVkIEZ1dHVyZSwgY2FuY2VsXG4gICAgICBpZiAodGhpcy5jYW5jZWwpIHtcbiAgICAgICAgdGhpcy5jYW5jZWwoKVxuICAgICAgICB0aGlzLnByb3BzLnNldExvYWRpbmcoZmFsc2UpXG4gICAgICB9XG4gICAgICB0aGlzLmxvYWRJbWFnZXMobmV4dEluZGV4KTtcbiAgICB9XG4gIH1cblxuICBsb2FkSW1hZ2VzKG5leHRJbmRleCkge1xuICAgIHRoaXMucHJvcHMuc2V0TG9hZGluZyh0cnVlKVxuICAgIGNvbnN0IHsgYnJlZWRzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGlkcyA9IGJyZWVkc1tuZXh0SW5kZXhdO1xuICAgIC8vIGZ1dHVyZSBleGVjdXRlZCB3aGVuIGZvcmsgaXMgY2FsbGVkXG4gICAgdGhpcy5jYW5jZWwgPSBnZXRJbWFnZXNDb25jdXJyZW50bHkoaWRzKS5mb3JrKFxuICAgICAgLy8gcmVqZWN0aW9uIGJyYW5jaFxuICAgICAgZXJyID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICB0aGlzLnByb3BzLnNldExvYWRpbmcoZmFsc2UpXG4gICAgICB9LFxuICAgICAgLy8gc3VjY2VzcyBicmFuY2hcbiAgICAgIHJlcyA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMuc2V0SW1hZ2VzKHJlcylcbiAgICAgICAgdGhpcy5wcm9wcy5zZXRMb2FkaW5nKGZhbHNlKVxuICAgICAgfSk7XG4gIH1cblxuICByZW5kZXIoe1xuICAgIGxldHRlcnMsXG4gICAgY29sb3IsXG4gICAgaW1hZ2VzSW5kZXgsXG4gICAgdG9nZ2xlQ29sb3IsXG4gICAgZ2V0SW1hZ2VzLFxuICAgIGRlY3JlbWVudEluZGV4LFxuICAgIGluY3JlbWVudEluZGV4LFxuICAgIHNldEltYWdlc0luZGV4LFxuICAgIGltYWdlcyxcbiAgICBicmVlZHMsXG4gICAgbG9hZGluZ1xuICB9KSB7XG4gICAgLy8gQ2hhbmdlIGJhY2tncm91bmQgc28gd2Ugc2VlIGVhY2ggcmVyZW5kZXJcbiAgICBjb25zdCBzdXBlckNvbG9yID0gcmFuZG9tQ29sb3IoeyBsdW1pbm9zaXR5OiBcImxpZ2h0XCIgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBQLmxpZ2h0ZW4oMC4xLCBzdXBlckNvbG9yKSwgaGVpZ2h0OiAnMTgwdmgnLCBwYWRkaW5nOiAnMTBweCcgfX0+XG4gICAgICAgIDxOYXY+XG4gICAgICAgICAge2xldHRlcnMubWFwKChsZXR0ZXIsIGkpID0+IChcbiAgICAgICAgICAgIDxMZXR0ZXJCdXR0b25cbiAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICBkYXRhLWltYWdlcy1pbmRleD17aX1cbiAgICAgICAgICAgICAgY29sb3I9e3N1cGVyQ29sb3J9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2UgPT5cbiAgICAgICAgICAgICAgICBzZXRJbWFnZXNJbmRleChcbiAgICAgICAgICAgICAgICAgIE51bWJlcihlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWltYWdlcy1pbmRleFwiKSlcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICBhY3RpdmU9e2kgPT09IGltYWdlc0luZGV4fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7bGV0dGVyfVxuICAgICAgICAgICAgPC9MZXR0ZXJCdXR0b24+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvTmF2PlxuICAgICAgICA8QXJyb3dCdXR0b25zPlxuICAgICAgICAgIDxBcnJvdyBvbkNsaWNrPXtkZWNyZW1lbnRJbmRleH0+JiM4NTkyOzwvQXJyb3c+XG4gICAgICAgICAgPEFycm93IG9uQ2xpY2s9e2luY3JlbWVudEluZGV4fT4mIzg1OTQ7PC9BcnJvdz5cbiAgICAgICAgPC9BcnJvd0J1dHRvbnM+XG4gICAgICAgIDxNYWluPlxuICAgICAgICAgIHshbG9hZGluZyA/IGltYWdlcy5tYXAoKHNyYywgaSkgPT4gKFxuICAgICAgICAgICAgPFBpYyBzcmM9e3NyY30ga2V5PXtzcmN9IG5hbWU9e2JyZWVkc1tpbWFnZXNJbmRleF1baV19IC8+XG4gICAgICAgICAgKSkgOiA8TG9hZGluZ1NwaW5uZXIgY29sb3I9e3N1cGVyQ29sb3J9IC8+fVxuICAgICAgICA8L01haW4+XG4gICAgICAgIDxTb3VyY2VMaW5rIGNvbG9yPXtzdXBlckNvbG9yfSAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFwiaW1hZ2VzSW5kZXgsbGV0dGVycyxpbWFnZXMsYnJlZWRzLGxvYWRpbmdcIiwgYWN0aW9ucykoQXBwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvQXBwLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFBQTtBQUNBOzs7QUFBQTtBQUNBO0FBQUE7QUFDQTs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTs7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFEQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBY0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFJQTtBQVJBO0FBVUE7QUFWQTtBQURBO0FBREE7QUFnQkE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFGQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQURBO0FBS0E7QUExQkE7QUE2QkE7Ozs7OztBQUdBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (true) {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        // Since we're generating multiple colors,\n        // incremement the seed. Otherwise we'd just\n        // generate the same color each time...\n        if (seed && options.seed) options.seed += 1;\n\n        colors.push(randomColor(options));\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue (options) {\n\n    var hueRange = getHueRange(options.hue),\n        hue = randomWithin(hueRange);\n\n    // Instead of storing red as two seperate ranges,\n    // we group them, using negative numbers\n    if (hue < 0) {hue = 360 + hue;}\n\n    return hue;\n\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      return Math.floor(range[0] + Math.random()*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n    }\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [19,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [47,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [63,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [179, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [258, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [283, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  return randomColor;\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports) {

eval("(function(f) {\n\n  'use strict';\n\n  /*istanbul ignore next*/\n  if(typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  }else{\n    self.inspectf = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  function checkn(n) {\n    if(typeof n !== 'number') {\n      throw new TypeError(\n        'inspectf expects its first argument to be a number'\n      );\n    }\n  }\n\n  function checkf(f) {\n    if(typeof f !== 'function') {\n      throw new TypeError(\n        'inspectf expects its second argument to be a function'\n      );\n    }\n  }\n\n  var RSPACE = /^ */;\n  var RCODE = /\\s*[^\\s]/;\n  var RTABS = /\\t/g;\n  var REOL = /\\n\\r?/;\n\n  function isCode(line) {\n    return RCODE.test(line);\n  }\n\n  function getPadding(line) {\n    return line.match(RSPACE)[0].length;\n  }\n\n  function guessIndentation(lines) {\n    var filtered = lines.filter(isCode);\n    var paddings = filtered.map(getPadding);\n    var depth = paddings.reduce(Math.min, Infinity);\n    var tabsize = paddings\n    .map(function(x) { return x - depth; })\n    .find(function(x) { return x > 1; }) || 2;\n    return {depth: depth, tabsize: tabsize};\n  }\n\n  function pad(n) {\n    return (new Array(n + 1)).join(' ');\n  }\n\n  function show(f, indentation) {\n    return f.toString().replace(RTABS, indentation);\n  }\n\n  function toLines(s) {\n    return s.split(REOL);\n  }\n\n  function fixIndentation(lines, indentation) {\n    var info = guessIndentation(lines.slice(1));\n    var RPAD = new RegExp(pad(info.tabsize), 'g');\n    return lines.map(function(line) {\n      return line.slice(Math.min(info.depth, getPadding(line)))\n      .replace(RPAD, '\\t').replace(RTABS, indentation);\n    }).join('\\n');\n  }\n\n  return function inspectf(n, f) {\n    checkn(n);\n\n    if(arguments.length < 2) {\n      return function inspectf$partial(f) { return inspectf(n, f); };\n    }\n\n    checkf(f);\n    if(f.toString !== Function.prototype.toString) { return f.toString(); }\n    var i = pad(n), shown = show(f, i), lines = toLines(shown, i);\n    if(lines.length < 2) { return shown; }\n    return fixIndentation(lines, i);\n  };\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5zcGVjdC1mL2luZGV4LmpzP2MzNDUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKGYpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovXG4gIGlmKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGYoKTtcbiAgfWVsc2V7XG4gICAgc2VsZi5pbnNwZWN0ZiA9IGYoKTtcbiAgfVxuXG59KGZ1bmN0aW9uKCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBjaGVja24obikge1xuICAgIGlmKHR5cGVvZiBuICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ2luc3BlY3RmIGV4cGVjdHMgaXRzIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja2YoZikge1xuICAgIGlmKHR5cGVvZiBmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnaW5zcGVjdGYgZXhwZWN0cyBpdHMgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGEgZnVuY3Rpb24nXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZhciBSU1BBQ0UgPSAvXiAqLztcbiAgdmFyIFJDT0RFID0gL1xccypbXlxcc10vO1xuICB2YXIgUlRBQlMgPSAvXFx0L2c7XG4gIHZhciBSRU9MID0gL1xcblxccj8vO1xuXG4gIGZ1bmN0aW9uIGlzQ29kZShsaW5lKSB7XG4gICAgcmV0dXJuIFJDT0RFLnRlc3QobGluZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQYWRkaW5nKGxpbmUpIHtcbiAgICByZXR1cm4gbGluZS5tYXRjaChSU1BBQ0UpWzBdLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGd1ZXNzSW5kZW50YXRpb24obGluZXMpIHtcbiAgICB2YXIgZmlsdGVyZWQgPSBsaW5lcy5maWx0ZXIoaXNDb2RlKTtcbiAgICB2YXIgcGFkZGluZ3MgPSBmaWx0ZXJlZC5tYXAoZ2V0UGFkZGluZyk7XG4gICAgdmFyIGRlcHRoID0gcGFkZGluZ3MucmVkdWNlKE1hdGgubWluLCBJbmZpbml0eSk7XG4gICAgdmFyIHRhYnNpemUgPSBwYWRkaW5nc1xuICAgIC5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4geCAtIGRlcHRoOyB9KVxuICAgIC5maW5kKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPiAxOyB9KSB8fCAyO1xuICAgIHJldHVybiB7ZGVwdGg6IGRlcHRoLCB0YWJzaXplOiB0YWJzaXplfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhZChuKSB7XG4gICAgcmV0dXJuIChuZXcgQXJyYXkobiArIDEpKS5qb2luKCcgJyk7XG4gIH1cblxuICBmdW5jdGlvbiBzaG93KGYsIGluZGVudGF0aW9uKSB7XG4gICAgcmV0dXJuIGYudG9TdHJpbmcoKS5yZXBsYWNlKFJUQUJTLCBpbmRlbnRhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiB0b0xpbmVzKHMpIHtcbiAgICByZXR1cm4gcy5zcGxpdChSRU9MKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpeEluZGVudGF0aW9uKGxpbmVzLCBpbmRlbnRhdGlvbikge1xuICAgIHZhciBpbmZvID0gZ3Vlc3NJbmRlbnRhdGlvbihsaW5lcy5zbGljZSgxKSk7XG4gICAgdmFyIFJQQUQgPSBuZXcgUmVnRXhwKHBhZChpbmZvLnRhYnNpemUpLCAnZycpO1xuICAgIHJldHVybiBsaW5lcy5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgcmV0dXJuIGxpbmUuc2xpY2UoTWF0aC5taW4oaW5mby5kZXB0aCwgZ2V0UGFkZGluZyhsaW5lKSkpXG4gICAgICAucmVwbGFjZShSUEFELCAnXFx0JykucmVwbGFjZShSVEFCUywgaW5kZW50YXRpb24pO1xuICAgIH0pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGluc3BlY3RmKG4sIGYpIHtcbiAgICBjaGVja24obik7XG5cbiAgICBpZihhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGluc3BlY3RmJHBhcnRpYWwoZikgeyByZXR1cm4gaW5zcGVjdGYobiwgZik7IH07XG4gICAgfVxuXG4gICAgY2hlY2tmKGYpO1xuICAgIGlmKGYudG9TdHJpbmcgIT09IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZykgeyByZXR1cm4gZi50b1N0cmluZygpOyB9XG4gICAgdmFyIGkgPSBwYWQobiksIHNob3duID0gc2hvdyhmLCBpKSwgbGluZXMgPSB0b0xpbmVzKHNob3duLCBpKTtcbiAgICBpZihsaW5lcy5sZW5ndGggPCAyKSB7IHJldHVybiBzaG93bjsgfVxuICAgIHJldHVybiBmaXhJbmRlbnRhdGlvbihsaW5lcywgaSk7XG4gIH07XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2luc3BlY3QtZi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

eval("(function(f){\n\n  'use strict';\n\n  /*istanbul ignore next*/\n  if(typeof module === 'object' && typeof module.exports === 'object'){\n    module.exports = f(__webpack_require__(11), __webpack_require__(1));\n  }else{\n    self.concurrify = f(self.sanctuaryTypeClasses, self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(Z, type){\n\n  'use strict';\n\n  var $alt = 'fantasy-land/alt';\n  var $ap = 'fantasy-land/ap';\n  var $map = 'fantasy-land/map';\n  var $of = 'fantasy-land/of';\n  var $zero = 'fantasy-land/zero';\n  var $$type = '@@type';\n  var ordinal = ['first', 'second', 'third', 'fourth', 'fifth'];\n\n  function isFunction(f){\n    return typeof f === 'function';\n  }\n\n  function isBinary(f){\n    return f.length >= 2;\n  }\n\n  function isApplicativeRepr(Repr){\n    try{\n      return Z.Applicative.test(Z.of(Repr));\n    }catch(_){\n      return false;\n    }\n  }\n\n  function invalidArgument(it, at, expected, actual){\n    throw new TypeError(\n      it\n      + ' expects its '\n      + ordinal[at]\n      + ' argument to '\n      + expected\n      + '\\n  Actual: '\n      + Z.toString(actual)\n    );\n  }\n\n  function invalidContext(it, actual, an){\n    throw new TypeError(\n      it + ' was invoked outside the context of a ' + an + '. \\n  Called on: ' + Z.toString(actual)\n    );\n  }\n\n  //       getTypeIdentifier :: TypeRepresentative -> TypeIdentifier\n  function getTypeIdentifier(Repr){\n    return Repr[$$type] || Repr.name || 'Anonymous';\n  }\n\n  //       generateTypeIdentifier :: TypeIdentifier -> TypeIdentifier\n  function generateTypeIdentifier(identifier){\n    var o = type.parse(identifier);\n    return (o.namespace || 'concurrify') + '/Concurrent' + o.name + '@' + o.version;\n  }\n\n  //concurrify :: Applicative m\n  //           => (TypeRep m, m a, (m a, m a) -> m a, (m a, m (a -> b)) -> m b)\n  //           -> Concurrently m\n  return function concurrify(Repr, zero, alt, ap){\n\n    var INNERTYPE = getTypeIdentifier(Repr);\n    var OUTERTYPE = generateTypeIdentifier(INNERTYPE);\n    var INNERNAME = type.parse(INNERTYPE).name;\n    var OUTERNAME = type.parse(OUTERTYPE).name;\n\n    function Concurrently(sequential){\n      this.sequential = sequential;\n    }\n\n    function isInner(x){\n      return x instanceof Repr\n      || (Boolean(x) && x.constructor === Repr)\n      || type(x) === Repr[$$type];\n    }\n\n    function isOuter(x){\n      return x instanceof Concurrently\n      || (Boolean(x) && x.constructor === Concurrently)\n      || type(x) === OUTERTYPE;\n    }\n\n    function construct(x){\n      if(!isInner(x)) invalidArgument(OUTERNAME, 0, 'be of type \"' + INNERNAME + '\"', x);\n      return new Concurrently(x);\n    }\n\n    if(!isApplicativeRepr(Repr)) invalidArgument('concurrify', 0, 'represent an Applicative', Repr);\n    if(!isInner(zero)) invalidArgument('concurrify', 1, 'be of type \"' + INNERNAME + '\"', zero);\n    if(!isFunction(alt)) invalidArgument('concurrify', 2, 'be a function', alt);\n    if(!isBinary(alt)) invalidArgument('concurrify', 2, 'be binary', alt);\n    if(!isFunction(ap)) invalidArgument('concurrify', 3, 'be a function', ap);\n    if(!isBinary(ap)) invalidArgument('concurrify', 3, 'be binary', ap);\n\n    var proto = Concurrently.prototype = construct.prototype = {constructor: construct};\n\n    construct[$$type] = OUTERTYPE;\n\n    var mzero = new Concurrently(zero);\n\n    construct[$zero] = function Concurrently$zero(){\n      return mzero;\n    };\n\n    construct[$of] = function Concurrently$of(value){\n      return new Concurrently(Z.of(Repr, value));\n    };\n\n    proto[$map] = function Concurrently$map(mapper){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#map', this, OUTERNAME);\n      if(!isFunction(mapper)) invalidArgument(OUTERNAME + '#map', 0, 'be a function', mapper);\n      return new Concurrently(Z.map(mapper, this.sequential));\n    };\n\n    proto[$ap] = function Concurrently$ap(m){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#ap', this, OUTERNAME);\n      if(!isOuter(m)) invalidArgument(OUTERNAME + '#ap', 0, 'be a ' + OUTERNAME, m);\n      return new Concurrently(ap(this.sequential, m.sequential));\n    };\n\n    proto[$alt] = function Concurrently$alt(m){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#alt', this, OUTERNAME);\n      if(!isOuter(m)) invalidArgument(OUTERNAME + '#alt', 0, 'be a ' + OUTERNAME, m);\n      return new Concurrently(alt(this.sequential, m.sequential));\n    };\n\n    proto.toString = function Concurrently$toString(){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#toString', this, OUTERNAME);\n      return OUTERNAME + '(' + Z.toString(this.sequential) + ')';\n    };\n\n    return construct;\n\n  };\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29uY3VycmlmeS9pbmRleC5qcz83YWVmIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihmKXtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovXG4gIGlmKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpe1xuICAgIG1vZHVsZS5leHBvcnRzID0gZihyZXF1aXJlKCdzYW5jdHVhcnktdHlwZS1jbGFzc2VzJyksIHJlcXVpcmUoJ3NhbmN0dWFyeS10eXBlLWlkZW50aWZpZXJzJykpO1xuICB9ZWxzZXtcbiAgICBzZWxmLmNvbmN1cnJpZnkgPSBmKHNlbGYuc2FuY3R1YXJ5VHlwZUNsYXNzZXMsIHNlbGYuc2FuY3R1YXJ5VHlwZUlkZW50aWZpZXJzKTtcbiAgfVxuXG59KGZ1bmN0aW9uKFosIHR5cGUpe1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgJGFsdCA9ICdmYW50YXN5LWxhbmQvYWx0JztcbiAgdmFyICRhcCA9ICdmYW50YXN5LWxhbmQvYXAnO1xuICB2YXIgJG1hcCA9ICdmYW50YXN5LWxhbmQvbWFwJztcbiAgdmFyICRvZiA9ICdmYW50YXN5LWxhbmQvb2YnO1xuICB2YXIgJHplcm8gPSAnZmFudGFzeS1sYW5kL3plcm8nO1xuICB2YXIgJCR0eXBlID0gJ0BAdHlwZSc7XG4gIHZhciBvcmRpbmFsID0gWydmaXJzdCcsICdzZWNvbmQnLCAndGhpcmQnLCAnZm91cnRoJywgJ2ZpZnRoJ107XG5cbiAgZnVuY3Rpb24gaXNGdW5jdGlvbihmKXtcbiAgICByZXR1cm4gdHlwZW9mIGYgPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBmdW5jdGlvbiBpc0JpbmFyeShmKXtcbiAgICByZXR1cm4gZi5sZW5ndGggPj0gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXBwbGljYXRpdmVSZXByKFJlcHIpe1xuICAgIHRyeXtcbiAgICAgIHJldHVybiBaLkFwcGxpY2F0aXZlLnRlc3QoWi5vZihSZXByKSk7XG4gICAgfWNhdGNoKF8pe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludmFsaWRBcmd1bWVudChpdCwgYXQsIGV4cGVjdGVkLCBhY3R1YWwpe1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBpdFxuICAgICAgKyAnIGV4cGVjdHMgaXRzICdcbiAgICAgICsgb3JkaW5hbFthdF1cbiAgICAgICsgJyBhcmd1bWVudCB0byAnXG4gICAgICArIGV4cGVjdGVkXG4gICAgICArICdcXG4gIEFjdHVhbDogJ1xuICAgICAgKyBaLnRvU3RyaW5nKGFjdHVhbClcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52YWxpZENvbnRleHQoaXQsIGFjdHVhbCwgYW4pe1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBpdCArICcgd2FzIGludm9rZWQgb3V0c2lkZSB0aGUgY29udGV4dCBvZiBhICcgKyBhbiArICcuIFxcbiAgQ2FsbGVkIG9uOiAnICsgWi50b1N0cmluZyhhY3R1YWwpXG4gICAgKTtcbiAgfVxuXG4gIC8vICAgICAgIGdldFR5cGVJZGVudGlmaWVyIDo6IFR5cGVSZXByZXNlbnRhdGl2ZSAtPiBUeXBlSWRlbnRpZmllclxuICBmdW5jdGlvbiBnZXRUeXBlSWRlbnRpZmllcihSZXByKXtcbiAgICByZXR1cm4gUmVwclskJHR5cGVdIHx8IFJlcHIubmFtZSB8fCAnQW5vbnltb3VzJztcbiAgfVxuXG4gIC8vICAgICAgIGdlbmVyYXRlVHlwZUlkZW50aWZpZXIgOjogVHlwZUlkZW50aWZpZXIgLT4gVHlwZUlkZW50aWZpZXJcbiAgZnVuY3Rpb24gZ2VuZXJhdGVUeXBlSWRlbnRpZmllcihpZGVudGlmaWVyKXtcbiAgICB2YXIgbyA9IHR5cGUucGFyc2UoaWRlbnRpZmllcik7XG4gICAgcmV0dXJuIChvLm5hbWVzcGFjZSB8fCAnY29uY3VycmlmeScpICsgJy9Db25jdXJyZW50JyArIG8ubmFtZSArICdAJyArIG8udmVyc2lvbjtcbiAgfVxuXG4gIC8vY29uY3VycmlmeSA6OiBBcHBsaWNhdGl2ZSBtXG4gIC8vICAgICAgICAgICA9PiAoVHlwZVJlcCBtLCBtIGEsIChtIGEsIG0gYSkgLT4gbSBhLCAobSBhLCBtIChhIC0+IGIpKSAtPiBtIGIpXG4gIC8vICAgICAgICAgICAtPiBDb25jdXJyZW50bHkgbVxuICByZXR1cm4gZnVuY3Rpb24gY29uY3VycmlmeShSZXByLCB6ZXJvLCBhbHQsIGFwKXtcblxuICAgIHZhciBJTk5FUlRZUEUgPSBnZXRUeXBlSWRlbnRpZmllcihSZXByKTtcbiAgICB2YXIgT1VURVJUWVBFID0gZ2VuZXJhdGVUeXBlSWRlbnRpZmllcihJTk5FUlRZUEUpO1xuICAgIHZhciBJTk5FUk5BTUUgPSB0eXBlLnBhcnNlKElOTkVSVFlQRSkubmFtZTtcbiAgICB2YXIgT1VURVJOQU1FID0gdHlwZS5wYXJzZShPVVRFUlRZUEUpLm5hbWU7XG5cbiAgICBmdW5jdGlvbiBDb25jdXJyZW50bHkoc2VxdWVudGlhbCl7XG4gICAgICB0aGlzLnNlcXVlbnRpYWwgPSBzZXF1ZW50aWFsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSW5uZXIoeCl7XG4gICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFJlcHJcbiAgICAgIHx8IChCb29sZWFuKHgpICYmIHguY29uc3RydWN0b3IgPT09IFJlcHIpXG4gICAgICB8fCB0eXBlKHgpID09PSBSZXByWyQkdHlwZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPdXRlcih4KXtcbiAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgQ29uY3VycmVudGx5XG4gICAgICB8fCAoQm9vbGVhbih4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDb25jdXJyZW50bHkpXG4gICAgICB8fCB0eXBlKHgpID09PSBPVVRFUlRZUEU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc3RydWN0KHgpe1xuICAgICAgaWYoIWlzSW5uZXIoeCkpIGludmFsaWRBcmd1bWVudChPVVRFUk5BTUUsIDAsICdiZSBvZiB0eXBlIFwiJyArIElOTkVSTkFNRSArICdcIicsIHgpO1xuICAgICAgcmV0dXJuIG5ldyBDb25jdXJyZW50bHkoeCk7XG4gICAgfVxuXG4gICAgaWYoIWlzQXBwbGljYXRpdmVSZXByKFJlcHIpKSBpbnZhbGlkQXJndW1lbnQoJ2NvbmN1cnJpZnknLCAwLCAncmVwcmVzZW50IGFuIEFwcGxpY2F0aXZlJywgUmVwcik7XG4gICAgaWYoIWlzSW5uZXIoemVybykpIGludmFsaWRBcmd1bWVudCgnY29uY3VycmlmeScsIDEsICdiZSBvZiB0eXBlIFwiJyArIElOTkVSTkFNRSArICdcIicsIHplcm8pO1xuICAgIGlmKCFpc0Z1bmN0aW9uKGFsdCkpIGludmFsaWRBcmd1bWVudCgnY29uY3VycmlmeScsIDIsICdiZSBhIGZ1bmN0aW9uJywgYWx0KTtcbiAgICBpZighaXNCaW5hcnkoYWx0KSkgaW52YWxpZEFyZ3VtZW50KCdjb25jdXJyaWZ5JywgMiwgJ2JlIGJpbmFyeScsIGFsdCk7XG4gICAgaWYoIWlzRnVuY3Rpb24oYXApKSBpbnZhbGlkQXJndW1lbnQoJ2NvbmN1cnJpZnknLCAzLCAnYmUgYSBmdW5jdGlvbicsIGFwKTtcbiAgICBpZighaXNCaW5hcnkoYXApKSBpbnZhbGlkQXJndW1lbnQoJ2NvbmN1cnJpZnknLCAzLCAnYmUgYmluYXJ5JywgYXApO1xuXG4gICAgdmFyIHByb3RvID0gQ29uY3VycmVudGx5LnByb3RvdHlwZSA9IGNvbnN0cnVjdC5wcm90b3R5cGUgPSB7Y29uc3RydWN0b3I6IGNvbnN0cnVjdH07XG5cbiAgICBjb25zdHJ1Y3RbJCR0eXBlXSA9IE9VVEVSVFlQRTtcblxuICAgIHZhciBtemVybyA9IG5ldyBDb25jdXJyZW50bHkoemVybyk7XG5cbiAgICBjb25zdHJ1Y3RbJHplcm9dID0gZnVuY3Rpb24gQ29uY3VycmVudGx5JHplcm8oKXtcbiAgICAgIHJldHVybiBtemVybztcbiAgICB9O1xuXG4gICAgY29uc3RydWN0WyRvZl0gPSBmdW5jdGlvbiBDb25jdXJyZW50bHkkb2YodmFsdWUpe1xuICAgICAgcmV0dXJuIG5ldyBDb25jdXJyZW50bHkoWi5vZihSZXByLCB2YWx1ZSkpO1xuICAgIH07XG5cbiAgICBwcm90b1skbWFwXSA9IGZ1bmN0aW9uIENvbmN1cnJlbnRseSRtYXAobWFwcGVyKXtcbiAgICAgIGlmKCFpc091dGVyKHRoaXMpKSBpbnZhbGlkQ29udGV4dChPVVRFUk5BTUUgKyAnI21hcCcsIHRoaXMsIE9VVEVSTkFNRSk7XG4gICAgICBpZighaXNGdW5jdGlvbihtYXBwZXIpKSBpbnZhbGlkQXJndW1lbnQoT1VURVJOQU1FICsgJyNtYXAnLCAwLCAnYmUgYSBmdW5jdGlvbicsIG1hcHBlcik7XG4gICAgICByZXR1cm4gbmV3IENvbmN1cnJlbnRseShaLm1hcChtYXBwZXIsIHRoaXMuc2VxdWVudGlhbCkpO1xuICAgIH07XG5cbiAgICBwcm90b1skYXBdID0gZnVuY3Rpb24gQ29uY3VycmVudGx5JGFwKG0pe1xuICAgICAgaWYoIWlzT3V0ZXIodGhpcykpIGludmFsaWRDb250ZXh0KE9VVEVSTkFNRSArICcjYXAnLCB0aGlzLCBPVVRFUk5BTUUpO1xuICAgICAgaWYoIWlzT3V0ZXIobSkpIGludmFsaWRBcmd1bWVudChPVVRFUk5BTUUgKyAnI2FwJywgMCwgJ2JlIGEgJyArIE9VVEVSTkFNRSwgbSk7XG4gICAgICByZXR1cm4gbmV3IENvbmN1cnJlbnRseShhcCh0aGlzLnNlcXVlbnRpYWwsIG0uc2VxdWVudGlhbCkpO1xuICAgIH07XG5cbiAgICBwcm90b1skYWx0XSA9IGZ1bmN0aW9uIENvbmN1cnJlbnRseSRhbHQobSl7XG4gICAgICBpZighaXNPdXRlcih0aGlzKSkgaW52YWxpZENvbnRleHQoT1VURVJOQU1FICsgJyNhbHQnLCB0aGlzLCBPVVRFUk5BTUUpO1xuICAgICAgaWYoIWlzT3V0ZXIobSkpIGludmFsaWRBcmd1bWVudChPVVRFUk5BTUUgKyAnI2FsdCcsIDAsICdiZSBhICcgKyBPVVRFUk5BTUUsIG0pO1xuICAgICAgcmV0dXJuIG5ldyBDb25jdXJyZW50bHkoYWx0KHRoaXMuc2VxdWVudGlhbCwgbS5zZXF1ZW50aWFsKSk7XG4gICAgfTtcblxuICAgIHByb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gQ29uY3VycmVudGx5JHRvU3RyaW5nKCl7XG4gICAgICBpZighaXNPdXRlcih0aGlzKSkgaW52YWxpZENvbnRleHQoT1VURVJOQU1FICsgJyN0b1N0cmluZycsIHRoaXMsIE9VVEVSTkFNRSk7XG4gICAgICByZXR1cm4gT1VURVJOQU1FICsgJygnICsgWi50b1N0cmluZyh0aGlzLnNlcXVlbnRpYWwpICsgJyknO1xuICAgIH07XG5cbiAgICByZXR1cm4gY29uc3RydWN0O1xuXG4gIH07XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvbmN1cnJpZnkvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array) {\n  // circular buffer\n  this._list = new Array(4);\n  // bit mask\n  this._capacityMask = 0x3;\n  // next unread item\n  this._head = 0;\n  // next empty slot\n  this._tail = 0;\n\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peakAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.length;\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.length;\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  var size = this.size();\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  if (i > size || i < -size) return void 0;\n  if (i === size && count != 0) return void 0;\n  if (i < 0) i += size;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n  return newArray;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  }\n\n  // head is at 0 and array is now full, safe to extend\n  this._tail = this._list.length;\n\n  this._list.length *= 2;\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n\nmodule.exports = Denque;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*    #######\n   ####     ####\n ####   ###   ####\n#####   ###########   sanctuary\n########   ########   noun\n###########   #####   1 [ mass noun ] refuge from unsafe JavaScript\n ####   ###   ####\n   ####     ####\n      #######    */\n\n//. # Sanctuary\n//.\n//. [![npm](https://img.shields.io/npm/v/sanctuary.svg)](https://www.npmjs.com/package/sanctuary)\n//. [![CircleCI](https://img.shields.io/circleci/project/github/sanctuary-js/sanctuary/master.svg)](https://circleci.com/gh/sanctuary-js/sanctuary/tree/master)\n//. [![Gitter](https://img.shields.io/gitter/room/badges/shields.svg)](https://gitter.im/sanctuary-js/sanctuary)\n//.\n//. Sanctuary is a JavaScript functional programming library inspired by\n//. [Haskell][] and [PureScript][]. It's stricter than [Ramda][], and\n//. provides a similar suite of functions.\n//.\n//. Sanctuary promotes programs composed of simple, pure functions. Such\n//. programs are easier to comprehend, test, and maintain &ndash; they are\n//. also a pleasure to write.\n//.\n//. Sanctuary provides two data types, [Maybe][] and [Either][], both of\n//. which are compatible with [Fantasy Land][]. Thanks to these data types\n//. even Sanctuary functions which may fail, such as [`head`](#head), are\n//. composable.\n//.\n//. Sanctuary makes it possible to write safe code without null checks.\n//. In JavaScript it's trivial to introduce a possible run-time type error:\n//.\n//.     words[0].toUpperCase()\n//.\n//. If `words` is `[]` we'll get a familiar error at run-time:\n//.\n//.     TypeError: Cannot read property 'toUpperCase' of undefined\n//.\n//. Sanctuary gives us a fighting chance of avoiding such errors. We might\n//. write:\n//.\n//.     S.map(S.toUpper, S.head(words))\n//.\n//. Sanctuary is designed to work in Node.js and in ES5-compatible browsers.\n//.\n//. ## Types\n//.\n//. Sanctuary uses Haskell-like type signatures to describe the types of\n//. values, including functions. `'foo'`, for example, is a member of `String`;\n//. `[1, 2, 3]` is a member of `Array Number`. The double colon (`::`) is used\n//. to mean \"is a member of\", so one could write:\n//.\n//.     'foo' :: String\n//.     [1, 2, 3] :: Array Number\n//.\n//. An identifier may appear to the left of the double colon:\n//.\n//.     Math.PI :: Number\n//.\n//. The arrow (`->`) is used to express a function's type:\n//.\n//.     Math.abs :: Number -> Number\n//.\n//. That states that `Math.abs` is a unary function which takes an argument\n//. of type `Number` and returns a value of type `Number`.\n//.\n//. Some functions are parametrically polymorphic: their types are not fixed.\n//. Type variables are used in the representations of such functions:\n//.\n//.     S.I :: a -> a\n//.\n//. `a` is a type variable. Type variables are not capitalized, so they\n//. are differentiable from type identifiers (which are always capitalized).\n//. By convention type variables have single-character names. The signature\n//. above states that `S.I` takes a value of any type and returns a value of\n//. the same type. Some signatures feature multiple type variables:\n//.\n//.     S.K :: a -> b -> a\n//.\n//. It must be possible to replace all occurrences of `a` with a concrete type.\n//. The same applies for each other type variable. For the function above, the\n//. types with which `a` and `b` are replaced may be different, but needn't be.\n//.\n//. Since all Sanctuary functions are curried (they accept their arguments\n//. one at a time), a binary function is represented as a unary function which\n//. returns a unary function: `* -> * -> *`. This aligns neatly with Haskell,\n//. which uses curried functions exclusively. In JavaScript, though, we may\n//. wish to represent the types of functions with arities less than or greater\n//. than one. The general form is `(<input-types>) -> <output-type>`, where\n//. `<input-types>` comprises zero or more comma–space (<code>, </code>)\n//. -separated type representations:\n//.\n//.   - `() -> String`\n//.   - `(a, b) -> a`\n//.   - `(a, b, c) -> d`\n//.\n//. `Number -> Number` can thus be seen as shorthand for `(Number) -> Number`.\n//.\n//. The question mark (`?`) is used to represent types which include `null`\n//. and `undefined` as members. `String?`, for example, represents the type\n//. comprising `null`, `undefined`, and all strings.\n//.\n//. Sanctuary embraces types. JavaScript doesn't support algebraic data types,\n//. but these can be simulated by providing a group of data constructors which\n//. return values with the same set of methods. A value of the Either type, for\n//. example, is created via the Left constructor or the Right constructor.\n//.\n//. It's necessary to extend Haskell's notation to describe implicit arguments\n//. to the *methods* provided by Sanctuary's types. In `x.map(y)`, for example,\n//. the `map` method takes an implicit argument `x` in addition to the explicit\n//. argument `y`. The type of the value upon which a method is invoked appears\n//. at the beginning of the signature, separated from the arguments and return\n//. value by a squiggly arrow (`~>`). The type of the `fantasy-land/map` method\n//. of the Maybe type is written `Maybe a ~> (a -> b) -> Maybe b`. One could\n//. read this as:\n//.\n//. _When the `fantasy-land/map` method is invoked on a value of type `Maybe a`\n//. (for any type `a`) with an argument of type `a -> b` (for any type `b`),\n//. it returns a value of type `Maybe b`._\n//.\n//. The squiggly arrow is also used when representing non-function properties.\n//. `Maybe a ~> Boolean`, for example, represents a Boolean property of a value\n//. of type `Maybe a`.\n//.\n//. Sanctuary supports type classes: constraints on type variables. Whereas\n//. `a -> a` implicitly supports every type, `Functor f => (a -> b) -> f a ->\n//. f b` requires that `f` be a type which satisfies the requirements of the\n//. Functor type class. Type-class constraints appear at the beginning of a\n//. type signature, separated from the rest of the signature by a fat arrow\n//. (`=>`).\n//.\n//. ### Type representatives\n//.\n//. What is the type of `Number`? One answer is `a -> Number`, since it's a\n//. function which takes an argument of any type and returns a Number value.\n//. When provided as the first argument to [`is`](#is), though, `Number` is\n//. really the value-level representative of the Number type.\n//.\n//. Sanctuary uses the TypeRep pseudotype to describe type representatives.\n//. For example:\n//.\n//.     Number :: TypeRep Number\n//.\n//. `Number` is the sole inhabitant of the TypeRep Number type.\n//.\n//. ## Type checking\n//.\n//. Sanctuary functions are defined via [sanctuary-def][] to provide run-time\n//. type checking. This is tremendously useful during development: type errors\n//. are reported immediately, avoiding circuitous stack traces (at best) and\n//. silent failures due to type coercion (at worst). For example:\n//.\n//. ```javascript\n//. S.add(2, true);\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: FiniteNumber -> FiniteNumber -> FiniteNumber\n//. //                          ^^^^^^^^^^^^\n//. //                               1\n//. //\n//. //   1)  true :: Boolean\n//. //\n//. //   The value at position 1 is not a member of ‘FiniteNumber’.\n//. //\n//. //   See v:sanctuary-js/sanctuary-def#FiniteNumber for information about the sanctuary-def/FiniteNumber type.\n//. ```\n//.\n//. Compare this to the behaviour of Ramda's unchecked equivalent:\n//.\n//. ```javascript\n//. R.add(2, true);\n//. // => 3\n//. ```\n//.\n//. There is a performance cost to run-time type checking. One may wish to\n//. disable type checking in certain contexts to avoid paying this cost.\n//. [`create`](#create) facilitates the creation of a Sanctuary module which\n//. does not perform type checking.\n//.\n//. In Node, one could use an environment variable to determine whether to\n//. perform type checking:\n//.\n//. ```javascript\n//. const {create, env} = require('sanctuary');\n//.\n//. const checkTypes = process.env.NODE_ENV !== 'production';\n//. const S = create({checkTypes, env});\n//. ```\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(__webpack_require__(3),\n                       __webpack_require__(15),\n                       __webpack_require__(1));\n  } else if (\"function\" === 'function' && __webpack_require__(0) != null) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3),\n            __webpack_require__(15),\n            __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    self.sanctuary = f(self.sanctuaryDef,\n                       self.sanctuaryTypeClasses,\n                       self.sanctuaryTypeIdentifiers);\n  }\n\n}(function($, Z, type) {\n\n  'use strict';\n\n  //  Fn :: (Type, Type) -> Type\n  function Fn(x, y) { return $.Function([x, y]); }\n\n  //  flip$ :: ((a, b) -> c) -> b -> a -> c\n  function flip$(f) {\n    return function(x) {\n      return function(y) {\n        return f(y, x);\n      };\n    };\n  }\n\n  //  toObject :: a -> Object\n  function toObject(x) {\n    return x == null ? Object.create(null) : Object(x);\n  }\n\n  //  typeEq :: String -> a -> Boolean\n  function typeEq(typeIdent) {\n    return function(x) {\n      return type(x) === typeIdent;\n    };\n  }\n\n  //  uncurry2 :: (a -> b -> c) -> ((a, b) -> c)\n  function uncurry2(f) {\n    return function(x, y) {\n      return f(x)(y);\n    };\n  }\n\n  //  readmeUrl :: String -> String\n  function readmeUrl(id) {\n    var version = '0.14.1';  // updated programmatically\n    return 'https://github.com/sanctuary-js/sanctuary/tree/v' + version +\n           '#' + id;\n  }\n\n  //  :: Type\n  var a = $.TypeVariable('a');\n  var b = $.TypeVariable('b');\n  var c = $.TypeVariable('c');\n  var d = $.TypeVariable('d');\n  var e = $.TypeVariable('e');\n  var g = $.TypeVariable('g');\n  var l = $.TypeVariable('l');\n  var r = $.TypeVariable('r');\n\n  //  :: Type -> Type\n  var f = $.UnaryTypeVariable('f');\n  var m = $.UnaryTypeVariable('m');\n  var t = $.UnaryTypeVariable('t');\n  var w = $.UnaryTypeVariable('w');\n\n  //  :: Type -> Type -> Type\n  var p = $.BinaryTypeVariable('p');\n  var s = $.BinaryTypeVariable('s');\n\n  //  eitherTypeIdent :: String\n  var eitherTypeIdent = 'sanctuary/Either';\n\n  //  $Either :: Type -> Type -> Type\n  var $Either = $.BinaryType(\n    eitherTypeIdent,\n    readmeUrl('EitherType'),\n    typeEq(eitherTypeIdent),\n    function(either) { return either.isLeft ? [either.value] : []; },\n    function(either) { return either.isRight ? [either.value] : []; }\n  );\n\n  //  List :: Type -> Type\n  var List = $.UnaryType(\n    'sanctuary/List',\n    readmeUrl('list'),\n    function(x) { return $.String._test(x) || Array.isArray(x); },\n    function(list) { return $.String._test(list) ? [] : list; }\n  );\n\n  //  maybeTypeIdent :: String\n  var maybeTypeIdent = 'sanctuary/Maybe';\n\n  //  $Maybe :: Type -> Type\n  var $Maybe = $.UnaryType(\n    maybeTypeIdent,\n    readmeUrl('MaybeType'),\n    typeEq(maybeTypeIdent),\n    function(maybe) { return maybe.isJust ? [maybe.value] : []; }\n  );\n\n  //  TypeRep :: Type -> Type\n  var TypeRep = $.UnaryType(\n    'sanctuary/TypeRep',\n    readmeUrl('type-representatives'),\n    function(x) {\n      return $.AnyFunction._test(x) ||\n             x != null && $.String._test(x['@@type']);\n    },\n    function(typeRep) { return []; }\n  );\n\n  //  defaultEnv :: Array Type\n  var defaultEnv = Z.concat($.env, [\n    $.FiniteNumber,\n    $.NonZeroFiniteNumber,\n    $Either($.Unknown, $.Unknown),\n    Fn($.Unknown, $.Unknown),\n    $.GlobalRegExp,\n    $.NonGlobalRegExp,\n    $.Integer,\n    $.NonNegativeInteger,\n    $Maybe($.Unknown),\n    $.Pair($.Unknown, $.Unknown),\n    $.RegexFlags,\n    $.ValidDate,\n    $.ValidNumber\n  ]);\n\n  //  Options :: Type\n  var Options = $.RecordType({checkTypes: $.Boolean, env: $.Array($.Any)});\n\n  //  createSanctuary :: Options -> Module\n  function createSanctuary(opts) {\n\n  /* eslint-disable indent */\n\n  //  checkTypes :: Boolean\n  var checkTypes = opts.checkTypes;\n\n  //  env :: Array Type\n  var env = opts.env;\n\n  var S = {};\n\n  //# create :: { checkTypes :: Boolean, env :: Array Type } -> Module\n  //.\n  //. Takes an options record and returns a Sanctuary module. `checkTypes`\n  //. specifies whether to enable type checking. The module's polymorphic\n  //. functions (such as [`I`](#I)) require each value associated with a\n  //. type variable to be a member of at least one type in the environment.\n  //.\n  //. A well-typed application of a Sanctuary function will produce the same\n  //. result regardless of whether type checking is enabled. If type checking\n  //. is enabled, a badly typed application will produce an exception with a\n  //. descriptive error message.\n  //.\n  //. The following snippet demonstrates defining a custom type and using\n  //. `create` to produce a Sanctuary module which is aware of that type:\n  //.\n  //. ```javascript\n  //. const {create, env} = require('sanctuary');\n  //. const $ = require('sanctuary-def');\n  //. const type = require('sanctuary-type-identifiers');\n  //.\n  //. //    Identity :: a -> Identity a\n  //. const Identity = function Identity(x) {\n  //.   if (!(this instanceof Identity)) return new Identity(x);\n  //.   this.value = x;\n  //. };\n  //.\n  //. Identity['@@type'] = 'my-package/Identity@1';\n  //.\n  //. Identity.prototype['fantasy-land/map'] = function(f) {\n  //.   return Identity(f(this.value));\n  //. };\n  //.\n  //. //    IdentityType :: Type -> Type\n  //. const IdentityType = $.UnaryType(\n  //.   Identity['@@type'],\n  //.   'http://example.com/my-package#Identity',\n  //.   x => type(x) === Identity['@@type'],\n  //.   identity => [identity.value]\n  //. );\n  //.\n  //. const S = create({\n  //.   checkTypes: process.env.NODE_ENV !== 'production',\n  //.   env: env.concat([IdentityType($.Unknown)]),\n  //. });\n  //.\n  //. S.map(S.sub(1), Identity(43));\n  //. // => Identity(42)\n  //. ```\n  //.\n  //. See also [`env`](#env).\n  S.create =\n  $.create({checkTypes: checkTypes, env: defaultEnv})('create',\n                                                      {},\n                                                      [Options, $.Object],\n                                                      createSanctuary);\n\n  //# env :: Array Type\n  //.\n  //. The default environment, which may be used as is or as the basis of a\n  //. custom environment in conjunction with [`create`](#create).\n  S.env = defaultEnv;\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var _List = __doctest.require('./test/internal/List');\n    var Cons = _List.Cons;\n    var Nil = _List.Nil;\n    var Sum = __doctest.require('./test/internal/Sum');\n    /* eslint-enable no-unused-vars */\n    env = Z.concat(env, [_List.Type($.Unknown), Sum.Type]);\n  }\n\n  var def = $.create({checkTypes: checkTypes, env: env});\n\n  //. ### Placeholder\n  //.\n  //. Sanctuary functions are designed with partial application in mind.\n  //. In many cases one can define a more specific function in terms of\n  //. a more general one simply by applying the more general function to\n  //. some (but not all) of its arguments. For example, one could define\n  //. `sum :: Foldable f => f Number -> Number` as `S.reduce(S.add, 0)`.\n  //.\n  //. In some cases, though, there are multiple orders in which one may\n  //. wish to provide a function's arguments. `S.concat('prefix')` is a\n  //. function which prefixes its argument, but how would one define a\n  //. function which suffixes its argument? It's possible with the help\n  //. of [`__`](#__), the special placeholder value.\n  //.\n  //. The placeholder indicates a hole to be filled at some future time.\n  //. The following are all equivalent (`_` represents the placeholder):\n  //.\n  //.   - `f(x, y, z)`\n  //.   - `f(_, y, z)(x)`\n  //.   - `f(_, _, z)(x, y)`\n  //.   - `f(_, _, z)(_, y)(x)`\n\n  //# __ :: Placeholder\n  //.\n  //. The special [placeholder](#placeholder) value.\n  //.\n  //. ```javascript\n  //. > S.map(S.concat('@'), ['foo', 'bar', 'baz'])\n  //. ['@foo', '@bar', '@baz']\n  //.\n  //. > S.map(S.concat(S.__, '?'), ['foo', 'bar', 'baz'])\n  //. ['foo?', 'bar?', 'baz?']\n  //. ```\n  S.__ = $.__;\n\n  //. ### Classify\n\n  //# type :: Any -> { namespace :: Maybe String, name :: String, version :: NonNegativeInteger }\n  //.\n  //. Returns the result of parsing the [type identifier][] of the given value.\n  //.\n  //. ```javascript\n  //. > S.type(S.Just(42))\n  //. {namespace: Just('sanctuary'), name: 'Maybe', version: 0}\n  //.\n  //. > S.type([1, 2, 3])\n  //. {namespace: Nothing, name: 'Array', version: 0}\n  //. ```\n  S.type =\n  def('type',\n      {},\n      [$.Any,\n       $.RecordType({namespace: $Maybe($.String),\n                     name: $.String,\n                     version: $.NonNegativeInteger})],\n      function(x) {\n        var r = type.parse(type(x));\n        r.namespace = toMaybe(r.namespace);\n        return r;\n      });\n\n  //# is :: TypeRep a -> Any -> Boolean\n  //.\n  //. Takes a [type representative](#type-representatives) and a value of any\n  //. type and returns `true` [iff][] the given value is of the specified type.\n  //. Subtyping is not respected.\n  //.\n  //. ```javascript\n  //. > S.is(Number, 42)\n  //. true\n  //.\n  //. > S.is(Object, 42)\n  //. false\n  //.\n  //. > S.is(String, 42)\n  //. false\n  //. ```\n  function is(typeRep, x) {\n    var xType = type(x);\n    if ($.String._test(typeRep['@@type'])) {\n      return xType === typeRep['@@type'];\n    } else {\n      var match = /function (\\w*)/.exec(typeRep);\n      return match != null && match[1] === xType;\n    }\n  }\n  S.is = def('is', {}, [TypeRep(a), $.Any, $.Boolean], is);\n\n  //. ### Showable\n\n  //# toString :: Any -> String\n  //.\n  //. Alias of [`Z.toString`][].\n  //.\n  //. ```javascript\n  //. > S.toString(-0)\n  //. '-0'\n  //.\n  //. > S.toString(['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > S.toString({x: 1, y: 2, z: 3})\n  //. '{\"x\": 1, \"y\": 2, \"z\": 3}'\n  //.\n  //. > S.toString(S.Left(S.Right(S.Just(S.Nothing))))\n  //. 'Left(Right(Just(Nothing)))'\n  //. ```\n  S.toString = def('toString', {}, [$.Any, $.String], Z.toString);\n\n  //. ### Fantasy Land\n  //.\n  //. Sanctuary is compatible with the [Fantasy Land][] specification.\n\n  //# equals :: Setoid a => a -> a -> Boolean\n  //.\n  //. Curried version of [`Z.equals`][] which requires two arguments of the\n  //. same type.\n  //.\n  //. To compare values of different types first use [`create`](#create) to\n  //. create a Sanctuary module with type checking disabled, then use that\n  //. module's `equals` function.\n  //.\n  //. ```javascript\n  //. > S.equals(0, -0)\n  //. true\n  //.\n  //. > S.equals(NaN, NaN)\n  //. true\n  //.\n  //. > S.equals(S.Just([1, 2, 3]), S.Just([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals(S.Just([1, 2, 3]), S.Just([1, 2, 4]))\n  //. false\n  //. ```\n  S.equals = def('equals', {a: [Z.Setoid]}, [a, a, $.Boolean], Z.equals);\n\n  //# lt :: Ord a => a -> (a -> Boolean)\n  //.\n  //. Returns `true` [iff][] the *second* argument is less than the first\n  //. according to [`Z.lt`][]. The arguments must be provided one at a time.\n  //.\n  //. See also [`lt_`](#lt_).\n  //.\n  //. ```javascript\n  //. > S.filter(S.lt(3), [1, 2, 3, 4, 5])\n  //. [1, 2]\n  //. ```\n  S.lt = def('lt', {a: [Z.Ord]}, [a, $.Predicate(a)], flip$(Z.lt));\n\n  //# lt_ :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the first argument is less than the second\n  //. according to [`Z.lt`][].\n  //.\n  //. See also [`lt`](#lt).\n  //.\n  //. ```javascript\n  //. > S.lt_([1, 2, 3], [1, 2, 3])\n  //. false\n  //.\n  //. > S.lt_([1, 2, 3], [1, 2, 4])\n  //. true\n  //.\n  //. > S.lt_([1, 2, 3], [1, 2])\n  //. false\n  //. ```\n  S.lt_ = def('lt_', {a: [Z.Ord]}, [a, a, $.Boolean], Z.lt);\n\n  //# lte :: Ord a => a -> (a -> Boolean)\n  //.\n  //. Returns `true` [iff][] the *second* argument is less than or equal to\n  //. the first according to [`Z.lte`][]. The arguments must be provided one\n  //. at a time.\n  //.\n  //. See also [`lte_`](#lte_).\n  //.\n  //. ```javascript\n  //. > S.filter(S.lte(3), [1, 2, 3, 4, 5])\n  //. [1, 2, 3]\n  //. ```\n  S.lte = def('lte', {a: [Z.Ord]}, [a, $.Predicate(a)], flip$(Z.lte));\n\n  //# lte_ :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the first argument is less than or equal to the\n  //. second according to [`Z.lte`][].\n  //.\n  //. See also [`lte`](#lte).\n  //.\n  //. ```javascript\n  //. > S.lte_([1, 2, 3], [1, 2, 3])\n  //. true\n  //.\n  //. > S.lte_([1, 2, 3], [1, 2, 4])\n  //. true\n  //.\n  //. > S.lte_([1, 2, 3], [1, 2])\n  //. false\n  //. ```\n  S.lte_ = def('lte_', {a: [Z.Ord]}, [a, a, $.Boolean], Z.lte);\n\n  //# gt :: Ord a => a -> (a -> Boolean)\n  //.\n  //. Returns `true` [iff][] the *second* argument is greater than the first\n  //. according to [`Z.gt`][]. The arguments must be provided one at a time.\n  //.\n  //. See also [`gt_`](#gt_).\n  //.\n  //. ```javascript\n  //. > S.filter(S.gt(3), [1, 2, 3, 4, 5])\n  //. [4, 5]\n  //. ```\n  S.gt = def('gt', {a: [Z.Ord]}, [a, $.Predicate(a)], flip$(Z.gt));\n\n  //# gt_ :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the first argument is greater than the second\n  //. according to [`Z.gt`][].\n  //.\n  //. See also [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > S.gt_([1, 2, 3], [1, 2, 3])\n  //. false\n  //.\n  //. > S.gt_([1, 2, 3], [1, 2, 4])\n  //. false\n  //.\n  //. > S.gt_([1, 2, 3], [1, 2])\n  //. true\n  //. ```\n  S.gt_ = def('gt_', {a: [Z.Ord]}, [a, a, $.Boolean], Z.gt);\n\n  //# gte :: Ord a => a -> (a -> Boolean)\n  //.\n  //. Returns `true` [iff][] the *second* argument is greater than or equal\n  //. to the first according to [`Z.gte`][]. The arguments must be provided\n  //. one at a time.\n  //.\n  //. See also [`gte_`](#gte_).\n  //.\n  //. ```javascript\n  //. > S.filter(S.gte(3), [1, 2, 3, 4, 5])\n  //. [3, 4, 5]\n  //. ```\n  S.gte = def('gte', {a: [Z.Ord]}, [a, $.Predicate(a)], flip$(Z.gte));\n\n  //# gte_ :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the first argument is greater than or equal to\n  //. the second according to [`Z.gte`][].\n  //.\n  //. See also [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > S.gte_([1, 2, 3], [1, 2, 3])\n  //. true\n  //.\n  //. > S.gte_([1, 2, 3], [1, 2, 4])\n  //. false\n  //.\n  //. > S.gte_([1, 2, 3], [1, 2])\n  //. true\n  //. ```\n  S.gte_ = def('gte_', {a: [Z.Ord]}, [a, a, $.Boolean], Z.gte);\n\n  //# min :: Ord a => a -> a -> a\n  //.\n  //. Returns the smaller of its two arguments (according to [`Z.lte`][]).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > S.min(10, 2)\n  //. 2\n  //.\n  //. > S.min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > S.min('10', '2')\n  //. '10'\n  //. ```\n  S.min = def('min', {a: [Z.Ord]}, [a, a, a], Z.min);\n\n  //# max :: Ord a => a -> a -> a\n  //.\n  //. Returns the larger of its two arguments (according to [`Z.lte`][]).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > S.max(10, 2)\n  //. 10\n  //.\n  //. > S.max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > S.max('10', '2')\n  //. '2'\n  //. ```\n  S.max = def('max', {a: [Z.Ord]}, [a, a, a], Z.max);\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.id`][].\n  //.\n  //. ```javascript\n  //. > S.id(Function)(42)\n  //. 42\n  //. ```\n  S.id = def('id', {c: [Z.Category]}, [TypeRep(c), c], Z.id);\n\n  //# concat :: Semigroup a => a -> a -> a\n  //.\n  //. Curried version of [`Z.concat`][].\n  //.\n  //. ```javascript\n  //. > S.concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > S.concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > S.concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > S.concat(S.Just([1, 2, 3]), S.Just([4, 5, 6]))\n  //. Just([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat(Sum(18), Sum(24))\n  //. Sum(42)\n  //. ```\n  S.concat = def('concat', {a: [Z.Semigroup]}, [a, a, a], Z.concat);\n\n  //# empty :: Monoid a => TypeRep a -> a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.empty`][].\n  //.\n  //. ```javascript\n  //. > S.empty(String)\n  //. ''\n  //.\n  //. > S.empty(Array)\n  //. []\n  //.\n  //. > S.empty(Object)\n  //. {}\n  //.\n  //. > S.empty(Sum)\n  //. Sum(0)\n  //. ```\n  S.empty = def('empty', {a: [Z.Monoid]}, [TypeRep(a), a], Z.empty);\n\n  //# invert :: Group g => g -> g\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.invert`][].\n  //.\n  //. ```javascript\n  //. > S.invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  S.invert = def('invert', {g: [Z.Group]}, [g, g], Z.invert);\n\n  //# map :: Functor f => (a -> b) -> f a -> f b\n  //.\n  //. Curried version of [`Z.map`][].\n  //.\n  //. ```javascript\n  //. > S.map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > S.map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > S.map(Math.sqrt, S.Just(9))\n  //. Just(3)\n  //.\n  //. > S.map(Math.sqrt, S.Right(9))\n  //. Right(3)\n  //. ```\n  //.\n  //. Replacing `Functor f => f` with `Function x` produces the B combinator\n  //. from combinatory logic (i.e. [`compose`](#compose)):\n  //.\n  //.     Functor f => (a -> b) -> f a -> f b\n  //.     (a -> b) -> Function x a -> Function x b\n  //.     (a -> c) -> Function x a -> Function x c\n  //.     (b -> c) -> Function x b -> Function x c\n  //.     (b -> c) -> Function a b -> Function a c\n  //.     (b -> c) -> (a -> b) -> (a -> c)\n  //.\n  //. ```javascript\n  //. > S.map(Math.sqrt, S.add(1))(99)\n  //. 10\n  //. ```\n  S.map = def('map', {f: [Z.Functor]}, [Fn(a, b), f(a), f(b)], Z.map);\n\n  //# bimap :: Bifunctor f => (a -> b) -> (c -> d) -> f a c -> f b d\n  //.\n  //. Curried version of [`Z.bimap`][].\n  //.\n  //. ```javascript\n  //. > S.bimap(S.toUpper, Math.sqrt, S.Left('foo'))\n  //. Left('FOO')\n  //.\n  //. > S.bimap(S.toUpper, Math.sqrt, S.Right(64))\n  //. Right(8)\n  //. ```\n  S.bimap =\n  def('bimap',\n      {p: [Z.Bifunctor]},\n      [Fn(a, b), Fn(c, d), p(a, c), p(b, d)],\n      Z.bimap);\n\n  //# promap :: Profunctor p => (a -> b) -> (c -> d) -> p b c -> p a d\n  //.\n  //. Curried version of [`Z.promap`][].\n  //.\n  //. ```javascript\n  //. > S.promap(Math.abs, S.add(1), Math.sqrt)(-100)\n  //. 11\n  //. ```\n  S.promap =\n  def('promap',\n      {p: [Z.Profunctor]},\n      [Fn(a, b), Fn(c, d), p(b, c), p(a, d)],\n      Z.promap);\n\n  //# alt :: Alt f => f a -> f a -> f a\n  //.\n  //. Curried version of [`Z.alt`][].\n  //.\n  //. ```javascript\n  //. > S.alt(S.Nothing, S.Just(1))\n  //. Just(1)\n  //.\n  //. > S.alt(S.Just(2), S.Just(3))\n  //. Just(2)\n  //.\n  //. > S.alt(S.Left('X'), S.Right(1))\n  //. Right(1)\n  //.\n  //. > S.alt(S.Right(2), S.Right(3))\n  //. Right(2)\n  //. ```\n  S.alt = def('alt', {f: [Z.Alt]}, [f(a), f(a), f(a)], Z.alt);\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.zero`][].\n  //.\n  //. ```javascript\n  //. > S.zero(Array)\n  //. []\n  //.\n  //. > S.zero(Object)\n  //. {}\n  //.\n  //. > S.zero(S.Maybe)\n  //. Nothing\n  //. ```\n  S.zero =\n  def('zero', {f: [Z.Plus]}, [TypeRep($.TypeVariable('f')), f(a)], Z.zero);\n\n  //# reduce :: Foldable f => (b -> a -> b) -> b -> f a -> b\n  //.\n  //. Takes a curried binary function, an initial value, and a [Foldable][],\n  //. and applies the function to the initial value and the Foldable's first\n  //. value, then applies the function to the result of the previous\n  //. application and the Foldable's second value. Repeats this process\n  //. until each of the Foldable's values has been used. Returns the initial\n  //. value if the Foldable is empty; the result of the final application\n  //. otherwise.\n  //.\n  //. ```javascript\n  //. > S.reduce(S.add, 0, [1, 2, 3, 4, 5])\n  //. 15\n  //.\n  //. > S.reduce(xs => x => [x].concat(xs), [], [1, 2, 3, 4, 5])\n  //. [5, 4, 3, 2, 1]\n  //. ```\n  function reduce(f, initial, foldable) {\n    return Z.reduce(uncurry2(f), initial, foldable);\n  }\n  S.reduce =\n  def('reduce', {f: [Z.Foldable]}, [Fn(a, Fn(b, a)), a, f(b), a], reduce);\n\n  //# traverse :: (Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)\n  //.\n  //. Curried version of [`Z.traverse`][].\n  //.\n  //. ```javascript\n  //. > S.traverse(Array, S.words, S.Just('foo bar baz'))\n  //. [Just('foo'), Just('bar'), Just('baz')]\n  //.\n  //. > S.traverse(Array, S.words, S.Nothing)\n  //. [Nothing]\n  //.\n  //. > S.traverse(S.Maybe, S.parseInt(16), ['A', 'B', 'C'])\n  //. Just([10, 11, 12])\n  //.\n  //. > S.traverse(S.Maybe, S.parseInt(16), ['A', 'B', 'C', 'X'])\n  //. Nothing\n  //.\n  //. > S.traverse(S.Maybe, S.parseInt(16), {a: 'A', b: 'B', c: 'C'})\n  //. Just({a: 10, b: 11, c: 12})\n  //.\n  //. > S.traverse(S.Maybe, S.parseInt(16), {a: 'A', b: 'B', c: 'C', x: 'X'})\n  //. Nothing\n  //. ```\n  S.traverse =\n  def('traverse',\n      {f: [Z.Applicative], t: [Z.Traversable]},\n      [TypeRep($.TypeVariable('f')), Fn(a, f(b)), t(a), f(t(b))],\n      Z.traverse);\n\n  //# sequence :: (Applicative f, Traversable t) => TypeRep f -> t (f a) -> f (t a)\n  //.\n  //. Curried version of [`Z.sequence`][]. Inverts the given `t (f a)`\n  //. to produce an `f (t a)`.\n  //.\n  //. ```javascript\n  //. > S.sequence(Array, S.Just([1, 2, 3]))\n  //. [Just(1), Just(2), Just(3)]\n  //.\n  //. > S.sequence(S.Maybe, [S.Just(1), S.Just(2), S.Just(3)])\n  //. Just([1, 2, 3])\n  //.\n  //. > S.sequence(S.Maybe, [S.Just(1), S.Just(2), S.Nothing])\n  //. Nothing\n  //.\n  //. > S.sequence(S.Maybe, {a: S.Just(1), b: S.Just(2), c: S.Just(3)})\n  //. Just({a: 1, b: 2, c: 3})\n  //.\n  //. > S.sequence(S.Maybe, {a: S.Just(1), b: S.Just(2), c: S.Nothing})\n  //. Nothing\n  //. ```\n  S.sequence =\n  def('sequence',\n      {f: [Z.Applicative], t: [Z.Traversable]},\n      [TypeRep($.TypeVariable('f')), t(f(a)), f(t(a))],\n      Z.sequence);\n\n  //# ap :: Apply f => f (a -> b) -> f a -> f b\n  //.\n  //. Curried version of [`Z.ap`][].\n  //.\n  //. ```javascript\n  //. > S.ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > S.ap({x: Math.sqrt, y: S.add(1), z: S.sub(1)}, {w: 4, x: 4, y: 4})\n  //. {x: 2, y: 5}\n  //.\n  //. > S.ap(S.Just(Math.sqrt), S.Just(64))\n  //. Just(8)\n  //. ```\n  //.\n  //. Replacing `Apply f => f` with `Function x` produces the S combinator\n  //. from combinatory logic:\n  //.\n  //.     Apply f => f (a -> b) -> f a -> f b\n  //.     Function x (a -> b) -> Function x a -> Function x b\n  //.     Function x (a -> c) -> Function x a -> Function x c\n  //.     Function x (b -> c) -> Function x b -> Function x c\n  //.     Function a (b -> c) -> Function a b -> Function a c\n  //.     (a -> b -> c) -> (a -> b) -> (a -> c)\n  //.\n  //. ```javascript\n  //. > S.ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  S.ap =\n  def('ap',\n      {f: [Z.Apply]},\n      [f(Fn(a, b)), f(a), f(b)],\n      Z.ap);\n\n  //# lift2 :: Apply f => (a -> b -> c) -> f a -> f b -> f c\n  //.\n  //. Promotes a curried binary function to a function which operates on two\n  //. [Apply][]s.\n  //.\n  //. ```javascript\n  //. > S.lift2(S.add, S.Just(2), S.Just(3))\n  //. Just(5)\n  //.\n  //. > S.lift2(S.add, S.Just(2), S.Nothing)\n  //. Nothing\n  //.\n  //. > S.lift2(S.and, S.Just(true), S.Just(true))\n  //. Just(true)\n  //.\n  //. > S.lift2(S.and, S.Just(true), S.Just(false))\n  //. Just(false)\n  //. ```\n  S.lift2 =\n  def('lift2', {f: [Z.Apply]}, [Fn(a, Fn(b, c)), f(a), f(b), f(c)], Z.lift2);\n\n  //# lift3 :: Apply f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d\n  //.\n  //. Promotes a curried ternary function to a function which operates on three\n  //. [Apply][]s.\n  //.\n  //. ```javascript\n  //. > S.lift3(S.reduce, S.Just(S.add), S.Just(0), S.Just([1, 2, 3]))\n  //. Just(6)\n  //.\n  //. > S.lift3(S.reduce, S.Just(S.add), S.Just(0), S.Nothing)\n  //. Nothing\n  //. ```\n  S.lift3 =\n  def('lift3',\n      {f: [Z.Apply]},\n      [Fn(a, Fn(b, Fn(c, d))), f(a), f(b), f(c), f(d)],\n      Z.lift3);\n\n  //# apFirst :: Apply f => f a -> f b -> f a\n  //.\n  //. Curried version of [`Z.apFirst`][]. Combines two effectful actions,\n  //. keeping only the result of the first. Equivalent to Haskell's `(<*)`\n  //. function.\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > S.apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > S.apFirst(S.Just(1), S.Just(2))\n  //. Just(1)\n  //. ```\n  S.apFirst = def('apFirst', {f: [Z.Apply]}, [f(a), f(b), f(a)], Z.apFirst);\n\n  //# apSecond :: Apply f => f a -> f b -> f b\n  //.\n  //. Curried version of [`Z.apSecond`][]. Combines two effectful actions,\n  //. keeping only the result of the second. Equivalent to Haskell's `(*>)`\n  //. function.\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > S.apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > S.apSecond(S.Just(1), S.Just(2))\n  //. Just(2)\n  //. ```\n  S.apSecond = def('apSecond', {f: [Z.Apply]}, [f(a), f(b), f(b)], Z.apSecond);\n\n  //# of :: Applicative f => TypeRep f -> a -> f a\n  //.\n  //. Curried version of [`Z.of`][].\n  //.\n  //. ```javascript\n  //. > S.of(Array, 42)\n  //. [42]\n  //.\n  //. > S.of(Function, 42)(null)\n  //. 42\n  //.\n  //. > S.of(S.Maybe, 42)\n  //. Just(42)\n  //.\n  //. > S.of(S.Either, 42)\n  //. Right(42)\n  //. ```\n  S.of =\n  def('of',\n      {f: [Z.Applicative]},\n      [TypeRep($.TypeVariable('f')), a, f(a)],\n      Z.of);\n\n  //# chain :: Chain m => (a -> m b) -> m a -> m b\n  //.\n  //. Curried version of [`Z.chain`][].\n  //.\n  //. ```javascript\n  //. > S.chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > S.chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('slice')\n  //. 'sli'\n  //.\n  //. > S.chain(S.parseInt(10), S.Just('123'))\n  //. Just(123)\n  //.\n  //. > S.chain(S.parseInt(10), S.Just('XXX'))\n  //. Nothing\n  //. ```\n  S.chain = def('chain', {m: [Z.Chain]}, [Fn(a, m(b)), m(a), m(b)], Z.chain);\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.join`][].\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. ```javascript\n  //. > S.join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > S.join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > S.join(S.Just(S.Just(1)))\n  //. S.Just(1)\n  //. ```\n  //.\n  //. Replacing `Chain m => m` with `Function x` produces the W combinator\n  //. from combinatory logic:\n  //.\n  //.     Chain m => m (m a) -> m a\n  //.     Function x (Function x a) -> Function x a\n  //.     (x -> x -> a) -> (x -> a)\n  //.\n  //. ```javascript\n  //. > S.join(S.concat)('abc')\n  //. 'abcabc'\n  //. ```\n  S.join = def('join', {m: [Z.Chain]}, [m(m(a)), m(a)], Z.join);\n\n  //# chainRec :: ChainRec m => TypeRep m -> (a -> m (Either a b)) -> a -> m b\n  //.\n  //. Performs a [`chain`](#chain)-like computation with constant stack usage.\n  //. Similar to [`Z.chainRec`][], but curried and more convenient due to the\n  //. use of the Either type to indicate completion (via a Right).\n  //.\n  //. ```javascript\n  //. > S.chainRec(Array,\n  //. .            s => s.length === 2 ? S.map(S.Right, [s + '!', s + '?'])\n  //. .                                : S.map(S.Left, [s + 'o', s + 'n']),\n  //. .            '')\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    function step(next, done, x) {\n      return Z.map(function(e) { return either(next, done, e); }, f(x));\n    }\n    return Z.chainRec(typeRep, step, x);\n  }\n  S.chainRec =\n  def('chainRec',\n      {m: [Z.ChainRec]},\n      [TypeRep($.TypeVariable('m')), Fn(a, m($Either(a, b))), a, m(b)],\n      chainRec);\n\n  //# extend :: Extend w => (w a -> b) -> w a -> w b\n  //.\n  //. Curried version of [`Z.extend`][].\n  //.\n  //. ```javascript\n  //. > S.extend(S.joinWith(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //. ```\n  S.extend =\n  def('extend', {w: [Z.Extend]}, [Fn(w(a), b), w(a), w(b)], Z.extend);\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.extract`][].\n  S.extract =\n  def('extract', {w: [Z.Comonad]}, [w(a), a], Z.extract);\n\n  //# contramap :: Contravariant f => (b -> a) -> f a -> f b\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.contramap`][].\n  //.\n  //. ```javascript\n  //. > S.contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  S.contramap =\n  def('contramap',\n      {f: [Z.Contravariant]},\n      [Fn(b, a), f(a), f(b)],\n      Z.contramap);\n\n  //# filter :: (Applicative f, Foldable f, Monoid (f a)) => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.filter`][]. Filters its second argument in\n  //. accordance with the given predicate.\n  //.\n  //. See also [`filterM`](#filterM).\n  //.\n  //. ```javascript\n  //. > S.filter(S.odd, [1, 2, 3, 4, 5])\n  //. [1, 3, 5]\n  //. ```\n  S.filter =\n  def('filter',\n      {f: [Z.Applicative, Z.Foldable, Z.Monoid]},\n      [$.Predicate(a), f(a), f(a)],\n      Z.filter);\n\n  //# filterM :: (Alternative m, Monad m) => (a -> Boolean) -> m a -> m a\n  //.\n  //. Curried version of [`Z.filterM`][]. Filters its second argument in\n  //. accordance with the given predicate.\n  //.\n  //. See also [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > S.filterM(S.odd, [1, 2, 3, 4, 5])\n  //. [1, 3, 5]\n  //.\n  //. > S.filterM(S.odd, S.Just(9))\n  //. Just(9)\n  //.\n  //. > S.filterM(S.odd, S.Just(4))\n  //. Nothing\n  //. ```\n  S.filterM =\n  def('filterM',\n      {m: [Z.Alternative, Z.Monad]},\n      [$.Predicate(a), m(a), m(a)],\n      Z.filterM);\n\n  //# takeWhile :: (Foldable f, Alternative f) => (a -> Boolean) -> f a -> f a\n  //.\n  //. Discards the first inner value which does not satisfy the predicate, and\n  //. all subsequent inner values.\n  //.\n  //. ```javascript\n  //. > S.takeWhile(S.odd, [3, 3, 3, 7, 6, 3, 5, 4])\n  //. [3, 3, 3, 7]\n  //.\n  //. > S.takeWhile(S.even, [3, 3, 3, 7, 6, 3, 5, 4])\n  //. []\n  //. ```\n  S.takeWhile =\n  def('takeWhile',\n      {f: [Z.Foldable, Z.Alternative]},\n      [$.Predicate(a), f(a), f(a)],\n      Z.takeWhile);\n\n  //# dropWhile :: (Foldable f, Alternative f) => (a -> Boolean) -> f a -> f a\n  //.\n  //. Retains the first inner value which does not satisfy the predicate, and\n  //. all subsequent inner values.\n  //.\n  //. ```javascript\n  //. > S.dropWhile(S.odd, [3, 3, 3, 7, 6, 3, 5, 4])\n  //. [6, 3, 5, 4]\n  //.\n  //. > S.dropWhile(S.even, [3, 3, 3, 7, 6, 3, 5, 4])\n  //. [3, 3, 3, 7, 6, 3, 5, 4]\n  //. ```\n  S.dropWhile =\n  def('dropWhile',\n      {f: [Z.Foldable, Z.Alternative]},\n      [$.Predicate(a), f(a), f(a)],\n      Z.dropWhile);\n\n  //. ### Combinator\n\n  //# I :: a -> a\n  //.\n  //. The I combinator. Returns its argument. Equivalent to Haskell's `id`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.I('foo')\n  //. 'foo'\n  //. ```\n  function I(x) {\n    return x;\n  }\n  S.I = def('I', {}, [a, a], I);\n\n  //# K :: a -> b -> a\n  //.\n  //. The K combinator. Takes two values and returns the first. Equivalent to\n  //. Haskell's `const` function.\n  //.\n  //. ```javascript\n  //. > S.K('foo', 'bar')\n  //. 'foo'\n  //.\n  //. > S.map(S.K(42), S.range(0, 5))\n  //. [42, 42, 42, 42, 42]\n  //. ```\n  function K(x, y) {\n    return x;\n  }\n  S.K = def('K', {}, [a, b, a], K);\n\n  //# A :: (a -> b) -> a -> b\n  //.\n  //. The A combinator. Takes a function and a value, and returns the result\n  //. of applying the function to the value. Equivalent to Haskell's `($)`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.A(S.add(1), 42)\n  //. 43\n  //.\n  //. > S.map(S.A(S.__, 100), [S.add(1), Math.sqrt])\n  //. [101, 10]\n  //. ```\n  function A(f, x) {\n    return f(x);\n  }\n  S.A = def('A', {}, [Fn(a, b), a, b], A);\n\n  //# T :: a -> (a -> b) -> b\n  //.\n  //. The T ([thrush][]) combinator. Takes a value and a function, and returns\n  //. the result of applying the function to the value. Equivalent to Haskell's\n  //. `(&)` function.\n  //.\n  //. ```javascript\n  //. > S.T(42, S.add(1))\n  //. 43\n  //.\n  //. > S.map(S.T(100), [S.add(1), Math.sqrt])\n  //. [101, 10]\n  //. ```\n  function T(x, f) {\n    return f(x);\n  }\n  S.T = def('T', {}, [a, Fn(a, b), b], T);\n\n  //. ### Function\n\n  //# curry2 :: ((a, b) -> c) -> a -> b -> c\n  //.\n  //. Curries the given binary function.\n  //.\n  //. ```javascript\n  //. > S.map(S.curry2(Math.pow)(10), [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > S.map(S.curry2(Math.pow, 10), [1, 2, 3])\n  //. [10, 100, 1000]\n  //. ```\n  function curry2(f, x, y) {\n    return f(x, y);\n  }\n  S.curry2 =\n  def('curry2',\n      {},\n      [$.Function([a, b, c]), a, b, c],\n      curry2);\n\n  //# curry3 :: ((a, b, c) -> d) -> a -> b -> c -> d\n  //.\n  //. Curries the given ternary function.\n  //.\n  //. ```javascript\n  //. > global.replaceString = S.curry3((what, replacement, string) =>\n  //. .   string.replace(what, replacement)\n  //. . )\n  //. replaceString\n  //.\n  //. > replaceString('banana')('orange')('banana icecream')\n  //. 'orange icecream'\n  //.\n  //. > replaceString('banana', 'orange', 'banana icecream')\n  //. 'orange icecream'\n  //. ```\n  function curry3(f, x, y, z) {\n    return f(x, y, z);\n  }\n  S.curry3 =\n  def('curry3',\n      {},\n      [$.Function([a, b, c, d]), a, b, c, d],\n      curry3);\n\n  //# curry4 :: ((a, b, c, d) -> e) -> a -> b -> c -> d -> e\n  //.\n  //. Curries the given quaternary function.\n  //.\n  //. ```javascript\n  //. > global.createRect = S.curry4((x, y, width, height) =>\n  //. .   ({x, y, width, height})\n  //. . )\n  //. createRect\n  //.\n  //. > createRect(0)(0)(10)(10)\n  //. {x: 0, y: 0, width: 10, height: 10}\n  //.\n  //. > createRect(0, 0, 10, 10)\n  //. {x: 0, y: 0, width: 10, height: 10}\n  //. ```\n  function curry4(f, w, x, y, z) {\n    return f(w, x, y, z);\n  }\n  S.curry4 =\n  def('curry4',\n      {},\n      [$.Function([a, b, c, d, e]), a, b, c, d, e],\n      curry4);\n\n  //# curry5 :: ((a, b, c, d, e) -> f) -> a -> b -> c -> d -> e -> f\n  //.\n  //. Curries the given quinary function.\n  //.\n  //. ```javascript\n  //. > global.toUrl = S.curry5((protocol, creds, hostname, port, pathname) =>\n  //. .   protocol + '//' +\n  //. .   S.maybe('', _ => _.username + ':' + _.password + '@', creds) +\n  //. .   hostname +\n  //. .   S.maybe('', S.concat(':'), port) +\n  //. .   pathname\n  //. . )\n  //. toUrl\n  //.\n  //. > toUrl('https:')(S.Nothing)('example.com')(S.Just('443'))('/foo/bar')\n  //. 'https://example.com:443/foo/bar'\n  //.\n  //. > toUrl('https:', S.Nothing, 'example.com', S.Just('443'), '/foo/bar')\n  //. 'https://example.com:443/foo/bar'\n  //. ```\n  function curry5(f, v, w, x, y, z) {\n    return f(v, w, x, y, z);\n  }\n  S.curry5 =\n  def('curry5',\n      {},\n      [$.Function([a, b, c, d, e, r]), a, b, c, d, e, r],\n      curry5);\n\n  //# flip :: (a -> b -> c) -> b -> a -> c\n  //.\n  //. Takes a curried binary function and two values, and returns the\n  //. result of applying the function to the values in reverse order.\n  //.\n  //. This is the C combinator from combinatory logic.\n  //.\n  //. ```javascript\n  //. > S.flip(S.concat, 'foo', 'bar')\n  //. 'barfoo'\n  //. ```\n  function flip(f, x, y) {\n    return f(y)(x);\n  }\n  S.flip = def('flip', {}, [Fn(a, Fn(b, c)), b, a, c], flip);\n\n  //. ### Composition\n\n  //# compose :: Semigroupoid s => s b c -> s a b -> s a c\n  //.\n  //. Curried version of [`Z.compose`][].\n  //.\n  //. When specialized to Function, `compose` composes two unary functions,\n  //. from right to left (this is the B combinator from combinatory logic).\n  //.\n  //. The generalized type signature indicates that `compose` is compatible\n  //. with any [Semigroupoid][].\n  //.\n  //. See also [`pipe`](#pipe).\n  //.\n  //. ```javascript\n  //. > S.compose(Math.sqrt, S.add(1))(99)\n  //. 10\n  //. ```\n  S.compose =\n  def('compose',\n      {s: [Z.Semigroupoid]},\n      [s(b, c), s(a, b), s(a, c)],\n      Z.compose);\n\n  //# pipe :: [(a -> b), (b -> c), ..., (m -> n)] -> a -> n\n  //.\n  //. Takes an array of functions assumed to be unary and a value of any type,\n  //. and returns the result of applying the sequence of transformations to\n  //. the initial value.\n  //.\n  //. In general terms, `pipe` performs left-to-right composition of an array\n  //. of functions. `pipe([f, g, h], x)` is equivalent to `h(g(f(x)))`.\n  //.\n  //. ```javascript\n  //. > S.pipe([S.add(1), Math.sqrt, S.sub(1)], 99)\n  //. 9\n  //. ```\n  function pipe(fs, x) {\n    return Z.reduce(function(x, f) { return f(x); }, x, fs);\n  }\n  S.pipe = def('pipe', {}, [$.Array($.AnyFunction), a, b], pipe);\n\n  //# on :: (b -> b -> c) -> (a -> b) -> a -> a -> c\n  //.\n  //. Takes a binary function `f`, a unary function `g`, and two\n  //. values `x` and `y`. Returns `f(g(x))(g(y))`.\n  //.\n  //. This is the P combinator from combinatory logic.\n  //.\n  //. ```javascript\n  //. > S.on(S.concat, S.reverse, [1, 2, 3], [4, 5, 6])\n  //. [3, 2, 1, 6, 5, 4]\n  //. ```\n  function on(f, g, x, y) {\n    return f(g(x))(g(y));\n  }\n  S.on = def('on', {}, [Fn(b, Fn(b, c)), Fn(a, b), a, a, c], on);\n\n  //. ### Maybe type\n  //.\n  //. The Maybe type represents optional values: a value of type `Maybe a` is\n  //. either a Just whose value is of type `a` or Nothing (with no value).\n  //.\n  //. The Maybe type satisfies the [Ord][], [Monoid][], [Monad][],\n  //. [Alternative][], [Traversable][], and [Extend][] specifications.\n\n  //# MaybeType :: Type -> Type\n  //.\n  //. A [`UnaryType`][UnaryType] for use with [sanctuary-def][].\n  S.MaybeType = $Maybe;\n\n  //# Maybe :: TypeRep Maybe\n  //.\n  //. The [type representative](#type-representatives) for the Maybe type.\n  var Maybe = S.Maybe = {prototype: _Maybe.prototype};\n\n  Maybe.prototype.constructor = Maybe;\n\n  function _Maybe(tag, value) {\n    this.isNothing = tag === 'Nothing';\n    this.isJust = tag === 'Just';\n    if (this.isJust) this.value = value;\n\n    //  Add \"fantasy-land/concat\" method conditionally so that Just('abc')\n    //  satisfies the requirements of Semigroup but Just(123) does not.\n    if (this.isNothing || Z.Semigroup.test(this.value)) {\n      this['fantasy-land/concat'] = Maybe$prototype$concat;\n    }\n\n    if (this.isNothing || Z.Setoid.test(this.value)) {\n      this['fantasy-land/equals'] = Maybe$prototype$equals;\n    }\n\n    if (this.isNothing || Z.Ord.test(this.value)) {\n      this['fantasy-land/lte'] = Maybe$prototype$lte;\n    }\n  }\n\n  //# Nothing :: Maybe a\n  //.\n  //. Nothing.\n  //.\n  //. ```javascript\n  //. > S.Nothing\n  //. Nothing\n  //. ```\n  var Nothing = S.Nothing = new _Maybe('Nothing');\n\n  //# Just :: a -> Maybe a\n  //.\n  //. Takes a value of any type and returns a Just with the given value.\n  //.\n  //. ```javascript\n  //. > S.Just(42)\n  //. Just(42)\n  //. ```\n  function Just(x) {\n    return new _Maybe('Just', x);\n  }\n  S.Just = def('Just', {}, [a, $Maybe(a)], Just);\n\n  //# Maybe.@@type :: String\n  //.\n  //. Maybe type identifier, `'sanctuary/Maybe'`.\n  Maybe['@@type'] = maybeTypeIdent;\n\n  //# Maybe.fantasy-land/empty :: () -> Maybe a\n  //.\n  //. Returns Nothing.\n  //.\n  //. It is idiomatic to use [`empty`](#empty) rather than use this function\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.empty(S.Maybe)\n  //. Nothing\n  //. ```\n  Maybe['fantasy-land/empty'] = function() { return Nothing; };\n\n  //# Maybe.fantasy-land/of :: a -> Maybe a\n  //.\n  //. Takes a value of any type and returns a Just with the given value.\n  //.\n  //. It is idiomatic to use [`of`](#of) rather than use this function\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.of(S.Maybe, 42)\n  //. Just(42)\n  //. ```\n  Maybe['fantasy-land/of'] = Just;\n\n  //# Maybe.fantasy-land/zero :: () -> Maybe a\n  //.\n  //. Returns Nothing.\n  //.\n  //. It is idiomatic to use [`zero`](#zero) rather than use this function\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.zero(S.Maybe)\n  //. Nothing\n  //. ```\n  Maybe['fantasy-land/zero'] = function() { return Nothing; };\n\n  //# Maybe#isNothing :: Maybe a ~> Boolean\n  //.\n  //. `true` if `this` is Nothing; `false` if `this` is a Just.\n  //.\n  //. ```javascript\n  //. > S.Nothing.isNothing\n  //. true\n  //.\n  //. > S.Just(42).isNothing\n  //. false\n  //. ```\n\n  //# Maybe#isJust :: Maybe a ~> Boolean\n  //.\n  //. `true` if `this` is a Just; `false` if `this` is Nothing.\n  //.\n  //. ```javascript\n  //. > S.Just(42).isJust\n  //. true\n  //.\n  //. > S.Nothing.isJust\n  //. false\n  //. ```\n\n  //# Maybe#toString :: Maybe a ~> () -> String\n  //.\n  //. Returns the string representation of the Maybe.\n  //.\n  //. ```javascript\n  //. > S.toString(S.Nothing)\n  //. 'Nothing'\n  //.\n  //. > S.toString(S.Just([1, 2, 3]))\n  //. 'Just([1, 2, 3])'\n  //. ```\n  Maybe.prototype.toString = function() {\n    return this.isJust ? 'Just(' + Z.toString(this.value) + ')' : 'Nothing';\n  };\n\n  //# Maybe#inspect :: Maybe a ~> () -> String\n  //.\n  //. Returns the string representation of the Maybe. This method is used by\n  //. `util.inspect` and the REPL to format a Maybe for display.\n  //.\n  //. See also [`Maybe#toString`][].\n  //.\n  //. ```javascript\n  //. > S.Nothing.inspect()\n  //. 'Nothing'\n  //.\n  //. > S.Just([1, 2, 3]).inspect()\n  //. 'Just([1, 2, 3])'\n  //. ```\n  Maybe.prototype.inspect = function() { return this.toString(); };\n\n  //# Maybe#fantasy-land/equals :: Setoid a => Maybe a ~> Maybe a -> Boolean\n  //.\n  //. Takes a value `m` of the same type and returns `true` if:\n  //.\n  //.   - `this` and `m` are both Nothing; or\n  //.\n  //.   - `this` and `m` are both Justs, and their values are equal according\n  //.     to [`Z.equals`][].\n  //.\n  //. It is idiomatic to use [`equals`](#equals) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.equals(S.Nothing, S.Nothing)\n  //. true\n  //.\n  //. > S.equals(S.Just([1, 2, 3]), S.Just([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals(S.Just([1, 2, 3]), S.Just([3, 2, 1]))\n  //. false\n  //.\n  //. > S.equals(S.Just([1, 2, 3]), S.Nothing)\n  //. false\n  //. ```\n  function Maybe$prototype$equals(other) {\n    return this.isNothing ? other.isNothing\n                          : other.isJust && Z.equals(this.value, other.value);\n  }\n\n  //# Maybe#fantasy-land/lte :: Ord a => Maybe a ~> Maybe a -> Boolean\n  //.\n  //. Takes a value `m` of the same type and returns `true` if:\n  //.\n  //.   - `this` is Nothing; or\n  //.\n  //.   - `this` and `m` are both Justs and the value of `this` is less than\n  //.     or equal to the value of `m` according to [`Z.lte`][].\n  //.\n  //. It is idiomatic to use [`lte`](#lte) or [`lte_`](#lte_) rather than use\n  //. this method directly.\n  //.\n  //. ```javascript\n  //. > S.lte_(S.Nothing, S.Nothing)\n  //. true\n  //.\n  //. > S.lte_(S.Nothing, S.Just(0))\n  //. true\n  //.\n  //. > S.lte_(S.Just(0), S.Nothing)\n  //. false\n  //.\n  //. > S.lte_(S.Just(0), S.Just(1))\n  //. true\n  //.\n  //. > S.lte_(S.Just(1), S.Just(0))\n  //. false\n  //. ```\n  function Maybe$prototype$lte(other) {\n    return this.isNothing || other.isJust && Z.lte(this.value, other.value);\n  }\n\n  //# Maybe#fantasy-land/concat :: Semigroup a => Maybe a ~> Maybe a -> Maybe a\n  //.\n  //. Returns the result of concatenating two Maybe values of the same type.\n  //. `a` must have a [Semigroup][].\n  //.\n  //. If `this` is Nothing and the argument is Nothing, this method returns\n  //. Nothing.\n  //.\n  //. If `this` is a Just and the argument is a Just, this method returns a\n  //. Just whose value is the result of concatenating this Just's value and\n  //. the given Just's value.\n  //.\n  //. Otherwise, this method returns the Just.\n  //.\n  //. It is idiomatic to use [`concat`](#concat) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.concat(S.Nothing, S.Nothing)\n  //. Nothing\n  //.\n  //. > S.concat(S.Just([1, 2, 3]), S.Just([4, 5, 6]))\n  //. Just([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat(S.Nothing, S.Just([1, 2, 3]))\n  //. Just([1, 2, 3])\n  //.\n  //. > S.concat(S.Just([1, 2, 3]), S.Nothing)\n  //. Just([1, 2, 3])\n  //. ```\n  function Maybe$prototype$concat(other) {\n    return this.isNothing ?\n      other :\n      other.isNothing ? this : Just(Z.concat(this.value, other.value));\n  }\n\n  //# Maybe#fantasy-land/map :: Maybe a ~> (a -> b) -> Maybe b\n  //.\n  //. Takes a function and returns `this` if `this` is Nothing; otherwise\n  //. it returns a Just whose value is the result of applying the function\n  //. to this Just's value.\n  //.\n  //. It is idiomatic to use [`map`](#map) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.map(Math.sqrt, S.Nothing)\n  //. Nothing\n  //.\n  //. > S.map(Math.sqrt, S.Just(9))\n  //. Just(3)\n  //. ```\n  Maybe.prototype['fantasy-land/map'] = function(f) {\n    return this.isJust ? Just(f(this.value)) : this;\n  };\n\n  //# Maybe#fantasy-land/ap :: Maybe a ~> Maybe (a -> b) -> Maybe b\n  //.\n  //. Takes a Maybe and returns Nothing unless `this` is a Just *and* the\n  //. argument is a Just, in which case it returns a Just whose value is\n  //. the result of applying the given Just's value to this Just's value.\n  //.\n  //. It is idiomatic to use [`ap`](#ap) rather than use this method directly.\n  //.\n  //. ```javascript\n  //. > S.ap(S.Nothing, S.Nothing)\n  //. Nothing\n  //.\n  //. > S.ap(S.Nothing, S.Just(9))\n  //. Nothing\n  //.\n  //. > S.ap(S.Just(Math.sqrt), S.Nothing)\n  //. Nothing\n  //.\n  //. > S.ap(S.Just(Math.sqrt), S.Just(9))\n  //. Just(3)\n  //. ```\n  Maybe.prototype['fantasy-land/ap'] = function(other) {\n    return other.isJust ? Z.map(other.value, this) : other;\n  };\n\n  //# Maybe#fantasy-land/chain :: Maybe a ~> (a -> Maybe b) -> Maybe b\n  //.\n  //. Takes a function and returns `this` if `this` is Nothing; otherwise\n  //. it returns the result of applying the function to this Just's value.\n  //.\n  //. It is idiomatic to use [`chain`](#chain) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.chain(S.parseFloat, S.Nothing)\n  //. Nothing\n  //.\n  //. > S.chain(S.parseFloat, S.Just('xxx'))\n  //. Nothing\n  //.\n  //. > S.chain(S.parseFloat, S.Just('12.34'))\n  //. Just(12.34)\n  //. ```\n  Maybe.prototype['fantasy-land/chain'] = function(f) {\n    return this.isJust ? f(this.value) : this;\n  };\n\n  //# Maybe#fantasy-land/alt :: Maybe a ~> Maybe a -> Maybe a\n  //.\n  //. Chooses between `this` and the other Maybe provided as an argument.\n  //. Returns `this` if `this` is a Just; the other Maybe otherwise.\n  //.\n  //. It is idiomatic to use [`alt`](#alt) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.alt(S.Nothing, S.Nothing)\n  //. Nothing\n  //.\n  //. > S.alt(S.Nothing, S.Just(1))\n  //. Just(1)\n  //.\n  //. > S.alt(S.Just(2), S.Nothing)\n  //. Just(2)\n  //.\n  //. > S.alt(S.Just(3), S.Just(4))\n  //. Just(3)\n  //. ```\n  Maybe.prototype['fantasy-land/alt'] = function(other) {\n    return this.isJust ? this : other;\n  };\n\n  //# Maybe#fantasy-land/reduce :: Maybe a ~> ((b, a) -> b, b) -> b\n  //.\n  //. Takes a function and an initial value of any type, and returns:\n  //.\n  //.   - the initial value if `this` is Nothing; otherwise\n  //.\n  //.   - the result of applying the function to the initial value and this\n  //.     Just's value.\n  //.\n  //. It is idiomatic to use [`reduce`](#reduce) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.reduce(S.curry2(Math.pow), 10, S.Nothing)\n  //. 10\n  //.\n  //. > S.reduce(S.curry2(Math.pow), 10, S.Just(3))\n  //. 1000\n  //. ```\n  Maybe.prototype['fantasy-land/reduce'] = function(f, x) {\n    return this.isJust ? f(x, this.value) : x;\n  };\n\n  //# Maybe#fantasy-land/traverse :: Applicative f => Maybe a ~> (TypeRep f, a -> f b) -> f (Maybe b)\n  //.\n  //. Takes the type representative of some [Applicative][] and a function\n  //. which returns a value of that Applicative, and returns:\n  //.\n  //.   - the result of applying the type representative's [`of`][] function to\n  //.     `this` if `this` is Nothing; otherwise\n  //.\n  //.   - the result of mapping [`Just`](#Just) over the result of applying the\n  //.     first function to this Just's value.\n  //.\n  //. It is idiomatic to use [`traverse`](#traverse) rather than use this\n  //. method directly.\n  //.\n  //. ```javascript\n  //. > S.traverse(Array, S.words, S.Nothing)\n  //. [Nothing]\n  //.\n  //. > S.traverse(Array, S.words, S.Just('foo bar baz'))\n  //. [Just('foo'), Just('bar'), Just('baz')]\n  //. ```\n  Maybe.prototype['fantasy-land/traverse'] = function(typeRep, f) {\n    return this.isJust ? Z.map(Just, f(this.value)) : Z.of(typeRep, this);\n  };\n\n  //# Maybe#fantasy-land/extend :: Maybe a ~> (Maybe a -> b) -> Maybe b\n  //.\n  //. Takes a function and returns `this` if `this` is Nothing; otherwise\n  //. it returns a Just whose value is the result of applying the function\n  //. to `this`.\n  //.\n  //. It is idiomatic to use [`extend`](#extend) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.extend(x => x.value + 1, S.Nothing)\n  //. Nothing\n  //.\n  //. > S.extend(x => x.value + 1, S.Just(42))\n  //. Just(43)\n  //. ```\n  Maybe.prototype['fantasy-land/extend'] = function(f) {\n    return this.isJust ? Just(f(this)) : this;\n  };\n\n  //# isNothing :: Maybe a -> Boolean\n  //.\n  //. Returns `true` if the given Maybe is Nothing; `false` if it is a Just.\n  //.\n  //. ```javascript\n  //. > S.isNothing(S.Nothing)\n  //. true\n  //.\n  //. > S.isNothing(S.Just(42))\n  //. false\n  //. ```\n  function isNothing(maybe) {\n    return maybe.isNothing;\n  }\n  S.isNothing = def('isNothing', {}, [$Maybe(a), $.Boolean], isNothing);\n\n  //# isJust :: Maybe a -> Boolean\n  //.\n  //. Returns `true` if the given Maybe is a Just; `false` if it is Nothing.\n  //.\n  //. ```javascript\n  //. > S.isJust(S.Just(42))\n  //. true\n  //.\n  //. > S.isJust(S.Nothing)\n  //. false\n  //. ```\n  function isJust(maybe) {\n    return maybe.isJust;\n  }\n  S.isJust = def('isJust', {}, [$Maybe(a), $.Boolean], isJust);\n\n  //# fromMaybe :: a -> Maybe a -> a\n  //.\n  //. Takes a default value and a Maybe, and returns the Maybe's value\n  //. if the Maybe is a Just; the default value otherwise.\n  //.\n  //. See also [`fromMaybe_`](#fromMaybe_) and\n  //. [`maybeToNullable`](#maybeToNullable).\n  //.\n  //. ```javascript\n  //. > S.fromMaybe(0, S.Just(42))\n  //. 42\n  //.\n  //. > S.fromMaybe(0, S.Nothing)\n  //. 0\n  //. ```\n  function fromMaybe(x, maybe) {\n    return maybe.isJust ? maybe.value : x;\n  }\n  S.fromMaybe = def('fromMaybe', {}, [a, $Maybe(a), a], fromMaybe);\n\n  //# fromMaybe_ :: (() -> a) -> Maybe a -> a\n  //.\n  //. Variant of [`fromMaybe`](#fromMaybe) which takes a thunk so the default\n  //. value is only computed if required.\n  //.\n  //. ```javascript\n  //. > function fib(n) { return n <= 1 ? n : fib(n - 2) + fib(n - 1); }\n  //.\n  //. > S.fromMaybe_(() => fib(30), S.Just(1000000))\n  //. 1000000\n  //.\n  //. > S.fromMaybe_(() => fib(30), S.Nothing)\n  //. 832040\n  //. ```\n  function fromMaybe_(thunk, maybe) {\n    return maybe.isJust ? maybe.value : thunk();\n  }\n  S.fromMaybe_ = def('fromMaybe_', {}, [$.Thunk(a), $Maybe(a), a], fromMaybe_);\n\n  //# maybeToNullable :: Maybe a -> Nullable a\n  //.\n  //. Returns the given Maybe's value if the Maybe is a Just; `null` otherwise.\n  //. [Nullable][] is defined in [sanctuary-def][].\n  //.\n  //. See also [`fromMaybe`](#fromMaybe).\n  //.\n  //. ```javascript\n  //. > S.maybeToNullable(S.Just(42))\n  //. 42\n  //.\n  //. > S.maybeToNullable(S.Nothing)\n  //. null\n  //. ```\n  function maybeToNullable(maybe) {\n    return maybe.isJust ? maybe.value : null;\n  }\n  S.maybeToNullable =\n  def('maybeToNullable', {}, [$Maybe(a), $.Nullable(a)], maybeToNullable);\n\n  //# toMaybe :: a? -> Maybe a\n  //.\n  //. Takes a value and returns Nothing if the value is `null` or `undefined`;\n  //. Just the value otherwise.\n  //.\n  //. ```javascript\n  //. > S.toMaybe(null)\n  //. Nothing\n  //.\n  //. > S.toMaybe(42)\n  //. Just(42)\n  //. ```\n  function toMaybe(x) {\n    return x == null ? Nothing : Just(x);\n  }\n  S.toMaybe = def('toMaybe', {}, [a, $Maybe(a)], toMaybe);\n\n  //# maybe :: b -> (a -> b) -> Maybe a -> b\n  //.\n  //. Takes a value of any type, a function, and a Maybe. If the Maybe is\n  //. a Just, the return value is the result of applying the function to\n  //. the Just's value. Otherwise, the first argument is returned.\n  //.\n  //. See also [`maybe_`](#maybe_).\n  //.\n  //. ```javascript\n  //. > S.maybe(0, S.prop('length'), S.Just('refuge'))\n  //. 6\n  //.\n  //. > S.maybe(0, S.prop('length'), S.Nothing)\n  //. 0\n  //. ```\n  function maybe(x, f, maybe) {\n    return fromMaybe(x, Z.map(f, maybe));\n  }\n  S.maybe = def('maybe', {}, [b, Fn(a, b), $Maybe(a), b], maybe);\n\n  //# maybe_ :: (() -> b) -> (a -> b) -> Maybe a -> b\n  //.\n  //. Variant of [`maybe`](#maybe) which takes a thunk so the default value\n  //. is only computed if required.\n  //.\n  //. ```javascript\n  //. > function fib(n) { return n <= 1 ? n : fib(n - 2) + fib(n - 1); }\n  //.\n  //. > S.maybe_(() => fib(30), Math.sqrt, S.Just(1000000))\n  //. 1000\n  //.\n  //. > S.maybe_(() => fib(30), Math.sqrt, S.Nothing)\n  //. 832040\n  //. ```\n  function maybe_(thunk, f, maybe) {\n    return maybe.isJust ? f(maybe.value) : thunk();\n  }\n  S.maybe_ = def('maybe_', {}, [$.Thunk(b), Fn(a, b), $Maybe(a), b], maybe_);\n\n  //# justs :: Array (Maybe a) -> Array a\n  //.\n  //. Takes an array of Maybes and returns an array containing each Just's\n  //. value. Equivalent to Haskell's `catMaybes` function.\n  //.\n  //. See also [`lefts`](#lefts) and [`rights`](#rights).\n  //.\n  //. ```javascript\n  //. > S.justs([S.Just('foo'), S.Nothing, S.Just('baz')])\n  //. ['foo', 'baz']\n  //. ```\n  function justs(maybes) {\n    return Z.reduce(function(xs, maybe) {\n      if (maybe.isJust) xs.push(maybe.value);\n      return xs;\n    }, [], maybes);\n  }\n  S.justs = def('justs', {}, [$.Array($Maybe(a)), $.Array(a)], justs);\n\n  //# mapMaybe :: (a -> Maybe b) -> Array a -> Array b\n  //.\n  //. Takes a function and an array, applies the function to each element of\n  //. the array, and returns an array of \"successful\" results. If the result of\n  //. applying the function to an element of the array is Nothing, the result\n  //. is discarded; if the result is a Just, the Just's value is included in\n  //. the output array.\n  //.\n  //. In general terms, `mapMaybe` filters an array while mapping over it.\n  //.\n  //. ```javascript\n  //. > S.mapMaybe(S.head, [[], [1, 2, 3], [], [4, 5, 6], []])\n  //. [1, 4]\n  //. ```\n  function mapMaybe(f, xs) {\n    return justs(Z.map(f, xs));\n  }\n  S.mapMaybe =\n  def('mapMaybe', {}, [Fn(a, $Maybe(b)), $.Array(a), $.Array(b)], mapMaybe);\n\n  //# encase :: (a -> b) -> a -> Maybe b\n  //.\n  //. Takes a unary function `f` which may throw and a value `x` of any type,\n  //. and applies `f` to `x` inside a `try` block. If an exception is caught,\n  //. the return value is Nothing; otherwise the return value is Just the\n  //. result of applying `f` to `x`.\n  //.\n  //. See also [`encaseEither`](#encaseEither).\n  //.\n  //. ```javascript\n  //. > S.encase(eval, '1 + 1')\n  //. Just(2)\n  //.\n  //. > S.encase(eval, '1 +')\n  //. Nothing\n  //. ```\n  function encase(f, x) {\n    try {\n      return Just(f(x));\n    } catch (err) {\n      return Nothing;\n    }\n  }\n  S.encase = def('encase', {}, [Fn(a, b), a, $Maybe(b)], encase);\n\n  //# encase2 :: (a -> b -> c) -> a -> b -> Maybe c\n  //.\n  //. Binary version of [`encase`](#encase).\n  function encase2(f, x, y) {\n    try {\n      return Just(f(x)(y));\n    } catch (err) {\n      return Nothing;\n    }\n  }\n  S.encase2 = def('encase2', {}, [Fn(a, Fn(b, c)), a, b, $Maybe(c)], encase2);\n\n  //# encase3 :: (a -> b -> c -> d) -> a -> b -> c -> Maybe d\n  //.\n  //. Ternary version of [`encase`](#encase).\n  function encase3(f, x, y, z) {\n    try {\n      return Just(f(x)(y)(z));\n    } catch (err) {\n      return Nothing;\n    }\n  }\n  S.encase3 =\n  def('encase3', {}, [Fn(a, Fn(b, Fn(c, d))), a, b, c, $Maybe(d)], encase3);\n\n  //# maybeToEither :: a -> Maybe b -> Either a b\n  //.\n  //. Converts a Maybe to an Either. Nothing becomes a Left (containing the\n  //. first argument); a Just becomes a Right.\n  //.\n  //. See also [`eitherToMaybe`](#eitherToMaybe).\n  //.\n  //. ```javascript\n  //. > S.maybeToEither('Expecting an integer', S.parseInt(10, 'xyz'))\n  //. Left('Expecting an integer')\n  //.\n  //. > S.maybeToEither('Expecting an integer', S.parseInt(10, '42'))\n  //. Right(42)\n  //. ```\n  function maybeToEither(x, maybe) {\n    return maybe.isNothing ? Left(x) : Right(maybe.value);\n  }\n  S.maybeToEither =\n  def('maybeToEither', {}, [a, $Maybe(b), $Either(a, b)], maybeToEither);\n\n  //. ### Either type\n  //.\n  //. The Either type represents values with two possibilities: a value of type\n  //. `Either a b` is either a Left whose value is of type `a` or a Right whose\n  //. value is of type `b`.\n  //.\n  //. The Either type satisfies the [Ord][], [Semigroup][], [Monad][],\n  //. [Alt][], [Traversable][], [Extend][], and [Bifunctor][] specifications.\n\n  //# EitherType :: Type -> Type -> Type\n  //.\n  //. A [`BinaryType`][BinaryType] for use with [sanctuary-def][].\n  S.EitherType = $Either;\n\n  //# Either :: TypeRep Either\n  //.\n  //. The [type representative](#type-representatives) for the Either type.\n  var Either = S.Either = {prototype: _Either.prototype};\n\n  Either.prototype.constructor = Either;\n\n  function _Either(tag, value) {\n    this.isLeft = tag === 'Left';\n    this.isRight = tag === 'Right';\n    this.value = value;\n\n    //  Add \"fantasy-land/concat\" method conditionally so that Left('abc')\n    //  and Right('abc') satisfy the requirements of Semigroup but Left(123)\n    //  and Right(123) do not.\n    if (Z.Semigroup.test(this.value)) {\n      this['fantasy-land/concat'] = Either$prototype$concat;\n    }\n\n    if (Z.Setoid.test(this.value)) {\n      this['fantasy-land/equals'] = Either$prototype$equals;\n    }\n\n    if (Z.Ord.test(this.value)) {\n      this['fantasy-land/lte'] = Either$prototype$lte;\n    }\n  }\n\n  //# Left :: a -> Either a b\n  //.\n  //. Takes a value of any type and returns a Left with the given value.\n  //.\n  //. ```javascript\n  //. > S.Left('Cannot divide by zero')\n  //. Left('Cannot divide by zero')\n  //. ```\n  function Left(x) {\n    return new _Either('Left', x);\n  }\n  S.Left = def('Left', {}, [a, $Either(a, b)], Left);\n\n  //# Right :: b -> Either a b\n  //.\n  //. Takes a value of any type and returns a Right with the given value.\n  //.\n  //. ```javascript\n  //. > S.Right(42)\n  //. Right(42)\n  //. ```\n  function Right(x) {\n    return new _Either('Right', x);\n  }\n  S.Right = def('Right', {}, [b, $Either(a, b)], Right);\n\n  //# Either.@@type :: String\n  //.\n  //. Either type identifier, `'sanctuary/Either'`.\n  Either['@@type'] = eitherTypeIdent;\n\n  //# Either.fantasy-land/of :: b -> Either a b\n  //.\n  //. Takes a value of any type and returns a Right with the given value.\n  //.\n  //. It is idiomatic to use [`of`](#of) rather than use this function\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.of(S.Either, 42)\n  //. Right(42)\n  //. ```\n  Either['fantasy-land/of'] = Right;\n\n  //# Either#isLeft :: Either a b ~> Boolean\n  //.\n  //. `true` if `this` is a Left; `false` if `this` is a Right.\n  //.\n  //. ```javascript\n  //. > S.Left('Cannot divide by zero').isLeft\n  //. true\n  //.\n  //. > S.Right(42).isLeft\n  //. false\n  //. ```\n\n  //# Either#isRight :: Either a b ~> Boolean\n  //.\n  //. `true` if `this` is a Right; `false` if `this` is a Left.\n  //.\n  //. ```javascript\n  //. > S.Right(42).isRight\n  //. true\n  //.\n  //. > S.Left('Cannot divide by zero').isRight\n  //. false\n  //. ```\n\n  //# Either#toString :: Either a b ~> () -> String\n  //.\n  //. Returns the string representation of the Either.\n  //.\n  //. ```javascript\n  //. > S.toString(S.Left('Cannot divide by zero'))\n  //. 'Left(\"Cannot divide by zero\")'\n  //.\n  //. > S.toString(S.Right([1, 2, 3]))\n  //. 'Right([1, 2, 3])'\n  //. ```\n  Either.prototype.toString = function() {\n    return (this.isLeft ? 'Left' : 'Right') +\n           '(' + Z.toString(this.value) + ')';\n  };\n\n  //# Either#inspect :: Either a b ~> () -> String\n  //.\n  //. Returns the string representation of the Either. This method is used by\n  //. `util.inspect` and the REPL to format a Either for display.\n  //.\n  //. See also [`Either#toString`][].\n  //.\n  //. ```javascript\n  //. > S.Left('Cannot divide by zero').inspect()\n  //. 'Left(\"Cannot divide by zero\")'\n  //.\n  //. > S.Right([1, 2, 3]).inspect()\n  //. 'Right([1, 2, 3])'\n  //. ```\n  Either.prototype.inspect = function() { return this.toString(); };\n\n  //# Either#fantasy-land/equals :: (Setoid a, Setoid b) => Either a b ~> Either a b -> Boolean\n  //.\n  //. Takes a value `e` of the same type and returns `true` if:\n  //.\n  //.   - `this` and `e` are both Lefts or both Rights, and their values are\n  //.     equal according to [`Z.equals`][].\n  //.\n  //. It is idiomatic to use [`equals`](#equals) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.equals(S.Right([1, 2, 3]), S.Right([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals(S.Right([1, 2, 3]), S.Left([1, 2, 3]))\n  //. false\n  //. ```\n  function Either$prototype$equals(other) {\n    return this.isLeft === other.isLeft && Z.equals(this.value, other.value);\n  }\n\n  //# Either#fantasy-land/lte :: (Ord a, Ord b) => Either a b ~> Either a b -> Boolean\n  //.\n  //. Takes a value `e` of the same type and returns `true` if:\n  //.\n  //.   - `this` is a Left and `e` is a Right; or\n  //.\n  //.   - `this` and `e` are both Lefts or both Rights, and the value of `this`\n  //.     is less than or equal to the value of `e` according to [`Z.lte`][].\n  //.\n  //. It is idiomatic to use [`lte`](#lte) or [`lte_`](#lte_) rather than use\n  //. this method directly.\n  //.\n  //. ```javascript\n  //. > S.lte_(S.Left(10), S.Right(0))\n  //. true\n  //.\n  //. > S.lte_(S.Right(0), S.Left(10))\n  //. false\n  //.\n  //. > S.lte_(S.Right(0), S.Right(1))\n  //. true\n  //.\n  //. > S.lte_(S.Right(1), S.Right(0))\n  //. false\n  //. ```\n  function Either$prototype$lte(other) {\n    return this.isLeft === other.isLeft ?\n      Z.lte(this.value, other.value) :\n      this.isLeft;\n  }\n\n  //# Either#fantasy-land/concat :: (Semigroup a, Semigroup b) => Either a b ~> Either a b -> Either a b\n  //.\n  //. Returns the result of concatenating two Either values of the same type.\n  //. `a` must have a [Semigroup][], as must `b`.\n  //.\n  //. If `this` is a Left and the argument is a Left, this method returns a\n  //. Left whose value is the result of concatenating this Left's value and\n  //. the given Left's value.\n  //.\n  //. If `this` is a Right and the argument is a Right, this method returns a\n  //. Right whose value is the result of concatenating this Right's value and\n  //. the given Right's value.\n  //.\n  //. Otherwise, this method returns the Right.\n  //.\n  //. It is idiomatic to use [`concat`](#concat) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.concat(S.Left('abc'), S.Left('def'))\n  //. Left('abcdef')\n  //.\n  //. > S.concat(S.Right([1, 2, 3]), S.Right([4, 5, 6]))\n  //. Right([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat(S.Left('abc'), S.Right([1, 2, 3]))\n  //. Right([1, 2, 3])\n  //.\n  //. > S.concat(S.Right([1, 2, 3]), S.Left('abc'))\n  //. Right([1, 2, 3])\n  //. ```\n  function Either$prototype$concat(other) {\n    return this.isLeft ?\n      other.isLeft ? Left(Z.concat(this.value, other.value)) : other :\n      other.isLeft ? this : Right(Z.concat(this.value, other.value));\n  }\n\n  //# Either#fantasy-land/map :: Either a b ~> (b -> c) -> Either a c\n  //.\n  //. Takes a function and returns `this` if `this` is a Left; otherwise it\n  //. returns a Right whose value is the result of applying the function to\n  //. this Right's value.\n  //.\n  //. It is idiomatic to use [`map`](#map) rather than use this method\n  //. directly.\n  //.\n  //. See also [`Either#fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > S.map(Math.sqrt, S.Left('Cannot divide by zero'))\n  //. Left('Cannot divide by zero')\n  //.\n  //. > S.map(Math.sqrt, S.Right(9))\n  //. Right(3)\n  //. ```\n  Either.prototype['fantasy-land/map'] = function(f) {\n    return this.isRight ? Right(f(this.value)) : this;\n  };\n\n  //# Either#fantasy-land/bimap :: Either a b ~> (a -> c, b -> d) -> Either c d\n  //.\n  //. Takes two functions and returns:\n  //.\n  //.   - a Left whose value is the result of applying the first function\n  //.     to this Left's value if `this` is a Left; otherwise\n  //.\n  //.   - a Right whose value is the result of applying the second function\n  //.     to this Right's value.\n  //.\n  //. Similar to [`Either#fantasy-land/map`][], but supports mapping over the\n  //. left side as well as the right side.\n  //.\n  //. It is idiomatic to use [`bimap`](#bimap) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.bimap(S.toUpper, S.add(1), S.Left('abc'))\n  //. Left('ABC')\n  //.\n  //. > S.bimap(S.toUpper, S.add(1), S.Right(42))\n  //. Right(43)\n  //. ```\n  Either.prototype['fantasy-land/bimap'] = function(f, g) {\n    return this.isLeft ? Left(f(this.value)) : Right(g(this.value));\n  };\n\n  //# Either#fantasy-land/ap :: Either a b ~> Either a (b -> c) -> Either a c\n  //.\n  //. Takes an Either and returns a Left unless `this` is a Right *and* the\n  //. argument is a Right, in which case it returns a Right whose value is\n  //. the result of applying the given Right's value to this Right's value.\n  //.\n  //. It is idiomatic to use [`ap`](#ap) rather than use this method directly.\n  //.\n  //. ```javascript\n  //. > S.ap(S.Left('No such function'), S.Left('Cannot divide by zero'))\n  //. Left('No such function')\n  //.\n  //. > S.ap(S.Left('No such function'), S.Right(9))\n  //. Left('No such function')\n  //.\n  //. > S.ap(S.Right(Math.sqrt), S.Left('Cannot divide by zero'))\n  //. Left('Cannot divide by zero')\n  //.\n  //. > S.ap(S.Right(Math.sqrt), S.Right(9))\n  //. Right(3)\n  //. ```\n  Either.prototype['fantasy-land/ap'] = function(other) {\n    return other.isRight ? Z.map(other.value, this) : other;\n  };\n\n  //# Either#fantasy-land/chain :: Either a b ~> (b -> Either a c) -> Either a c\n  //.\n  //. Takes a function and returns `this` if `this` is a Left; otherwise\n  //. it returns the result of applying the function to this Right's value.\n  //.\n  //. It is idiomatic to use [`chain`](#chain) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > global.sqrt = n =>\n  //. .   n < 0 ? S.Left('Cannot represent square root of negative number')\n  //. .         : S.Right(Math.sqrt(n))\n  //. sqrt\n  //.\n  //. > S.chain(sqrt, S.Left('Cannot divide by zero'))\n  //. Left('Cannot divide by zero')\n  //.\n  //. > S.chain(sqrt, S.Right(-1))\n  //. Left('Cannot represent square root of negative number')\n  //.\n  //. > S.chain(sqrt, S.Right(25))\n  //. Right(5)\n  //. ```\n  Either.prototype['fantasy-land/chain'] = function(f) {\n    return this.isRight ? f(this.value) : this;\n  };\n\n  //# Either#fantasy-land/alt :: Either a b ~> Either a b -> Either a b\n  //.\n  //. Chooses between `this` and the other Either provided as an argument.\n  //. Returns `this` if `this` is a Right; the other Either otherwise.\n  //.\n  //. It is idiomatic to use [`alt`](#alt) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.alt(S.Left('A'), S.Left('B'))\n  //. Left('B')\n  //.\n  //. > S.alt(S.Left('C'), S.Right(1))\n  //. Right(1)\n  //.\n  //. > S.alt(S.Right(2), S.Left('D'))\n  //. Right(2)\n  //.\n  //. > S.alt(S.Right(3), S.Right(4))\n  //. Right(3)\n  //. ```\n  Either.prototype['fantasy-land/alt'] = function(other) {\n    return this.isRight ? this : other;\n  };\n\n  //# Either#fantasy-land/reduce :: Either a b ~> ((c, b) -> c, c) -> c\n  //.\n  //. Takes a function and an initial value of any type, and returns:\n  //.\n  //.   - the initial value if `this` is a Left; otherwise\n  //.\n  //.   - the result of applying the function to the initial value and this\n  //.     Right's value.\n  //.\n  //. It is idiomatic to use [`reduce`](#reduce) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.reduce(S.curry2(Math.pow), 10, S.Left('Cannot divide by zero'))\n  //. 10\n  //.\n  //. > S.reduce(S.curry2(Math.pow), 10, S.Right(3))\n  //. 1000\n  //. ```\n  Either.prototype['fantasy-land/reduce'] = function(f, x) {\n    return this.isRight ? f(x, this.value) : x;\n  };\n\n  //# Either#fantasy-land/traverse :: Applicative f => Either a b ~> (TypeRep f, b -> f c) -> f (Either a c)\n  //.\n  //. Takes the type representative of some [Applicative][] and a function\n  //. which returns a value of that Applicative, and returns:\n  //.\n  //.   - the result of applying the type representative's [`of`][] function to\n  //.     `this` if `this` is a Left; otherwise\n  //.\n  //.   - the result of mapping [`Right`](#Right) over the result of applying\n  //.     the first function to this Right's value.\n  //.\n  //. It is idiomatic to use [`traverse`](#traverse) rather than use this\n  //. method directly.\n  //.\n  //. ```javascript\n  //. > S.traverse(Array, S.words, S.Left('Request failed'))\n  //. [Left('Request failed')]\n  //.\n  //. > S.traverse(Array, S.words, S.Right('foo bar baz'))\n  //. [Right('foo'), Right('bar'), Right('baz')]\n  //. ```\n  Either.prototype['fantasy-land/traverse'] = function(typeRep, f) {\n    return this.isRight ? Z.map(Right, f(this.value)) : Z.of(typeRep, this);\n  };\n\n  //# Either#fantasy-land/extend :: Either a b ~> (Either a b -> c) -> Either a c\n  //.\n  //. Takes a function and returns `this` if `this` is a Left; otherwise it\n  //. returns a Right whose value is the result of applying the function to\n  //. `this`.\n  //.\n  //. It is idiomatic to use [`extend`](#extend) rather than use this method\n  //. directly.\n  //.\n  //. ```javascript\n  //. > S.extend(x => x.value + 1, S.Left('Cannot divide by zero'))\n  //. Left('Cannot divide by zero')\n  //.\n  //. > S.extend(x => x.value + 1, S.Right(42))\n  //. Right(43)\n  //. ```\n  Either.prototype['fantasy-land/extend'] = function(f) {\n    return this.isLeft ? this : Right(f(this));\n  };\n\n  //# isLeft :: Either a b -> Boolean\n  //.\n  //. Returns `true` if the given Either is a Left; `false` if it is a Right.\n  //.\n  //. ```javascript\n  //. > S.isLeft(S.Left('Cannot divide by zero'))\n  //. true\n  //.\n  //. > S.isLeft(S.Right(42))\n  //. false\n  //. ```\n  function isLeft(either) {\n    return either.isLeft;\n  }\n  S.isLeft = def('isLeft', {}, [$Either(a, b), $.Boolean], isLeft);\n\n  //# isRight :: Either a b -> Boolean\n  //.\n  //. Returns `true` if the given Either is a Right; `false` if it is a Left.\n  //.\n  //. ```javascript\n  //. > S.isRight(S.Right(42))\n  //. true\n  //.\n  //. > S.isRight(S.Left('Cannot divide by zero'))\n  //. false\n  //. ```\n  function isRight(either) {\n    return either.isRight;\n  }\n  S.isRight = def('isRight', {}, [$Either(a, b), $.Boolean], isRight);\n\n  //# fromEither :: b -> Either a b -> b\n  //.\n  //. Takes a default value and an Either, and returns the Right value\n  //. if the Either is a Right; the default value otherwise.\n  //.\n  //. ```javascript\n  //. > S.fromEither(0, S.Right(42))\n  //. 42\n  //.\n  //. > S.fromEither(0, S.Left(42))\n  //. 0\n  //. ```\n  function fromEither(x, either) {\n    return either.isRight ? either.value : x;\n  }\n  S.fromEither = def('fromEither', {}, [b, $Either(a, b), b], fromEither);\n\n  //# toEither :: a -> b? -> Either a b\n  //.\n  //. Converts an arbitrary value to an Either: a Left if the value is `null`\n  //. or `undefined`; a Right otherwise. The first argument specifies the\n  //. value of the Left in the \"failure\" case.\n  //.\n  //. ```javascript\n  //. > S.toEither('XYZ', null)\n  //. Left('XYZ')\n  //.\n  //. > S.toEither('XYZ', 'ABC')\n  //. Right('ABC')\n  //.\n  //. > S.map(S.prop('0'), S.toEither('Invalid protocol', 'ftp://example.com/'.match(/^https?:/)))\n  //. Left('Invalid protocol')\n  //.\n  //. > S.map(S.prop('0'), S.toEither('Invalid protocol', 'https://example.com/'.match(/^https?:/)))\n  //. Right('https:')\n  //. ```\n  function toEither(x, y) {\n    return y == null ? Left(x) : Right(y);\n  }\n  S.toEither = def('toEither', {}, [a, b, $Either(a, b)], toEither);\n\n  //# either :: (a -> c) -> (b -> c) -> Either a b -> c\n  //.\n  //. Takes two functions and an Either, and returns the result of\n  //. applying the first function to the Left's value, if the Either\n  //. is a Left, or the result of applying the second function to the\n  //. Right's value, if the Either is a Right.\n  //.\n  //. ```javascript\n  //. > S.either(S.toUpper, S.toString, S.Left('Cannot divide by zero'))\n  //. 'CANNOT DIVIDE BY ZERO'\n  //.\n  //. > S.either(S.toUpper, S.toString, S.Right(42))\n  //. '42'\n  //. ```\n  function either(l, r, either) {\n    return either.isLeft ? l(either.value) : r(either.value);\n  }\n  S.either = def('either', {}, [Fn(a, c), Fn(b, c), $Either(a, b), c], either);\n\n  //# lefts :: Array (Either a b) -> Array a\n  //.\n  //. Takes an array of Eithers and returns an array containing each Left's\n  //. value.\n  //.\n  //. See also [`rights`](#rights).\n  //.\n  //. ```javascript\n  //. > S.lefts([S.Right(20), S.Left('foo'), S.Right(10), S.Left('bar')])\n  //. ['foo', 'bar']\n  //. ```\n  function lefts(eithers) {\n    return Z.reduce(function(xs, either) {\n      if (either.isLeft) xs.push(either.value);\n      return xs;\n    }, [], eithers);\n  }\n  S.lefts = def('lefts', {}, [$.Array($Either(a, b)), $.Array(a)], lefts);\n\n  //# rights :: Array (Either a b) -> Array b\n  //.\n  //. Takes an array of Eithers and returns an array containing each Right's\n  //. value.\n  //.\n  //. See also [`lefts`](#lefts).\n  //.\n  //. ```javascript\n  //. > S.rights([S.Right(20), S.Left('foo'), S.Right(10), S.Left('bar')])\n  //. [20, 10]\n  //. ```\n  function rights(eithers) {\n    return Z.reduce(function(xs, either) {\n      if (either.isRight) xs.push(either.value);\n      return xs;\n    }, [], eithers);\n  }\n  S.rights = def('rights', {}, [$.Array($Either(a, b)), $.Array(b)], rights);\n\n  //# tagBy :: (a -> Boolean) -> a -> Either a a\n  //.\n  //. Takes a predicate and a value, and returns a Right of the value if it\n  //. satisfies the predicate; a Left of the value otherwise.\n  //.\n  //. ```javascript\n  //. > S.tagBy(S.odd, 0)\n  //. Left(0)\n  //\n  //. > S.tagBy(S.odd, 1)\n  //. Right(1)\n  //. ```\n  function tagBy(pred, a) {\n    return pred(a) ? Right(a) : Left(a);\n  }\n  S.tagBy = def('tagBy', {}, [$.Predicate(a), a, $Either(a, a)], tagBy);\n\n  //# encaseEither :: (Error -> l) -> (a -> r) -> a -> Either l r\n  //.\n  //. Takes two unary functions, `f` and `g`, the second of which may throw,\n  //. and a value `x` of any type. Applies `g` to `x` inside a `try` block.\n  //. If an exception is caught, the return value is a Left containing the\n  //. result of applying `f` to the caught Error object; otherwise the return\n  //. value is a Right containing the result of applying `g` to `x`.\n  //.\n  //. See also [`encase`](#encase).\n  //.\n  //. ```javascript\n  //. > S.encaseEither(S.I, JSON.parse, '[\"foo\",\"bar\",\"baz\"]')\n  //. Right(['foo', 'bar', 'baz'])\n  //.\n  //. > S.encaseEither(S.I, JSON.parse, '[')\n  //. Left(new SyntaxError('Unexpected end of JSON input'))\n  //.\n  //. > S.encaseEither(S.prop('message'), JSON.parse, '[')\n  //. Left('Unexpected end of JSON input')\n  //. ```\n  function encaseEither(f, g, x) {\n    try {\n      return Right(g(x));\n    } catch (err) {\n      return Left(f(err));\n    }\n  }\n  S.encaseEither =\n  def('encaseEither',\n      {},\n      [Fn($.Error, l), Fn(a, r), a, $Either(l, r)],\n      encaseEither);\n\n  //# encaseEither2 :: (Error -> l) -> (a -> b -> r) -> a -> b -> Either l r\n  //.\n  //. Binary version of [`encaseEither`](#encaseEither).\n  function encaseEither2(f, g, x, y) {\n    try {\n      return Right(g(x)(y));\n    } catch (err) {\n      return Left(f(err));\n    }\n  }\n  S.encaseEither2 =\n  def('encaseEither2',\n      {},\n      [Fn($.Error, l), Fn(a, Fn(b, r)), a, b, $Either(l, r)],\n      encaseEither2);\n\n  //# encaseEither3 :: (Error -> l) -> (a -> b -> c -> r) -> a -> b -> c -> Either l r\n  //.\n  //. Ternary version of [`encaseEither`](#encaseEither).\n  function encaseEither3(f, g, x, y, z) {\n    try {\n      return Right(g(x)(y)(z));\n    } catch (err) {\n      return Left(f(err));\n    }\n  }\n  S.encaseEither3 =\n  def('encaseEither3',\n      {},\n      [Fn($.Error, l), Fn(a, Fn(b, Fn(c, r))), a, b, c, $Either(l, r)],\n      encaseEither3);\n\n  //# eitherToMaybe :: Either a b -> Maybe b\n  //.\n  //. Converts an Either to a Maybe. A Left becomes Nothing; a Right becomes\n  //. a Just.\n  //.\n  //. See also [`maybeToEither`](#maybeToEither).\n  //.\n  //. ```javascript\n  //. > S.eitherToMaybe(S.Left('Cannot divide by zero'))\n  //. Nothing\n  //.\n  //. > S.eitherToMaybe(S.Right(42))\n  //. Just(42)\n  //. ```\n  function eitherToMaybe(either) {\n    return either.isLeft ? Nothing : Just(either.value);\n  }\n  S.eitherToMaybe =\n  def('eitherToMaybe', {}, [$Either(a, b), $Maybe(b)], eitherToMaybe);\n\n  //. ### Logic\n\n  //# and :: Boolean -> Boolean -> Boolean\n  //.\n  //. Boolean \"and\".\n  //.\n  //. ```javascript\n  //. > S.and(false, false)\n  //. false\n  //.\n  //. > S.and(false, true)\n  //. false\n  //.\n  //. > S.and(true, false)\n  //. false\n  //.\n  //. > S.and(true, true)\n  //. true\n  //. ```\n  function and(x, y) {\n    return x.valueOf() && y.valueOf();\n  }\n  S.and = def('and', {}, [$.Boolean, $.Boolean, $.Boolean], and);\n\n  //# or :: Boolean -> Boolean -> Boolean\n  //.\n  //. Boolean \"or\".\n  //.\n  //. ```javascript\n  //. > S.or(false, false)\n  //. false\n  //.\n  //. > S.or(false, true)\n  //. true\n  //.\n  //. > S.or(true, false)\n  //. true\n  //.\n  //. > S.or(true, true)\n  //. true\n  //. ```\n  function or(x, y) {\n    return x.valueOf() || y.valueOf();\n  }\n  S.or = def('or', {}, [$.Boolean, $.Boolean, $.Boolean], or);\n\n  //# not :: Boolean -> Boolean\n  //.\n  //. Boolean \"not\".\n  //.\n  //. See also [`complement`](#complement).\n  //.\n  //. ```javascript\n  //. > S.not(false)\n  //. true\n  //.\n  //. > S.not(true)\n  //. false\n  //. ```\n  function not(x) {\n    return !x.valueOf();\n  }\n  S.not = def('not', {}, [$.Boolean, $.Boolean], not);\n\n  //# complement :: (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a unary predicate and a value of any type, and returns the logical\n  //. negation of applying the predicate to the value.\n  //.\n  //. See also [`not`](#not).\n  //.\n  //. ```javascript\n  //. > Number.isInteger(42)\n  //. true\n  //.\n  //. > S.complement(Number.isInteger, 42)\n  //. false\n  //. ```\n  function complement(pred, x) {\n    return !pred(x);\n  }\n  S.complement =\n  def('complement', {}, [$.Predicate(a), a, $.Boolean], complement);\n\n  //# ifElse :: (a -> Boolean) -> (a -> b) -> (a -> b) -> a -> b\n  //.\n  //. Takes a unary predicate, a unary \"if\" function, a unary \"else\"\n  //. function, and a value of any type, and returns the result of\n  //. applying the \"if\" function to the value if the value satisfies\n  //. the predicate; the result of applying the \"else\" function to the\n  //. value otherwise.\n  //.\n  //. See also [`when`](#when) and [`unless`](#unless).\n  //.\n  //. ```javascript\n  //. > S.ifElse(x => x < 0, Math.abs, Math.sqrt, -1)\n  //. 1\n  //.\n  //. > S.ifElse(x => x < 0, Math.abs, Math.sqrt, 16)\n  //. 4\n  //. ```\n  function ifElse(pred, f, g, x) {\n    return pred(x) ? f(x) : g(x);\n  }\n  S.ifElse =\n  def('ifElse', {}, [$.Predicate(a), Fn(a, b), Fn(a, b), a, b], ifElse);\n\n  //# when :: (a -> Boolean) -> (a -> a) -> a -> a\n  //.\n  //. Takes a unary predicate, a unary function, and a value of any type, and\n  //. returns the result of applying the function to the value if the value\n  //. satisfies the predicate; the value otherwise.\n  //.\n  //. See also [`unless`](#unless) and [`ifElse`](#ifElse).\n  //.\n  //. ```javascript\n  //. > S.when(x => x >= 0, Math.sqrt, 16)\n  //. 4\n  //.\n  //. > S.when(x => x >= 0, Math.sqrt, -1)\n  //. -1\n  //. ```\n  function when(pred, f, x) {\n    return ifElse(pred, f, I, x);\n  }\n  S.when = def('when', {}, [$.Predicate(a), Fn(a, a), a, a], when);\n\n  //# unless :: (a -> Boolean) -> (a -> a) -> a -> a\n  //.\n  //. Takes a unary predicate, a unary function, and a value of any type, and\n  //. returns the result of applying the function to the value if the value\n  //. does not satisfy the predicate; the value otherwise.\n  //.\n  //. See also [`when`](#when) and [`ifElse`](#ifElse).\n  //.\n  //. ```javascript\n  //. > S.unless(x => x < 0, Math.sqrt, 16)\n  //. 4\n  //.\n  //. > S.unless(x => x < 0, Math.sqrt, -1)\n  //. -1\n  //. ```\n  function unless(pred, f, x) {\n    return ifElse(pred, I, f, x);\n  }\n  S.unless = def('unless', {}, [$.Predicate(a), Fn(a, a), a, a], unless);\n\n  //# allPass :: Foldable f => f (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a structure containing zero or more predicates, and a value\n  //. of any type. Returns `true` [iff][] the value satisfies all of the\n  //. predicates. None of the subsequent predicates will be applied after\n  //. the first predicate not satisfied.\n  //.\n  //. ```javascript\n  //. > S.allPass([S.test(/q/), S.test(/u/), S.test(/i/)], 'quiessence')\n  //. true\n  //.\n  //. > S.allPass([S.test(/q/), S.test(/u/), S.test(/i/)], 'fissiparous')\n  //. false\n  //. ```\n  function allPass(preds, x) {\n    return Z.reduce(function(b, p) { return b && p(x); }, true, preds);\n  }\n  S.allPass =\n  def('allPass',\n      {f: [Z.Foldable]},\n      [f($.Predicate(a)), a, $.Boolean],\n      allPass);\n\n  //# anyPass :: Foldable f => f (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a structure containing zero or more predicates, and a value\n  //. of any type. Returns `true` [iff][] the value satisfies any of the\n  //. predicates. None of the subsequent predicates will be applied after\n  //. the first predicate satisfied.\n  //.\n  //. ```javascript\n  //. > S.anyPass([S.test(/q/), S.test(/u/), S.test(/i/)], 'incandescent')\n  //. true\n  //.\n  //. > S.anyPass([S.test(/q/), S.test(/u/), S.test(/i/)], 'empathy')\n  //. false\n  //. ```\n  function anyPass(preds, x) {\n    return Z.reduce(function(b, p) { return b || p(x); }, false, preds);\n  }\n  S.anyPass =\n  def('anyPass',\n      {f: [Z.Foldable]},\n      [f($.Predicate(a)), a, $.Boolean],\n      anyPass);\n\n  //. ### List\n  //.\n  //. The List type constructor enables type signatures to describe ad hoc\n  //. polymorphic functions which operate on either [`Array`][$.Array] or\n  //. [`String`][$.String] values.\n  //.\n  //. Mental gymnastics are required to treat arrays and strings similarly.\n  //. `[1, 2, 3]` is a list containing `1`, `2`, and `3`. `'abc'` is a list\n  //. containing `'a'`, `'b'`, and `'c'`. But what is the type of `'a'`?\n  //. `String`, since JavaScript has no Char type! Thus:\n  //.\n  //.     'abc' :: String, List String, List (List String), ...\n  //.\n  //. Every member of `String` is also a member of `List String`!\n\n  //# slice :: Integer -> Integer -> List a -> Maybe (List a)\n  //.\n  //. Returns Just a list containing the elements from the supplied list\n  //. from a beginning index (inclusive) to an end index (exclusive).\n  //. Returns Nothing unless the start interval is less than or equal to\n  //. the end interval, and the list contains both (half-open) intervals.\n  //. Accepts negative indices, which indicate an offset from the end of\n  //. the list.\n  //.\n  //. See also [`take`](#take), [`drop`](#drop), [`takeLast`](#takeLast),\n  //. and [`dropLast`](#dropLast).\n  //.\n  //. ```javascript\n  //. > S.slice(1, 3, ['a', 'b', 'c', 'd', 'e'])\n  //. Just(['b', 'c'])\n  //.\n  //. > S.slice(-3, -1, ['a', 'b', 'c', 'd', 'e'])\n  //. Just(['c', 'd'])\n  //.\n  //. > S.slice(1, 6, ['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //.\n  //. > S.slice(2, 6, 'banana')\n  //. Just('nana')\n  //. ```\n  function slice(start, end, xs) {\n    var len = xs.length;\n    var fromIdx = start < 0 ? start + len : start;\n    var toIdx = end < 0 ? end + len : end;\n\n    return Math.abs(start) <= len && Math.abs(end) <= len && fromIdx <= toIdx ?\n      Just(xs.slice(fromIdx, toIdx)) :\n      Nothing;\n  }\n  S.slice =\n  def('slice', {}, [$.Integer, $.Integer, List(a), $Maybe(List(a))], slice);\n\n  //# at :: Integer -> List a -> Maybe a\n  //.\n  //. Takes an index and a list and returns Just the element of the list at\n  //. the index if the index is within the list's bounds; Nothing otherwise.\n  //. A negative index represents an offset from the length of the list.\n  //.\n  //. ```javascript\n  //. > S.at(2, ['a', 'b', 'c', 'd', 'e'])\n  //. Just('c')\n  //.\n  //. > S.at(5, ['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //.\n  //. > S.at(-2, ['a', 'b', 'c', 'd', 'e'])\n  //. Just('d')\n  //. ```\n  function at(n, xs) {\n    var idx = n < 0 ? xs.length + n : n;\n    return idx < 0 || idx >= xs.length ? Nothing : Just(xs[idx]);\n  }\n  S.at = def('at', {}, [$.Integer, List(a), $Maybe(a)], at);\n\n  //# head :: List a -> Maybe a\n  //.\n  //. Takes a list and returns Just the first element of the list if the\n  //. list contains at least one element; Nothing if the list is empty.\n  //.\n  //. ```javascript\n  //. > S.head([1, 2, 3])\n  //. Just(1)\n  //.\n  //. > S.head([])\n  //. Nothing\n  //. ```\n  function head(xs) {\n    return at(0, xs);\n  }\n  S.head = def('head', {}, [List(a), $Maybe(a)], head);\n\n  //# last :: List a -> Maybe a\n  //.\n  //. Takes a list and returns Just the last element of the list if the\n  //. list contains at least one element; Nothing if the list is empty.\n  //.\n  //. ```javascript\n  //. > S.last([1, 2, 3])\n  //. Just(3)\n  //.\n  //. > S.last([])\n  //. Nothing\n  //. ```\n  function last(xs) {\n    return at(-1, xs);\n  }\n  S.last = def('last', {}, [List(a), $Maybe(a)], last);\n\n  //# tail :: List a -> Maybe (List a)\n  //.\n  //. Takes a list and returns Just a list containing all but the first\n  //. of the list's elements if the list contains at least one element;\n  //. Nothing if the list is empty.\n  //.\n  //. ```javascript\n  //. > S.tail([1, 2, 3])\n  //. Just([2, 3])\n  //.\n  //. > S.tail([])\n  //. Nothing\n  //. ```\n  function tail(xs) {\n    return xs.length > 0 ? Just(xs.slice(1)) : Nothing;\n  }\n  S.tail = def('tail', {}, [List(a), $Maybe(List(a))], tail);\n\n  //# init :: List a -> Maybe (List a)\n  //.\n  //. Takes a list and returns Just a list containing all but the last\n  //. of the list's elements if the list contains at least one element;\n  //. Nothing if the list is empty.\n  //.\n  //. ```javascript\n  //. > S.init([1, 2, 3])\n  //. Just([1, 2])\n  //.\n  //. > S.init([])\n  //. Nothing\n  //. ```\n  function init(xs) {\n    return xs.length > 0 ? Just(xs.slice(0, -1)) : Nothing;\n  }\n  S.init = def('init', {}, [List(a), $Maybe(List(a))], init);\n\n  //# take :: Integer -> List a -> Maybe (List a)\n  //.\n  //. Returns Just the first N elements of the given collection if N is\n  //. greater than or equal to zero and less than or equal to the length\n  //. of the collection; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.take(2, ['a', 'b', 'c', 'd', 'e'])\n  //. Just(['a', 'b'])\n  //.\n  //. > S.take(4, 'abcdefg')\n  //. Just('abcd')\n  //.\n  //. > S.take(4, ['a', 'b', 'c'])\n  //. Nothing\n  //. ```\n  function take(n, xs) {\n    return n < 0 || n > xs.length ? Nothing : Just(xs.slice(0, n));\n  }\n  S.take = def('take', {}, [$.Integer, List(a), $Maybe(List(a))], take);\n\n  //# takeLast :: Integer -> List a -> Maybe (List a)\n  //.\n  //. Returns Just the last N elements of the given collection if N is\n  //. greater than or equal to zero and less than or equal to the length\n  //. of the collection; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.takeLast(2, ['a', 'b', 'c', 'd', 'e'])\n  //. Just(['d', 'e'])\n  //.\n  //. > S.takeLast(4, 'abcdefg')\n  //. Just('defg')\n  //.\n  //. > S.takeLast(4, ['a', 'b', 'c'])\n  //. Nothing\n  //. ```\n  function takeLast(n, xs) {\n    return n < 0 || n > xs.length ? Nothing : Just(xs.slice(xs.length - n));\n  }\n  S.takeLast =\n  def('takeLast', {}, [$.Integer, List(a), $Maybe(List(a))], takeLast);\n\n  //# drop :: Integer -> List a -> Maybe (List a)\n  //.\n  //. Returns Just all but the first N elements of the given collection\n  //. if N is greater than or equal to zero and less than or equal to the\n  //. length of the collection; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.drop(2, ['a', 'b', 'c', 'd', 'e'])\n  //. Just(['c', 'd', 'e'])\n  //.\n  //. > S.drop(4, 'abcdefg')\n  //. Just('efg')\n  //.\n  //. > S.drop(4, 'abc')\n  //. Nothing\n  //. ```\n  function drop(n, xs) {\n    return n < 0 || n > xs.length ? Nothing : Just(xs.slice(n));\n  }\n  S.drop = def('drop', {}, [$.Integer, List(a), $Maybe(List(a))], drop);\n\n  //# dropLast :: Integer -> List a -> Maybe (List a)\n  //.\n  //. Returns Just all but the last N elements of the given collection\n  //. if N is greater than or equal to zero and less than or equal to the\n  //. length of the collection; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.dropLast(2, ['a', 'b', 'c', 'd', 'e'])\n  //. Just(['a', 'b', 'c'])\n  //.\n  //. > S.dropLast(4, 'abcdefg')\n  //. Just('abc')\n  //.\n  //. > S.dropLast(4, 'abc')\n  //. Nothing\n  //. ```\n  function dropLast(n, xs) {\n    return n < 0 || n > xs.length ? Nothing : Just(xs.slice(0, xs.length - n));\n  }\n  S.dropLast =\n  def('dropLast', {}, [$.Integer, List(a), $Maybe(List(a))], dropLast);\n\n  //. ### Array\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. ```javascript\n  //. > S.size([])\n  //. 0\n  //.\n  //. > S.size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > S.size(Nil)\n  //. 0\n  //.\n  //. > S.size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //.\n  //. > S.size(S.Nothing)\n  //. 0\n  //.\n  //. > S.size(S.Just('quux'))\n  //. 1\n  //. ```\n  S.size = def('size', {f: [Z.Foldable]}, [f(a), $.Integer], Z.size);\n\n  //# append :: (Applicative f, Semigroup (f a)) => a -> f a -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > S.append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > S.append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //.\n  //. > S.append([1], S.Nothing)\n  //. Just([1])\n  //.\n  //. > S.append([3], S.Just([1, 2]))\n  //. Just([1, 2, 3])\n  //. ```\n  S.append =\n  def('append',\n      {f: [Z.Applicative, Z.Semigroup]},\n      [a, f(a), f(a)],\n      Z.append);\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => a -> f a -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > S.prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > S.prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //.\n  //. > S.prepend([1], S.Nothing)\n  //. Just([1])\n  //.\n  //. > S.prepend([1], S.Just([2, 3]))\n  //. Just([1, 2, 3])\n  //. ```\n  S.prepend =\n  def('prepend',\n      {f: [Z.Applicative, Z.Semigroup]},\n      [a, f(a), f(a)],\n      Z.prepend);\n\n  //# joinWith :: String -> Array String -> String\n  //.\n  //. Joins the strings of the second argument separated by the first argument.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String, t :: String. S.joinWith(s, S.splitOn(s, t)) = t`\n  //.\n  //. See also [`splitOn`](#splitOn).\n  //.\n  //. ```javascript\n  //. > S.joinWith(':', ['foo', 'bar', 'baz'])\n  //. 'foo:bar:baz'\n  //. ```\n  function joinWith(separator, ss) {\n    return ss.join(separator);\n  }\n  S.joinWith =\n  def('joinWith', {}, [$.String, $.Array($.String), $.String], joinWith);\n\n  //# elem :: (Setoid a, Foldable f) => a -> f a -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` [iff][] the value is an\n  //. element of the structure.\n  //.\n  //. See also [`find`](#find).\n  //.\n  //. ```javascript\n  //. > S.elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > S.elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > S.elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > S.elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > S.elem(0, S.Just(0))\n  //. true\n  //.\n  //. > S.elem(0, S.Just(1))\n  //. false\n  //.\n  //. > S.elem(0, S.Nothing)\n  //. false\n  //. ```\n  S.elem =\n  def('elem', {a: [Z.Setoid], f: [Z.Foldable]}, [a, f(a), $.Boolean], Z.elem);\n\n  //# find :: Foldable f => (a -> Boolean) -> f a -> Maybe a\n  //.\n  //. Takes a predicate and a structure and returns Just the leftmost element\n  //. of the structure which satisfies the predicate; Nothing if there is no\n  //. such element.\n  //.\n  //. See also [`elem`](#elem).\n  //.\n  //. ```javascript\n  //. > S.find(n => n < 0, [1, -2, 3, -4, 5])\n  //. Just(-2)\n  //.\n  //. > S.find(n => n < 0, [1, 2, 3, 4, 5])\n  //. Nothing\n  //. ```\n  function find(pred, xs) {\n    return Z.reduce(\n      function(m, x) { return m.isJust ? m : pred(x) ? Just(x) : Nothing; },\n      Nothing,\n      xs\n    );\n  }\n  S.find =\n  def('find', {f: [Z.Foldable]}, [$.Predicate(a), f(a), $Maybe(a)], find);\n\n  //# pluck :: Functor f => String -> f a -> f b\n  //.\n  //. Combines [`map`](#map) and [`prop`](#prop). `pluck(k, xs)` is equivalent\n  //. to `map(prop(k), xs)`.\n  //.\n  //. ```javascript\n  //. > S.pluck('x', [{x: 1}, {x: 2}, {x: 3}])\n  //. [1, 2, 3]\n  //.\n  //. > S.pluck('x', S.Just({x: 1, y: 2, z: 3}))\n  //. Just(1)\n  //. ```\n  function pluck(key, xs) {\n    return Z.map(function(x) {\n      var obj = toObject(x);\n      if (key in obj) return obj[key];\n      throw new TypeError('‘pluck’ expected object to have a property named ' +\n                          '‘' + key + '’; ' + Z.toString(x) + ' does not');\n    }, xs);\n  }\n  S.pluck = def('pluck', {f: [Z.Functor]}, [$.String, f(a), f(b)], pluck);\n\n  //# unfoldr :: (b -> Maybe (Pair a b)) -> b -> Array a\n  //.\n  //. Takes a function and a seed value, and returns an array generated by\n  //. applying the function repeatedly. The array is initially empty. The\n  //. function is initially applied to the seed value. Each application\n  //. of the function should result in either:\n  //.\n  //.   - Nothing, in which case the array is returned; or\n  //.\n  //.   - Just a pair, in which case the first element is appended to\n  //.     the array and the function is applied to the second element.\n  //.\n  //. ```javascript\n  //. > S.unfoldr(n => n < 5 ? S.Just([n, n + 1]) : S.Nothing, 1)\n  //. [1, 2, 3, 4]\n  //. ```\n  function unfoldr(f, x) {\n    var result = [];\n    for (var m = f(x); m.isJust; m = f(m.value[1])) result.push(m.value[0]);\n    return result;\n  }\n  S.unfoldr =\n  def('unfoldr', {}, [Fn(b, $Maybe($.Pair(a, b))), b, $.Array(a)], unfoldr);\n\n  //# range :: Integer -> Integer -> Array Integer\n  //.\n  //. Returns an array of consecutive integers starting with the first argument\n  //. and ending with the second argument minus one. Returns `[]` if the second\n  //. argument is less than or equal to the first argument.\n  //.\n  //. ```javascript\n  //. > S.range(0, 10)\n  //. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  //.\n  //. > S.range(-5, 0)\n  //. [-5, -4, -3, -2, -1]\n  //.\n  //. > S.range(0, -5)\n  //. []\n  //. ```\n  function range(from, to) {\n    var result = [];\n    for (var n = from; n < to; n += 1) result.push(n);\n    return result;\n  }\n  S.range =\n  def('range', {}, [$.Integer, $.Integer, $.Array($.Integer)], range);\n\n  //# groupBy :: (a -> a -> Boolean) -> Array a -> Array (Array a)\n  //.\n  //. Splits its array argument into an array of arrays of equal,\n  //. adjacent elements. Equality is determined by the function\n  //. provided as the first argument. Its behaviour can be surprising\n  //. for functions that aren't reflexive, transitive, and symmetric\n  //. (see [equivalence][] relation).\n  //.\n  //. Properties:\n  //.\n  //.   - `forall f :: a -> a -> Boolean, xs :: Array a.\n  //.      S.join(S.groupBy(f, xs)) = xs`\n  //.\n  //. ```javascript\n  //. > S.groupBy(S.equals, [1, 1, 2, 1, 1])\n  //. [[1, 1], [2], [1, 1]]\n  //.\n  //. > S.groupBy(x => y => x + y === 0, [2, -3, 3, 3, 3, 4, -4, 4])\n  //. [[2], [-3, 3, 3, 3], [4, -4], [4]]\n  //. ```\n  function groupBy(f, xs) {\n    if (xs.length === 0) return [];\n    var x0 = xs[0];         // :: a\n    var active = [x0];      // :: Array a\n    var result = [active];  // :: Array (Array a)\n    for (var idx = 1; idx < xs.length; idx += 1) {\n      var x = xs[idx];\n      if (f(x0)(x)) active.push(x); else result.push(active = [x0 = x]);\n    }\n    return result;\n  }\n  S.groupBy =\n  def('groupBy',\n      {},\n      [Fn(a, $.Predicate(a)), $.Array(a), $.Array($.Array(a))],\n      groupBy);\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. ```javascript\n  //. > S.reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > S.reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //.\n  //. > S.pipe([S.splitOn(''), S.reverse, S.joinWith('')], 'abc')\n  //. 'cba'\n  //. ```\n  S.reverse =\n  def('reverse',\n      {f: [Z.Applicative, Z.Foldable, Z.Monoid]},\n      [f(a), f(a)],\n      Z.reverse);\n\n  //# sort :: (Ord a, Applicative m, Foldable m, Monoid (m a)) => m a -> m a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure, using\n  //. [`Z.lte`][] for comparisons.\n  //.\n  //. Properties:\n  //.\n  //.   - `S.sort(S.sort(m)) = S.sort(m)` (idempotence)\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > S.sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > S.sort([S.Left(4), S.Right(3), S.Left(2), S.Right(1)])\n  //. [Left(2), Left(4), Right(1), Right(3)]\n  //. ```\n  S.sort =\n  def('sort',\n      {a: [Z.Ord], m: [Z.Applicative, Z.Foldable, Z.Monoid]},\n      [m(a), m(a)],\n      Z.sort);\n\n  //# sortBy :: (Ord b, Applicative m, Foldable m, Monoid (m a)) => (a -> b) -> m a -> m a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure, using\n  //. [`Z.lte`][] to compare the values produced by applying the given function\n  //. to each element of the structure.\n  //.\n  //. Properties:\n  //.\n  //.   - `S.sortBy(f, S.sortBy(f, m)) = S.sortBy(f, m)` (idempotence)\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > S.sortBy(S.prop('rank'), [\n  //. .   {rank: 7, suit: 'spades'},\n  //. .   {rank: 5, suit: 'hearts'},\n  //. .   {rank: 2, suit: 'hearts'},\n  //. .   {rank: 5, suit: 'spades'},\n  //. . ])\n  //. [ {rank: 2, suit: 'hearts'},\n  //. . {rank: 5, suit: 'hearts'},\n  //. . {rank: 5, suit: 'spades'},\n  //. . {rank: 7, suit: 'spades'} ]\n  //.\n  //. > S.sortBy(S.prop('suit'), [\n  //. .   {rank: 7, suit: 'spades'},\n  //. .   {rank: 5, suit: 'hearts'},\n  //. .   {rank: 2, suit: 'hearts'},\n  //. .   {rank: 5, suit: 'spades'},\n  //. . ])\n  //. [ {rank: 5, suit: 'hearts'},\n  //. . {rank: 2, suit: 'hearts'},\n  //. . {rank: 7, suit: 'spades'},\n  //. . {rank: 5, suit: 'spades'} ]\n  //. ```\n  S.sortBy =\n  def('sortBy',\n      {b: [Z.Ord], m: [Z.Applicative, Z.Foldable, Z.Monoid]},\n      [Fn(a, b), m(a), m(a)],\n      Z.sortBy);\n\n  //. ### Object\n\n  //# prop :: String -> a -> b\n  //.\n  //. Takes a property name and an object with known properties and returns\n  //. the value of the specified property. If for some reason the object\n  //. lacks the specified property, a type error is thrown.\n  //.\n  //. For accessing properties of uncertain objects, use [`get`](#get) instead.\n  //.\n  //. See also [`pluck`](#pluck).\n  //.\n  //. ```javascript\n  //. > S.prop('a', {a: 1, b: 2})\n  //. 1\n  //. ```\n  function prop(key, x) {\n    var obj = toObject(x);\n    if (key in obj) return obj[key];\n    throw new TypeError('‘prop’ expected object to have a property named ‘' +\n                        key + '’; ' + Z.toString(x) + ' does not');\n  }\n  S.prop = def('prop', {}, [$.String, a, b], prop);\n\n  //# props :: Array String -> a -> b\n  //.\n  //. Takes a property path (an array of property names) and an object with\n  //. known structure and returns the value at the given path. If for some\n  //. reason the path does not exist, a type error is thrown.\n  //.\n  //. For accessing property paths of uncertain objects, use [`gets`](#gets)\n  //. instead.\n  //.\n  //. ```javascript\n  //. > S.props(['a', 'b', 'c'], {a: {b: {c: 1}}})\n  //. 1\n  //. ```\n  function props(path, x) {\n    return path.reduce(function(x, key) {\n      var obj = toObject(x);\n      if (key in obj) return obj[key];\n      throw new TypeError('‘props’ expected object to have a property at ' +\n                          Z.toString(path) + '; ' +\n                          Z.toString(x) + ' does not');\n    }, x);\n  }\n  S.props = def('props', {}, [$.Array($.String), a, b], props);\n\n  //# get :: (Any -> Boolean) -> String -> a -> Maybe b\n  //.\n  //. Takes a predicate, a property name, and an object and returns Just the\n  //. value of the specified object property if it exists and the value\n  //. satisfies the given predicate; Nothing otherwise.\n  //.\n  //. See also [`gets`](#gets) and [`prop`](#prop).\n  //.\n  //. ```javascript\n  //. > S.get(S.is(Number), 'x', {x: 1, y: 2})\n  //. Just(1)\n  //.\n  //. > S.get(S.is(Number), 'x', {x: '1', y: '2'})\n  //. Nothing\n  //.\n  //. > S.get(S.is(Number), 'x', {})\n  //. Nothing\n  //.\n  //. > S.get($.test([], $.Array($.Number)), 'x', {x: [1, 2, 3]})\n  //. Just([1, 2, 3])\n  //.\n  //. > S.get($.test([], $.Array($.Number)), 'x', {x: [1, 2, 3, null]})\n  //. Nothing\n  //. ```\n  function get(pred, key, x) {\n    var obj = toObject(x);\n    if (key in obj) {\n      var val = obj[key];\n      if (pred(val)) return Just(val);\n    }\n    return Nothing;\n  }\n  S.get = def('get', {}, [$.Predicate($.Any), $.String, a, $Maybe(b)], get);\n\n  //# gets :: (Any -> Boolean) -> Array String -> a -> Maybe b\n  //.\n  //. Takes a predicate, a property path (an array of property names), and\n  //. an object and returns Just the value at the given path if such a path\n  //. exists and the value satisfies the given predicate; Nothing otherwise.\n  //.\n  //. See also [`get`](#get).\n  //.\n  //. ```javascript\n  //. > S.gets(S.is(Number), ['a', 'b', 'c'], {a: {b: {c: 42}}})\n  //. Just(42)\n  //.\n  //. > S.gets(S.is(Number), ['a', 'b', 'c'], {a: {b: {c: '42'}}})\n  //. Nothing\n  //.\n  //. > S.gets(S.is(Number), ['a', 'b', 'c'], {})\n  //. Nothing\n  //. ```\n  function gets(pred, keys, x) {\n    return Z.filter(pred, Z.reduce(function(m, key) {\n      return Z.chain(function(x) {\n        var obj = toObject(x);\n        return key in obj ? Just(obj[key]) : Nothing;\n      }, m);\n    }, Just(x), keys));\n  }\n  S.gets =\n  def('gets', {}, [$.Predicate($.Any), $.Array($.String), a, $Maybe(b)], gets);\n\n  //. ### StrMap\n  //.\n  //. StrMap is an abbreviation of _string map_. A string map is an object,\n  //. such as `{foo: 1, bar: 2, baz: 3}`, whose values are all members of\n  //. the same type. Formally, a value is a member of type `StrMap a` if its\n  //. [type identifier][] is `'Object'` and the values of its enumerable own\n  //. properties are all members of type `a`.\n\n  //# singleton :: String -> a -> StrMap a\n  //.\n  //. Takes a string and a value of any type, and returns a string map with\n  //. a single entry (mapping the key to the value).\n  //.\n  //. ```javascript\n  //. > S.singleton('foo', 42)\n  //. {foo: 42}\n  //. ```\n  function singleton(key, val) {\n    var strMap = {};\n    strMap[key] = val;\n    return strMap;\n  }\n  S.singleton = def('singleton', {}, [$.String, a, $.StrMap(a)], singleton);\n\n  //# insert :: String -> a -> StrMap a -> StrMap a\n  //.\n  //. Takes a string, a value of any type, and a string map, and returns a\n  //. string map comprising all the entries of the given string map plus the\n  //. entry specified by the first two arguments (which takes precedence).\n  //.\n  //. Equivalent to Haskell's `insert` function. Similar to Clojure's `assoc`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.insert('c', 3, {a: 1, b: 2})\n  //. {a: 1, b: 2, c: 3}\n  //.\n  //. > S.insert('a', 4, {a: 1, b: 2})\n  //. {a: 4, b: 2}\n  //. ```\n  function insert(key, val, strMap) {\n    return Z.concat(strMap, singleton(key, val));\n  }\n  S.insert =\n  def('insert', {}, [$.String, a, $.StrMap(a), $.StrMap(a)], insert);\n\n  //# remove :: String -> StrMap a -> StrMap a\n  //.\n  //. Takes a string and a string map, and returns a string map comprising all\n  //. the entries of the given string map except the one whose key matches the\n  //. given string (if such a key exists).\n  //.\n  //. Equivalent to Haskell's `delete` function. Similar to Clojure's `dissoc`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.remove('c', {a: 1, b: 2, c: 3})\n  //. {a: 1, b: 2}\n  //.\n  //. > S.remove('c', {})\n  //. {}\n  //. ```\n  function remove(key, strMap) {\n    var result = Z.concat(strMap, {});\n    delete result[key];\n    return result;\n  }\n  S.remove = def('remove', {}, [$.String, $.StrMap(a), $.StrMap(a)], remove);\n\n  //# keys :: StrMap a -> Array String\n  //.\n  //. Returns the keys of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.keys({b: 2, c: 3, a: 1}).sort()\n  //. ['a', 'b', 'c']\n  //. ```\n  S.keys = def('keys', {}, [$.StrMap(a), $.Array($.String)], Object.keys);\n\n  //# values :: StrMap a -> Array a\n  //.\n  //. Returns the values of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.values({a: 1, c: 3, b: 2}).sort()\n  //. [1, 2, 3]\n  //. ```\n  function values(strMap) {\n    return Z.map(function(k) { return strMap[k]; }, Object.keys(strMap));\n  }\n  S.values = def('values', {}, [$.StrMap(a), $.Array(a)], values);\n\n  //# pairs :: StrMap a -> Array (Pair String a)\n  //.\n  //. Returns the key–value pairs of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.pairs({b: 2, a: 1, c: 3}).sort()\n  //. [['a', 1], ['b', 2], ['c', 3]]\n  //. ```\n  function pairs(strMap) {\n    return Z.map(function(k) { return [k, strMap[k]]; }, Object.keys(strMap));\n  }\n  S.pairs =\n  def('pairs', {}, [$.StrMap(a), $.Array($.Pair($.String, a))], pairs);\n\n  //# fromPairs :: Foldable f => f (Pair String a) -> StrMap a\n  //.\n  //. Returns a string map containing the key–value pairs specified by the\n  //. given [Foldable][]. If a key appears in multiple pairs, the rightmost\n  //. pair takes precedence.\n  //.\n  //. ```javascript\n  //. > S.fromPairs([['a', 1], ['b', 2], ['c', 3]])\n  //. {a: 1, b: 2, c: 3}\n  //.\n  //. > S.fromPairs([['x', 1], ['x', 2]])\n  //. {x: 2}\n  //. ```\n  function fromPairs(pairs) {\n    return Z.reduce(function(strMap, pair) {\n      strMap[pair[0]] = pair[1];\n      return strMap;\n    }, {}, pairs);\n  }\n  S.fromPairs =\n  def('fromPairs',\n      {f: [Z.Foldable]},\n      [f($.Pair($.String, a)), $.StrMap(a)],\n      fromPairs);\n\n  //. ### Number\n\n  //# negate :: ValidNumber -> ValidNumber\n  //.\n  //. Negates its argument.\n  //.\n  //. ```javascript\n  //. > S.negate(12.5)\n  //. -12.5\n  //.\n  //. > S.negate(-42)\n  //. 42\n  //. ```\n  function negate(n) {\n    return -n;\n  }\n  S.negate = def('negate', {}, [$.ValidNumber, $.ValidNumber], negate);\n\n  //# add :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the sum of two (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.add(1, 1)\n  //. 2\n  //. ```\n  function add(x, y) {\n    return x + y;\n  }\n  S.add =\n  def('add', {}, [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber], add);\n\n  //# sum :: Foldable f => f FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the sum of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.sum([1, 2, 3, 4, 5])\n  //. 15\n  //.\n  //. > S.sum([])\n  //. 0\n  //.\n  //. > S.sum(S.Just(42))\n  //. 42\n  //.\n  //. > S.sum(S.Nothing)\n  //. 0\n  //. ```\n  function sum(foldable) {\n    return Z.reduce(add, 0, foldable);\n  }\n  S.sum =\n  def('sum', {f: [Z.Foldable]}, [f($.FiniteNumber), $.FiniteNumber], sum);\n\n  //# sub :: FiniteNumber -> (FiniteNumber -> FiniteNumber)\n  //.\n  //. Takes a finite number `n` and returns the _subtract `n`_ function.\n  //.\n  //. See also [`sub_`](#sub_).\n  //.\n  //. ```javascript\n  //. > S.map(S.sub(1), [1, 2, 3])\n  //. [0, 1, 2]\n  //. ```\n  S.sub =\n  def('sub',\n      {},\n      [$.FiniteNumber, Fn($.FiniteNumber, $.FiniteNumber)],\n      flip$(sub_));\n\n  //# sub_ :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the difference between two (finite) numbers.\n  //.\n  //. See also [`sub`](#sub).\n  //.\n  //. ```javascript\n  //. > S.sub_(4, 2)\n  //. 2\n  //. ```\n  function sub_(x, y) {\n    return x - y;\n  }\n  S.sub_ =\n  def('sub_', {}, [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber], sub_);\n\n  //# mult :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the product of two (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.mult(4, 2)\n  //. 8\n  //. ```\n  function mult(x, y) {\n    return x * y;\n  }\n  S.mult =\n  def('mult', {}, [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber], mult);\n\n  //# product :: Foldable f => f FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the product of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.product([1, 2, 3, 4, 5])\n  //. 120\n  //.\n  //. > S.product([])\n  //. 1\n  //.\n  //. > S.product(S.Just(42))\n  //. 42\n  //.\n  //. > S.product(S.Nothing)\n  //. 1\n  //. ```\n  function product(foldable) {\n    return Z.reduce(mult, 1, foldable);\n  }\n  S.product =\n  def('product',\n      {f: [Z.Foldable]},\n      [f($.FiniteNumber), $.FiniteNumber],\n      product);\n\n  //# div :: NonZeroFiniteNumber -> (FiniteNumber -> FiniteNumber)\n  //.\n  //. Takes a non-zero finite number `n` and returns the _divide by `n`_\n  //. function.\n  //.\n  //. See also [`div_`](#div_).\n  //.\n  //. ```javascript\n  //. > S.map(S.div(2), [0, 1, 2, 3])\n  //. [0, 0.5, 1, 1.5]\n  //. ```\n  S.div =\n  def('div',\n      {},\n      [$.NonZeroFiniteNumber, Fn($.FiniteNumber, $.FiniteNumber)],\n      flip$(div_));\n\n  //# div_ :: FiniteNumber -> NonZeroFiniteNumber -> FiniteNumber\n  //.\n  //. Returns the result of dividing its first argument (a finite number) by\n  //. its second argument (a non-zero finite number).\n  //.\n  //. See also [`div`](#div).\n  //.\n  //. ```javascript\n  //. > S.div_(7, 2)\n  //. 3.5\n  //.\n  //. > S.map(S.div_(24), [1, 2, 3, 4])\n  //. [24, 12, 8, 6]\n  //. ```\n  function div_(x, y) {\n    return x / y;\n  }\n  S.div_ =\n  def('div_',\n      {},\n      [$.FiniteNumber, $.NonZeroFiniteNumber, $.FiniteNumber],\n      div_);\n\n  //# pow :: FiniteNumber -> (FiniteNumber -> FiniteNumber)\n  //.\n  //. Takes a finite number `n` and returns the _power of `n`_ function.\n  //.\n  //. See also [`pow_`](#pow_).\n  //.\n  //. ```javascript\n  //. > S.map(S.pow(2), [-3, -2, -1, 0, 1, 2, 3])\n  //. [9, 4, 1, 0, 1, 4, 9]\n  //.\n  //. > S.map(S.pow(0.5), [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5]\n  //. ```\n  S.pow =\n  def('pow',\n      {},\n      [$.FiniteNumber, Fn($.FiniteNumber, $.FiniteNumber)],\n      flip$(Math.pow));\n\n  //# pow_ :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Curried version of [`Math.pow`][].\n  //.\n  //. See also [`pow`](#pow).\n  //.\n  //. ```javascript\n  //. > S.map(S.pow_(10), [-3, -2, -1, 0, 1, 2, 3])\n  //. [0.001, 0.01, 0.1, 1, 10, 100, 1000]\n  //. ```\n  S.pow_ =\n  def('pow_', {}, [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber], Math.pow);\n\n  //# mean :: Foldable f => f FiniteNumber -> Maybe FiniteNumber\n  //.\n  //. Returns the mean of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.mean([1, 2, 3, 4, 5])\n  //. Just(3)\n  //.\n  //. > S.mean([])\n  //. Nothing\n  //.\n  //. > S.mean(S.Just(42))\n  //. Just(42)\n  //.\n  //. > S.mean(S.Nothing)\n  //. Nothing\n  //. ```\n  function mean(foldable) {\n    var result = Z.reduce(\n      function(acc, n) {\n        acc.total += n;\n        acc.count += 1;\n        return acc;\n      },\n      {total: 0, count: 0},\n      foldable\n    );\n    return result.count > 0 ? Just(result.total / result.count) : Nothing;\n  }\n  S.mean =\n  def('mean',\n      {f: [Z.Foldable]},\n      [f($.FiniteNumber), $Maybe($.FiniteNumber)],\n      mean);\n\n  //. ### Integer\n\n  //# even :: Integer -> Boolean\n  //.\n  //. Returns `true` if the given integer is even; `false` if it is odd.\n  //.\n  //. ```javascript\n  //. > S.even(42)\n  //. true\n  //.\n  //. > S.even(99)\n  //. false\n  //. ```\n  function even(n) {\n    return n % 2 === 0;\n  }\n  S.even = def('even', {}, [$.Integer, $.Boolean], even);\n\n  //# odd :: Integer -> Boolean\n  //.\n  //. Returns `true` if the given integer is odd; `false` if it is even.\n  //.\n  //. ```javascript\n  //. > S.odd(99)\n  //. true\n  //.\n  //. > S.odd(42)\n  //. false\n  //. ```\n  function odd(n) {\n    return n % 2 !== 0;\n  }\n  S.odd = def('odd', {}, [$.Integer, $.Boolean], odd);\n\n  //. ### Parse\n\n  //# parseDate :: String -> Maybe ValidDate\n  //.\n  //. Takes a string and returns Just the date represented by the string\n  //. if it does in fact represent a date; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseDate('2011-01-19T17:40:00Z')\n  //. Just(new Date('2011-01-19T17:40:00.000Z'))\n  //.\n  //. > S.parseDate('today')\n  //. Nothing\n  //. ```\n  function parseDate(s) {\n    var date = new Date(s);\n    return isNaN(date.valueOf()) ? Nothing : Just(date);\n  }\n  S.parseDate =\n  def('parseDate', {}, [$.String, $Maybe($.ValidDate)], parseDate);\n\n  //  requiredNonCapturingGroup :: Array String -> String\n  function requiredNonCapturingGroup(xs) {\n    return '(?:' + xs.join('|') + ')';\n  }\n\n  //  optionalNonCapturingGroup :: Array String -> String\n  function optionalNonCapturingGroup(xs) {\n    return requiredNonCapturingGroup(xs) + '?';\n  }\n\n  //  validFloatRepr :: RegExp\n  var validFloatRepr = new RegExp(\n    '^' +                     // start-of-string anchor\n    '\\\\s*' +                  // any number of leading whitespace characters\n    '[+-]?' +                 // optional sign\n    requiredNonCapturingGroup([\n      'Infinity',             // \"Infinity\"\n      'NaN',                  // \"NaN\"\n      requiredNonCapturingGroup([\n        '[0-9]+',             // number\n        '[0-9]+[.][0-9]+',    // number with interior decimal point\n        '[0-9]+[.]',          // number with trailing decimal point\n        '[.][0-9]+'           // number with leading decimal point\n      ]) +\n      optionalNonCapturingGroup([\n        '[Ee]' +              // \"E\" or \"e\"\n        '[+-]?' +             // optional sign\n        '[0-9]+'              // exponent\n      ])\n    ]) +\n    '\\\\s*' +                  // any number of trailing whitespace characters\n    '$'                       // end-of-string anchor\n  );\n\n  //# parseFloat :: String -> Maybe Number\n  //.\n  //. Takes a string and returns Just the number represented by the string\n  //. if it does in fact represent a number; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseFloat('-123.45')\n  //. Just(-123.45)\n  //.\n  //. > S.parseFloat('foo.bar')\n  //. Nothing\n  //. ```\n  function parseFloat_(s) {\n    return validFloatRepr.test(s) ? Just(parseFloat(s)) : Nothing;\n  }\n  S.parseFloat =\n  def('parseFloat', {}, [$.String, $Maybe($.Number)], parseFloat_);\n\n  //  Radix :: Type\n  var Radix = $.NullaryType(\n    'sanctuary/Radix',\n    '',\n    function(x) { return $.Integer._test(x) && x >= 2 && x <= 36; }\n  );\n\n  //# parseInt :: Radix -> String -> Maybe Integer\n  //.\n  //. Takes a radix (an integer between 2 and 36 inclusive) and a string,\n  //. and returns Just the number represented by the string if it does in\n  //. fact represent a number in the base specified by the radix; Nothing\n  //. otherwise.\n  //.\n  //. This function is stricter than [`parseInt`][parseInt]: a string\n  //. is considered to represent an integer only if all its non-prefix\n  //. characters are members of the character set specified by the radix.\n  //.\n  //. ```javascript\n  //. > S.parseInt(10, '-42')\n  //. Just(-42)\n  //.\n  //. > S.parseInt(16, '0xFF')\n  //. Just(255)\n  //.\n  //. > S.parseInt(16, '0xGG')\n  //. Nothing\n  //. ```\n  function parseInt_(radix, s) {\n    var charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.slice(0, radix);\n    var pattern = new RegExp('^[' + charset + ']+$', 'i');\n\n    var t = s.replace(/^[+-]/, '');\n    if (pattern.test(radix === 16 ? t.replace(/^0x/i, '') : t)) {\n      var n = parseInt(s, radix);\n      if ($.Integer._test(n)) return Just(n);\n    }\n    return Nothing;\n  }\n  S.parseInt =\n  def('parseInt', {}, [Radix, $.String, $Maybe($.Integer)], parseInt_);\n\n  //# parseJson :: (Any -> Boolean) -> String -> Maybe a\n  //.\n  //. Takes a predicate and a string which may or may not be valid JSON, and\n  //. returns Just the result of applying `JSON.parse` to the string *if* the\n  //. result satisfies the predicate; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseJson($.test([], $.Array($.Integer)), '[')\n  //. Nothing\n  //.\n  //. > S.parseJson($.test([], $.Array($.Integer)), '[\"1\",\"2\",\"3\"]')\n  //. Nothing\n  //.\n  //. > S.parseJson($.test([], $.Array($.Integer)), '[0,1.5,3,4.5]')\n  //. Nothing\n  //.\n  //. > S.parseJson($.test([], $.Array($.Integer)), '[1,2,3]')\n  //. Just([1, 2, 3])\n  //. ```\n  function parseJson(pred, s) {\n    return Z.filter(pred, encase(JSON.parse, s));\n  }\n  S.parseJson =\n  def('parseJson', {}, [$.Predicate($.Any), $.String, $Maybe(a)], parseJson);\n\n  //. ### RegExp\n\n  //  Match :: Type\n  var Match = $.RecordType({\n    match: $.String,\n    groups: $.Array($Maybe($.String))\n  });\n\n  //  toMatch :: Array String? -> Match\n  function toMatch(ss) {\n    return {match: ss[0], groups: ss.slice(1).map(toMaybe)};\n  }\n\n  //  withRegex :: (RegExp, () -> a) -> a\n  function withRegex(pattern, thunk) {\n    var lastIndex = pattern.lastIndex;\n    var result = thunk();\n    pattern.lastIndex = lastIndex;\n    return result;\n  }\n\n  //# regex :: RegexFlags -> String -> RegExp\n  //.\n  //. Takes a [RegexFlags][] and a pattern, and returns a RegExp.\n  //.\n  //. ```javascript\n  //. > S.regex('g', ':\\\\d+:')\n  //. /:\\d+:/g\n  //. ```\n  function regex(flags, source) {\n    return new RegExp(source, flags);\n  }\n  S.regex = def('regex', {}, [$.RegexFlags, $.String, $.RegExp], regex);\n\n  //# regexEscape :: String -> String\n  //.\n  //. Takes a string which may contain regular expression metacharacters,\n  //. and returns a string with those metacharacters escaped.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String. S.test(S.regex('', S.regexEscape(s)), s) = true`\n  //.\n  //. ```javascript\n  //. > S.regexEscape('-=*{XYZ}*=-')\n  //. '\\\\-=\\\\*\\\\{XYZ\\\\}\\\\*=\\\\-'\n  //. ```\n  function regexEscape(s) {\n    return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  }\n  S.regexEscape = def('regexEscape', {}, [$.String, $.String], regexEscape);\n\n  //# test :: RegExp -> String -> Boolean\n  //.\n  //. Takes a pattern and a string, and returns `true` [iff][] the pattern\n  //. matches the string.\n  //.\n  //. ```javascript\n  //. > S.test(/^a/, 'abacus')\n  //. true\n  //.\n  //. > S.test(/^a/, 'banana')\n  //. false\n  //. ```\n  function test(pattern, s) {\n    return withRegex(pattern, function() { return pattern.test(s); });\n  }\n  S.test = def('test', {}, [$.RegExp, $.String, $.Boolean], test);\n\n  //# match :: NonGlobalRegExp -> String -> Maybe { match :: String, groups :: Array (Maybe String) }\n  //.\n  //. Takes a pattern and a string, and returns Just a match record if the\n  //. pattern matches the string; Nothing otherwise.\n  //.\n  //. `groups :: Array (Maybe String)` acknowledges the existence of optional\n  //. capturing groups.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall p :: Pattern, s :: String.\n  //.      S.head(S.matchAll(S.regex('g', p), s)) = S.match(S.regex('', p), s)`\n  //.\n  //. See also [`matchAll`](#matchAll).\n  //.\n  //. ```javascript\n  //. > S.match(/(good)?bye/, 'goodbye')\n  //. Just({match: 'goodbye', groups: [Just('good')]})\n  //.\n  //. > S.match(/(good)?bye/, 'bye')\n  //. Just({match: 'bye', groups: [Nothing]})\n  //. ```\n  function match(pattern, s) {\n    return Z.map(toMatch, toMaybe(s.match(pattern)));\n  }\n  S.match =\n  def('match', {}, [$.NonGlobalRegExp, $.String, $Maybe(Match)], match);\n\n  //# matchAll :: GlobalRegExp -> String -> Array { match :: String, groups :: Array (Maybe String) }\n  //.\n  //. Takes a pattern and a string, and returns an array of match records.\n  //.\n  //. `groups :: Array (Maybe String)` acknowledges the existence of optional\n  //. capturing groups.\n  //.\n  //. See also [`match`](#match).\n  //.\n  //. ```javascript\n  //. > S.matchAll(/@([a-z]+)/g, 'Hello, world!')\n  //. []\n  //.\n  //. > S.matchAll(/@([a-z]+)/g, 'Hello, @foo! Hello, @bar! Hello, @baz!')\n  //. [ {match: '@foo', groups: [Just('foo')]},\n  //. . {match: '@bar', groups: [Just('bar')]},\n  //. . {match: '@baz', groups: [Just('baz')]} ]\n  //. ```\n  function matchAll(pattern, s) {\n    return withRegex(pattern, function() {\n      return unfoldr(function(_) {\n        return Z.map(function(ss) {\n          return [toMatch(ss), null];\n        }, toMaybe(pattern.exec(s)));\n      }, []);\n    });\n  }\n  S.matchAll =\n  def('matchAll', {}, [$.GlobalRegExp, $.String, $.Array(Match)], matchAll);\n\n  //. ### String\n\n  //# toUpper :: String -> String\n  //.\n  //. Returns the upper-case equivalent of its argument.\n  //.\n  //. See also [`toLower`](#toLower).\n  //.\n  //. ```javascript\n  //. > S.toUpper('ABC def 123')\n  //. 'ABC DEF 123'\n  //. ```\n  function toUpper(s) {\n    return s.toUpperCase();\n  }\n  S.toUpper = def('toUpper', {}, [$.String, $.String], toUpper);\n\n  //# toLower :: String -> String\n  //.\n  //. Returns the lower-case equivalent of its argument.\n  //.\n  //. See also [`toUpper`](#toUpper).\n  //.\n  //. ```javascript\n  //. > S.toLower('ABC def 123')\n  //. 'abc def 123'\n  //. ```\n  function toLower(s) {\n    return s.toLowerCase();\n  }\n  S.toLower = def('toLower', {}, [$.String, $.String], toLower);\n\n  //# trim :: String -> String\n  //.\n  //. Strips leading and trailing whitespace characters.\n  //.\n  //. ```javascript\n  //. > S.trim('\\t\\t foo bar \\n')\n  //. 'foo bar'\n  //. ```\n  function trim(s) {\n    return s.trim();\n  }\n  S.trim = def('trim', {}, [$.String, $.String], trim);\n\n  //# stripPrefix :: String -> String -> Maybe String\n  //.\n  //. Returns Just the portion of the given string (the second argument) left\n  //. after removing the given prefix (the first argument) if the string starts\n  //. with the prefix; Nothing otherwise.\n  //.\n  //. See also [`stripSuffix`](#stripSuffix).\n  //.\n  //. ```javascript\n  //. > S.stripPrefix('https://', 'https://sanctuary.js.org')\n  //. Just('sanctuary.js.org')\n  //.\n  //. > S.stripPrefix('https://', 'http://sanctuary.js.org')\n  //. Nothing\n  //. ```\n  function stripPrefix(prefix, s) {\n    var idx = prefix.length;\n    return s.slice(0, idx) === prefix ? Just(s.slice(idx)) : Nothing;\n  }\n  S.stripPrefix =\n  def('stripPrefix', {}, [$.String, $.String, $Maybe($.String)], stripPrefix);\n\n  //# stripSuffix :: String -> String -> Maybe String\n  //.\n  //. Returns Just the portion of the given string (the second argument) left\n  //. after removing the given suffix (the first argument) if the string ends\n  //. with the suffix; Nothing otherwise.\n  //.\n  //. See also [`stripPrefix`](#stripPrefix).\n  //.\n  //. ```javascript\n  //. > S.stripSuffix('.md', 'README.md')\n  //. Just('README')\n  //.\n  //. > S.stripSuffix('.md', 'README')\n  //. Nothing\n  //. ```\n  function stripSuffix(suffix, s) {\n    var idx = s.length - suffix.length;  // value may be negative\n    return s.slice(idx) === suffix ? Just(s.slice(0, idx)) : Nothing;\n  }\n  S.stripSuffix =\n  def('stripSuffix', {}, [$.String, $.String, $Maybe($.String)], stripSuffix);\n\n  //# words :: String -> Array String\n  //.\n  //. Takes a string and returns the array of words the string contains\n  //. (words are delimited by whitespace characters).\n  //.\n  //. See also [`unwords`](#unwords).\n  //.\n  //. ```javascript\n  //. > S.words(' foo bar baz ')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function words(s) {\n    var words = s.split(/\\s+/);\n    return words.slice(words[0] === '' ? 1 : 0,\n                       words[words.length - 1] === '' ? -1 : Infinity);\n  }\n  S.words = def('words', {}, [$.String, $.Array($.String)], words);\n\n  //# unwords :: Array String -> String\n  //.\n  //. Takes an array of words and returns the result of joining the words\n  //. with separating spaces.\n  //.\n  //. See also [`words`](#words).\n  //.\n  //. ```javascript\n  //. > S.unwords(['foo', 'bar', 'baz'])\n  //. 'foo bar baz'\n  //. ```\n  function unwords(xs) {\n    return xs.join(' ');\n  }\n  S.unwords = def('unwords', {}, [$.Array($.String), $.String], unwords);\n\n  //# lines :: String -> Array String\n  //.\n  //. Takes a string and returns the array of lines the string contains\n  //. (lines are delimited by newlines: `'\\n'` or `'\\r\\n'` or `'\\r'`).\n  //. The resulting strings do not contain newlines.\n  //.\n  //. See also [`unlines`](#unlines).\n  //.\n  //. ```javascript\n  //. > S.lines('foo\\nbar\\nbaz\\n')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function lines(s) {\n    var match = s.replace(/\\r\\n?/g, '\\n').match(/^(?=[\\s\\S]).*/gm);\n    return match == null ? [] : match;\n  }\n  S.lines = def('lines', {}, [$.String, $.Array($.String)], lines);\n\n  //# unlines :: Array String -> String\n  //.\n  //. Takes an array of lines and returns the result of joining the lines\n  //. after appending a terminating line feed (`'\\n'`) to each.\n  //.\n  //. See also [`lines`](#lines).\n  //.\n  //. ```javascript\n  //. > S.unlines(['foo', 'bar', 'baz'])\n  //. 'foo\\nbar\\nbaz\\n'\n  //. ```\n  function unlines(xs) {\n    return Z.reduce(function(s, x) { return s + x + '\\n'; }, '', xs);\n  }\n  S.unlines = def('unlines', {}, [$.Array($.String), $.String], unlines);\n\n  //# splitOn :: String -> String -> Array String\n  //.\n  //. Returns the substrings of its second argument separated by occurrences\n  //. of its first argument.\n  //.\n  //. See also [`joinWith`](#joinWith) and [`splitOnRegex`](#splitOnRegex).\n  //.\n  //. ```javascript\n  //. > S.splitOn('::', 'foo::bar::baz')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function splitOn(separator, s) {\n    return s.split(separator);\n  }\n  S.splitOn =\n  def('splitOn', {}, [$.String, $.String, $.Array($.String)], splitOn);\n\n  //# splitOnRegex :: GlobalRegExp -> String -> Array String\n  //.\n  //. Takes a pattern and a string, and returns the result of splitting the\n  //. string at every non-overlapping occurrence of the pattern.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String, t :: String.\n  //.      S.joinWith(s, S.splitOnRegex(S.regex('g', S.regexEscape(s)), t))\n  //.      = t`\n  //.\n  //. See also [`splitOn`](#splitOn).\n  //.\n  //. ```javascript\n  //. > S.splitOnRegex(/[,;][ ]*/g, 'foo, bar, baz')\n  //. ['foo', 'bar', 'baz']\n  //.\n  //. > S.splitOnRegex(/[,;][ ]*/g, 'foo;bar;baz')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function splitOnRegex(pattern, s) {\n    return withRegex(pattern, function() {\n      var result = [];\n      var lastIndex = 0;\n      var match;\n      while ((match = pattern.exec(s)) != null) {\n        if (pattern.lastIndex === lastIndex && match[0] === '') {\n          if (pattern.lastIndex === s.length) return result;\n          pattern.lastIndex += 1;\n        } else {\n          result.push(s.slice(lastIndex, match.index));\n          lastIndex = match.index + match[0].length;\n        }\n      }\n      result.push(s.slice(lastIndex));\n      return result;\n    });\n  }\n  S.splitOnRegex =\n  def('splitOnRegex',\n      {},\n      [$.GlobalRegExp, $.String, $.Array($.String)],\n      splitOnRegex);\n\n  return S;\n\n  /* eslint-enable indent */\n\n  }\n\n  return createSanctuary({checkTypes: true, env: defaultEnv});\n\n}));\n\n//. [$.Array]:          v:sanctuary-js/sanctuary-def#Array\n//. [$.String]:         v:sanctuary-js/sanctuary-def#String\n//. [Alt]:              v:fantasyland/fantasy-land#alt\n//. [Alternative]:      v:fantasyland/fantasy-land#alternative\n//. [Applicative]:      v:fantasyland/fantasy-land#applicative\n//. [Apply]:            v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:        v:fantasyland/fantasy-land#bifunctor\n//. [BinaryType]:       v:sanctuary-js/sanctuary-def#BinaryType\n//. [Either]:           #either-type\n//. [Extend]:           v:fantasyland/fantasy-land#extend\n//. [Fantasy Land]:     v:fantasyland/fantasy-land\n//. [Foldable]:         v:fantasyland/fantasy-land#foldable\n//. [Haskell]:          https://www.haskell.org/\n//. [Maybe]:            #maybe-type\n//. [Monad]:            v:fantasyland/fantasy-land#monad\n//. [Monoid]:           v:fantasyland/fantasy-land#monoid\n//. [Nullable]:         v:sanctuary-js/sanctuary-def#Nullable\n//. [Ord]:              v:fantasyland/fantasy-land#ord\n//. [PureScript]:       http://www.purescript.org/\n//. [Ramda]:            http://ramdajs.com/\n//. [RegexFlags]:       v:sanctuary-js/sanctuary-def#RegexFlags\n//. [Semigroup]:        v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:     v:fantasyland/fantasy-land#semigroupoid\n//. [Traversable]:      v:fantasyland/fantasy-land#traversable\n//. [UnaryType]:        v:sanctuary-js/sanctuary-def#UnaryType\n//. [`Math.pow`]:       https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\n//. [`Z.alt`]:          v:sanctuary-js/sanctuary-type-classes#alt\n//. [`Z.ap`]:           v:sanctuary-js/sanctuary-type-classes#ap\n//. [`Z.apFirst`]:      v:sanctuary-js/sanctuary-type-classes#apFirst\n//. [`Z.apSecond`]:     v:sanctuary-js/sanctuary-type-classes#apSecond\n//. [`Z.bimap`]:        v:sanctuary-js/sanctuary-type-classes#bimap\n//. [`Z.chain`]:        v:sanctuary-js/sanctuary-type-classes#chain\n//. [`Z.chainRec`]:     v:sanctuary-js/sanctuary-type-classes#chainRec\n//. [`Z.compose`]:      v:sanctuary-js/sanctuary-type-classes#compose\n//. [`Z.concat`]:       v:sanctuary-js/sanctuary-type-classes#concat\n//. [`Z.contramap`]:    v:sanctuary-js/sanctuary-type-classes#contramap\n//. [`Z.empty`]:        v:sanctuary-js/sanctuary-type-classes#empty\n//. [`Z.equals`]:       v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.extend`]:       v:sanctuary-js/sanctuary-type-classes#extend\n//. [`Z.extract`]:      v:sanctuary-js/sanctuary-type-classes#extract\n//. [`Z.filter`]:       v:sanctuary-js/sanctuary-type-classes#filter\n//. [`Z.filterM`]:      v:sanctuary-js/sanctuary-type-classes#filterM\n//. [`Z.gt`]:           v:sanctuary-js/sanctuary-type-classes#gt\n//. [`Z.gte`]:          v:sanctuary-js/sanctuary-type-classes#gte\n//. [`Z.id`]:           v:sanctuary-js/sanctuary-type-classes#id\n//. [`Z.invert`]:       v:sanctuary-js/sanctuary-type-classes#invert\n//. [`Z.join`]:         v:sanctuary-js/sanctuary-type-classes#join\n//. [`Z.lt`]:           v:sanctuary-js/sanctuary-type-classes#lt\n//. [`Z.lte`]:          v:sanctuary-js/sanctuary-type-classes#lte\n//. [`Z.map`]:          v:sanctuary-js/sanctuary-type-classes#map\n//. [`Z.of`]:           v:sanctuary-js/sanctuary-type-classes#of\n//. [`Z.promap`]:       v:sanctuary-js/sanctuary-type-classes#promap\n//. [`Z.sequence`]:     v:sanctuary-js/sanctuary-type-classes#sequence\n//. [`Z.toString`]:     v:sanctuary-js/sanctuary-type-classes#toString\n//. [`Z.traverse`]:     v:sanctuary-js/sanctuary-type-classes#traverse\n//. [`Z.zero`]:         v:sanctuary-js/sanctuary-type-classes#zero\n//. [`of`]:             v:fantasyland/fantasy-land#of-method\n//. [equivalence]:      https://en.wikipedia.org/wiki/Equivalence_relation\n//. [iff]:              https://en.wikipedia.org/wiki/If_and_only_if\n//. [parseInt]:         https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n//. [sanctuary-def]:    v:sanctuary-js/sanctuary-def\n//. [stable sort]:      https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [thrush]:           https://github.com/raganwald-deprecated/homoiconic/blob/master/2008-10-30/thrush.markdown\n//. [type identifier]:  v:sanctuary-js/sanctuary-type-identifiers\n//.\n//. [`Either#fantasy-land/bimap`]:      #Either.prototype.fantasy-land/bimap\n//. [`Either#fantasy-land/map`]:        #Either.prototype.fantasy-land/map\n//. [`Either#toString`]:                #Either.prototype.toString\n//. [`Maybe#toString`]:                 #Maybe.prototype.toString\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FuY3R1YXJ5L2luZGV4LmpzP2UwZTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyogICAgIyMjIyMjI1xuICAgIyMjIyAgICAgIyMjI1xuICMjIyMgICAjIyMgICAjIyMjXG4jIyMjIyAgICMjIyMjIyMjIyMjICAgc2FuY3R1YXJ5XG4jIyMjIyMjIyAgICMjIyMjIyMjICAgbm91blxuIyMjIyMjIyMjIyMgICAjIyMjIyAgIDEgWyBtYXNzIG5vdW4gXSByZWZ1Z2UgZnJvbSB1bnNhZmUgSmF2YVNjcmlwdFxuICMjIyMgICAjIyMgICAjIyMjXG4gICAjIyMjICAgICAjIyMjXG4gICAgICAjIyMjIyMjICAgICovXG5cbi8vLiAjIFNhbmN0dWFyeVxuLy8uXG4vLy4gWyFbbnBtXShodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS92L3NhbmN0dWFyeS5zdmcpXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9zYW5jdHVhcnkpXG4vLy4gWyFbQ2lyY2xlQ0ldKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vY2lyY2xlY2kvcHJvamVjdC9naXRodWIvc2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS9tYXN0ZXIuc3ZnKV0oaHR0cHM6Ly9jaXJjbGVjaS5jb20vZ2gvc2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS90cmVlL21hc3Rlcilcbi8vLiBbIVtHaXR0ZXJdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0dGVyL3Jvb20vYmFkZ2VzL3NoaWVsZHMuc3ZnKV0oaHR0cHM6Ly9naXR0ZXIuaW0vc2FuY3R1YXJ5LWpzL3NhbmN0dWFyeSlcbi8vLlxuLy8uIFNhbmN0dWFyeSBpcyBhIEphdmFTY3JpcHQgZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBsaWJyYXJ5IGluc3BpcmVkIGJ5XG4vLy4gW0hhc2tlbGxdW10gYW5kIFtQdXJlU2NyaXB0XVtdLiBJdCdzIHN0cmljdGVyIHRoYW4gW1JhbWRhXVtdLCBhbmRcbi8vLiBwcm92aWRlcyBhIHNpbWlsYXIgc3VpdGUgb2YgZnVuY3Rpb25zLlxuLy8uXG4vLy4gU2FuY3R1YXJ5IHByb21vdGVzIHByb2dyYW1zIGNvbXBvc2VkIG9mIHNpbXBsZSwgcHVyZSBmdW5jdGlvbnMuIFN1Y2hcbi8vLiBwcm9ncmFtcyBhcmUgZWFzaWVyIHRvIGNvbXByZWhlbmQsIHRlc3QsIGFuZCBtYWludGFpbiAmbmRhc2g7IHRoZXkgYXJlXG4vLy4gYWxzbyBhIHBsZWFzdXJlIHRvIHdyaXRlLlxuLy8uXG4vLy4gU2FuY3R1YXJ5IHByb3ZpZGVzIHR3byBkYXRhIHR5cGVzLCBbTWF5YmVdW10gYW5kIFtFaXRoZXJdW10sIGJvdGggb2Zcbi8vLiB3aGljaCBhcmUgY29tcGF0aWJsZSB3aXRoIFtGYW50YXN5IExhbmRdW10uIFRoYW5rcyB0byB0aGVzZSBkYXRhIHR5cGVzXG4vLy4gZXZlbiBTYW5jdHVhcnkgZnVuY3Rpb25zIHdoaWNoIG1heSBmYWlsLCBzdWNoIGFzIFtgaGVhZGBdKCNoZWFkKSwgYXJlXG4vLy4gY29tcG9zYWJsZS5cbi8vLlxuLy8uIFNhbmN0dWFyeSBtYWtlcyBpdCBwb3NzaWJsZSB0byB3cml0ZSBzYWZlIGNvZGUgd2l0aG91dCBudWxsIGNoZWNrcy5cbi8vLiBJbiBKYXZhU2NyaXB0IGl0J3MgdHJpdmlhbCB0byBpbnRyb2R1Y2UgYSBwb3NzaWJsZSBydW4tdGltZSB0eXBlIGVycm9yOlxuLy8uXG4vLy4gICAgIHdvcmRzWzBdLnRvVXBwZXJDYXNlKClcbi8vLlxuLy8uIElmIGB3b3Jkc2AgaXMgYFtdYCB3ZSdsbCBnZXQgYSBmYW1pbGlhciBlcnJvciBhdCBydW4tdGltZTpcbi8vLlxuLy8uICAgICBUeXBlRXJyb3I6IENhbm5vdCByZWFkIHByb3BlcnR5ICd0b1VwcGVyQ2FzZScgb2YgdW5kZWZpbmVkXG4vLy5cbi8vLiBTYW5jdHVhcnkgZ2l2ZXMgdXMgYSBmaWdodGluZyBjaGFuY2Ugb2YgYXZvaWRpbmcgc3VjaCBlcnJvcnMuIFdlIG1pZ2h0XG4vLy4gd3JpdGU6XG4vLy5cbi8vLiAgICAgUy5tYXAoUy50b1VwcGVyLCBTLmhlYWQod29yZHMpKVxuLy8uXG4vLy4gU2FuY3R1YXJ5IGlzIGRlc2lnbmVkIHRvIHdvcmsgaW4gTm9kZS5qcyBhbmQgaW4gRVM1LWNvbXBhdGlibGUgYnJvd3NlcnMuXG4vLy5cbi8vLiAjIyBUeXBlc1xuLy8uXG4vLy4gU2FuY3R1YXJ5IHVzZXMgSGFza2VsbC1saWtlIHR5cGUgc2lnbmF0dXJlcyB0byBkZXNjcmliZSB0aGUgdHlwZXMgb2Zcbi8vLiB2YWx1ZXMsIGluY2x1ZGluZyBmdW5jdGlvbnMuIGAnZm9vJ2AsIGZvciBleGFtcGxlLCBpcyBhIG1lbWJlciBvZiBgU3RyaW5nYDtcbi8vLiBgWzEsIDIsIDNdYCBpcyBhIG1lbWJlciBvZiBgQXJyYXkgTnVtYmVyYC4gVGhlIGRvdWJsZSBjb2xvbiAoYDo6YCkgaXMgdXNlZFxuLy8uIHRvIG1lYW4gXCJpcyBhIG1lbWJlciBvZlwiLCBzbyBvbmUgY291bGQgd3JpdGU6XG4vLy5cbi8vLiAgICAgJ2ZvbycgOjogU3RyaW5nXG4vLy4gICAgIFsxLCAyLCAzXSA6OiBBcnJheSBOdW1iZXJcbi8vLlxuLy8uIEFuIGlkZW50aWZpZXIgbWF5IGFwcGVhciB0byB0aGUgbGVmdCBvZiB0aGUgZG91YmxlIGNvbG9uOlxuLy8uXG4vLy4gICAgIE1hdGguUEkgOjogTnVtYmVyXG4vLy5cbi8vLiBUaGUgYXJyb3cgKGAtPmApIGlzIHVzZWQgdG8gZXhwcmVzcyBhIGZ1bmN0aW9uJ3MgdHlwZTpcbi8vLlxuLy8uICAgICBNYXRoLmFicyA6OiBOdW1iZXIgLT4gTnVtYmVyXG4vLy5cbi8vLiBUaGF0IHN0YXRlcyB0aGF0IGBNYXRoLmFic2AgaXMgYSB1bmFyeSBmdW5jdGlvbiB3aGljaCB0YWtlcyBhbiBhcmd1bWVudFxuLy8uIG9mIHR5cGUgYE51bWJlcmAgYW5kIHJldHVybnMgYSB2YWx1ZSBvZiB0eXBlIGBOdW1iZXJgLlxuLy8uXG4vLy4gU29tZSBmdW5jdGlvbnMgYXJlIHBhcmFtZXRyaWNhbGx5IHBvbHltb3JwaGljOiB0aGVpciB0eXBlcyBhcmUgbm90IGZpeGVkLlxuLy8uIFR5cGUgdmFyaWFibGVzIGFyZSB1c2VkIGluIHRoZSByZXByZXNlbnRhdGlvbnMgb2Ygc3VjaCBmdW5jdGlvbnM6XG4vLy5cbi8vLiAgICAgUy5JIDo6IGEgLT4gYVxuLy8uXG4vLy4gYGFgIGlzIGEgdHlwZSB2YXJpYWJsZS4gVHlwZSB2YXJpYWJsZXMgYXJlIG5vdCBjYXBpdGFsaXplZCwgc28gdGhleVxuLy8uIGFyZSBkaWZmZXJlbnRpYWJsZSBmcm9tIHR5cGUgaWRlbnRpZmllcnMgKHdoaWNoIGFyZSBhbHdheXMgY2FwaXRhbGl6ZWQpLlxuLy8uIEJ5IGNvbnZlbnRpb24gdHlwZSB2YXJpYWJsZXMgaGF2ZSBzaW5nbGUtY2hhcmFjdGVyIG5hbWVzLiBUaGUgc2lnbmF0dXJlXG4vLy4gYWJvdmUgc3RhdGVzIHRoYXQgYFMuSWAgdGFrZXMgYSB2YWx1ZSBvZiBhbnkgdHlwZSBhbmQgcmV0dXJucyBhIHZhbHVlIG9mXG4vLy4gdGhlIHNhbWUgdHlwZS4gU29tZSBzaWduYXR1cmVzIGZlYXR1cmUgbXVsdGlwbGUgdHlwZSB2YXJpYWJsZXM6XG4vLy5cbi8vLiAgICAgUy5LIDo6IGEgLT4gYiAtPiBhXG4vLy5cbi8vLiBJdCBtdXN0IGJlIHBvc3NpYmxlIHRvIHJlcGxhY2UgYWxsIG9jY3VycmVuY2VzIG9mIGBhYCB3aXRoIGEgY29uY3JldGUgdHlwZS5cbi8vLiBUaGUgc2FtZSBhcHBsaWVzIGZvciBlYWNoIG90aGVyIHR5cGUgdmFyaWFibGUuIEZvciB0aGUgZnVuY3Rpb24gYWJvdmUsIHRoZVxuLy8uIHR5cGVzIHdpdGggd2hpY2ggYGFgIGFuZCBgYmAgYXJlIHJlcGxhY2VkIG1heSBiZSBkaWZmZXJlbnQsIGJ1dCBuZWVkbid0IGJlLlxuLy8uXG4vLy4gU2luY2UgYWxsIFNhbmN0dWFyeSBmdW5jdGlvbnMgYXJlIGN1cnJpZWQgKHRoZXkgYWNjZXB0IHRoZWlyIGFyZ3VtZW50c1xuLy8uIG9uZSBhdCBhIHRpbWUpLCBhIGJpbmFyeSBmdW5jdGlvbiBpcyByZXByZXNlbnRlZCBhcyBhIHVuYXJ5IGZ1bmN0aW9uIHdoaWNoXG4vLy4gcmV0dXJucyBhIHVuYXJ5IGZ1bmN0aW9uOiBgKiAtPiAqIC0+ICpgLiBUaGlzIGFsaWducyBuZWF0bHkgd2l0aCBIYXNrZWxsLFxuLy8uIHdoaWNoIHVzZXMgY3VycmllZCBmdW5jdGlvbnMgZXhjbHVzaXZlbHkuIEluIEphdmFTY3JpcHQsIHRob3VnaCwgd2UgbWF5XG4vLy4gd2lzaCB0byByZXByZXNlbnQgdGhlIHR5cGVzIG9mIGZ1bmN0aW9ucyB3aXRoIGFyaXRpZXMgbGVzcyB0aGFuIG9yIGdyZWF0ZXJcbi8vLiB0aGFuIG9uZS4gVGhlIGdlbmVyYWwgZm9ybSBpcyBgKDxpbnB1dC10eXBlcz4pIC0+IDxvdXRwdXQtdHlwZT5gLCB3aGVyZVxuLy8uIGA8aW5wdXQtdHlwZXM+YCBjb21wcmlzZXMgemVybyBvciBtb3JlIGNvbW1h4oCTc3BhY2UgKDxjb2RlPiwgPC9jb2RlPilcbi8vLiAtc2VwYXJhdGVkIHR5cGUgcmVwcmVzZW50YXRpb25zOlxuLy8uXG4vLy4gICAtIGAoKSAtPiBTdHJpbmdgXG4vLy4gICAtIGAoYSwgYikgLT4gYWBcbi8vLiAgIC0gYChhLCBiLCBjKSAtPiBkYFxuLy8uXG4vLy4gYE51bWJlciAtPiBOdW1iZXJgIGNhbiB0aHVzIGJlIHNlZW4gYXMgc2hvcnRoYW5kIGZvciBgKE51bWJlcikgLT4gTnVtYmVyYC5cbi8vLlxuLy8uIFRoZSBxdWVzdGlvbiBtYXJrIChgP2ApIGlzIHVzZWQgdG8gcmVwcmVzZW50IHR5cGVzIHdoaWNoIGluY2x1ZGUgYG51bGxgXG4vLy4gYW5kIGB1bmRlZmluZWRgIGFzIG1lbWJlcnMuIGBTdHJpbmc/YCwgZm9yIGV4YW1wbGUsIHJlcHJlc2VudHMgdGhlIHR5cGVcbi8vLiBjb21wcmlzaW5nIGBudWxsYCwgYHVuZGVmaW5lZGAsIGFuZCBhbGwgc3RyaW5ncy5cbi8vLlxuLy8uIFNhbmN0dWFyeSBlbWJyYWNlcyB0eXBlcy4gSmF2YVNjcmlwdCBkb2Vzbid0IHN1cHBvcnQgYWxnZWJyYWljIGRhdGEgdHlwZXMsXG4vLy4gYnV0IHRoZXNlIGNhbiBiZSBzaW11bGF0ZWQgYnkgcHJvdmlkaW5nIGEgZ3JvdXAgb2YgZGF0YSBjb25zdHJ1Y3RvcnMgd2hpY2hcbi8vLiByZXR1cm4gdmFsdWVzIHdpdGggdGhlIHNhbWUgc2V0IG9mIG1ldGhvZHMuIEEgdmFsdWUgb2YgdGhlIEVpdGhlciB0eXBlLCBmb3Jcbi8vLiBleGFtcGxlLCBpcyBjcmVhdGVkIHZpYSB0aGUgTGVmdCBjb25zdHJ1Y3RvciBvciB0aGUgUmlnaHQgY29uc3RydWN0b3IuXG4vLy5cbi8vLiBJdCdzIG5lY2Vzc2FyeSB0byBleHRlbmQgSGFza2VsbCdzIG5vdGF0aW9uIHRvIGRlc2NyaWJlIGltcGxpY2l0IGFyZ3VtZW50c1xuLy8uIHRvIHRoZSAqbWV0aG9kcyogcHJvdmlkZWQgYnkgU2FuY3R1YXJ5J3MgdHlwZXMuIEluIGB4Lm1hcCh5KWAsIGZvciBleGFtcGxlLFxuLy8uIHRoZSBgbWFwYCBtZXRob2QgdGFrZXMgYW4gaW1wbGljaXQgYXJndW1lbnQgYHhgIGluIGFkZGl0aW9uIHRvIHRoZSBleHBsaWNpdFxuLy8uIGFyZ3VtZW50IGB5YC4gVGhlIHR5cGUgb2YgdGhlIHZhbHVlIHVwb24gd2hpY2ggYSBtZXRob2QgaXMgaW52b2tlZCBhcHBlYXJzXG4vLy4gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc2lnbmF0dXJlLCBzZXBhcmF0ZWQgZnJvbSB0aGUgYXJndW1lbnRzIGFuZCByZXR1cm5cbi8vLiB2YWx1ZSBieSBhIHNxdWlnZ2x5IGFycm93IChgfj5gKS4gVGhlIHR5cGUgb2YgdGhlIGBmYW50YXN5LWxhbmQvbWFwYCBtZXRob2Rcbi8vLiBvZiB0aGUgTWF5YmUgdHlwZSBpcyB3cml0dGVuIGBNYXliZSBhIH4+IChhIC0+IGIpIC0+IE1heWJlIGJgLiBPbmUgY291bGRcbi8vLiByZWFkIHRoaXMgYXM6XG4vLy5cbi8vLiBfV2hlbiB0aGUgYGZhbnRhc3ktbGFuZC9tYXBgIG1ldGhvZCBpcyBpbnZva2VkIG9uIGEgdmFsdWUgb2YgdHlwZSBgTWF5YmUgYWBcbi8vLiAoZm9yIGFueSB0eXBlIGBhYCkgd2l0aCBhbiBhcmd1bWVudCBvZiB0eXBlIGBhIC0+IGJgIChmb3IgYW55IHR5cGUgYGJgKSxcbi8vLiBpdCByZXR1cm5zIGEgdmFsdWUgb2YgdHlwZSBgTWF5YmUgYmAuX1xuLy8uXG4vLy4gVGhlIHNxdWlnZ2x5IGFycm93IGlzIGFsc28gdXNlZCB3aGVuIHJlcHJlc2VudGluZyBub24tZnVuY3Rpb24gcHJvcGVydGllcy5cbi8vLiBgTWF5YmUgYSB+PiBCb29sZWFuYCwgZm9yIGV4YW1wbGUsIHJlcHJlc2VudHMgYSBCb29sZWFuIHByb3BlcnR5IG9mIGEgdmFsdWVcbi8vLiBvZiB0eXBlIGBNYXliZSBhYC5cbi8vLlxuLy8uIFNhbmN0dWFyeSBzdXBwb3J0cyB0eXBlIGNsYXNzZXM6IGNvbnN0cmFpbnRzIG9uIHR5cGUgdmFyaWFibGVzLiBXaGVyZWFzXG4vLy4gYGEgLT4gYWAgaW1wbGljaXRseSBzdXBwb3J0cyBldmVyeSB0eXBlLCBgRnVuY3RvciBmID0+IChhIC0+IGIpIC0+IGYgYSAtPlxuLy8uIGYgYmAgcmVxdWlyZXMgdGhhdCBgZmAgYmUgYSB0eXBlIHdoaWNoIHNhdGlzZmllcyB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZVxuLy8uIEZ1bmN0b3IgdHlwZSBjbGFzcy4gVHlwZS1jbGFzcyBjb25zdHJhaW50cyBhcHBlYXIgYXQgdGhlIGJlZ2lubmluZyBvZiBhXG4vLy4gdHlwZSBzaWduYXR1cmUsIHNlcGFyYXRlZCBmcm9tIHRoZSByZXN0IG9mIHRoZSBzaWduYXR1cmUgYnkgYSBmYXQgYXJyb3dcbi8vLiAoYD0+YCkuXG4vLy5cbi8vLiAjIyMgVHlwZSByZXByZXNlbnRhdGl2ZXNcbi8vLlxuLy8uIFdoYXQgaXMgdGhlIHR5cGUgb2YgYE51bWJlcmA/IE9uZSBhbnN3ZXIgaXMgYGEgLT4gTnVtYmVyYCwgc2luY2UgaXQncyBhXG4vLy4gZnVuY3Rpb24gd2hpY2ggdGFrZXMgYW4gYXJndW1lbnQgb2YgYW55IHR5cGUgYW5kIHJldHVybnMgYSBOdW1iZXIgdmFsdWUuXG4vLy4gV2hlbiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gW2Bpc2BdKCNpcyksIHRob3VnaCwgYE51bWJlcmAgaXNcbi8vLiByZWFsbHkgdGhlIHZhbHVlLWxldmVsIHJlcHJlc2VudGF0aXZlIG9mIHRoZSBOdW1iZXIgdHlwZS5cbi8vLlxuLy8uIFNhbmN0dWFyeSB1c2VzIHRoZSBUeXBlUmVwIHBzZXVkb3R5cGUgdG8gZGVzY3JpYmUgdHlwZSByZXByZXNlbnRhdGl2ZXMuXG4vLy4gRm9yIGV4YW1wbGU6XG4vLy5cbi8vLiAgICAgTnVtYmVyIDo6IFR5cGVSZXAgTnVtYmVyXG4vLy5cbi8vLiBgTnVtYmVyYCBpcyB0aGUgc29sZSBpbmhhYml0YW50IG9mIHRoZSBUeXBlUmVwIE51bWJlciB0eXBlLlxuLy8uXG4vLy4gIyMgVHlwZSBjaGVja2luZ1xuLy8uXG4vLy4gU2FuY3R1YXJ5IGZ1bmN0aW9ucyBhcmUgZGVmaW5lZCB2aWEgW3NhbmN0dWFyeS1kZWZdW10gdG8gcHJvdmlkZSBydW4tdGltZVxuLy8uIHR5cGUgY2hlY2tpbmcuIFRoaXMgaXMgdHJlbWVuZG91c2x5IHVzZWZ1bCBkdXJpbmcgZGV2ZWxvcG1lbnQ6IHR5cGUgZXJyb3JzXG4vLy4gYXJlIHJlcG9ydGVkIGltbWVkaWF0ZWx5LCBhdm9pZGluZyBjaXJjdWl0b3VzIHN0YWNrIHRyYWNlcyAoYXQgYmVzdCkgYW5kXG4vLy4gc2lsZW50IGZhaWx1cmVzIGR1ZSB0byB0eXBlIGNvZXJjaW9uIChhdCB3b3JzdCkuIEZvciBleGFtcGxlOlxuLy8uXG4vLy4gYGBgamF2YXNjcmlwdFxuLy8uIFMuYWRkKDIsIHRydWUpO1xuLy8uIC8vICEgVHlwZUVycm9yOiBJbnZhbGlkIHZhbHVlXG4vLy4gLy9cbi8vLiAvLyAgIGFkZCA6OiBGaW5pdGVOdW1iZXIgLT4gRmluaXRlTnVtYmVyIC0+IEZpbml0ZU51bWJlclxuLy8uIC8vICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5cbi8vLiAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxXG4vLy4gLy9cbi8vLiAvLyAgIDEpICB0cnVlIDo6IEJvb2xlYW5cbi8vLiAvL1xuLy8uIC8vICAgVGhlIHZhbHVlIGF0IHBvc2l0aW9uIDEgaXMgbm90IGEgbWVtYmVyIG9mIOKAmEZpbml0ZU51bWJlcuKAmS5cbi8vLiAvL1xuLy8uIC8vICAgU2VlIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS1kZWYjRmluaXRlTnVtYmVyIGZvciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc2FuY3R1YXJ5LWRlZi9GaW5pdGVOdW1iZXIgdHlwZS5cbi8vLiBgYGBcbi8vLlxuLy8uIENvbXBhcmUgdGhpcyB0byB0aGUgYmVoYXZpb3VyIG9mIFJhbWRhJ3MgdW5jaGVja2VkIGVxdWl2YWxlbnQ6XG4vLy5cbi8vLiBgYGBqYXZhc2NyaXB0XG4vLy4gUi5hZGQoMiwgdHJ1ZSk7XG4vLy4gLy8gPT4gM1xuLy8uIGBgYFxuLy8uXG4vLy4gVGhlcmUgaXMgYSBwZXJmb3JtYW5jZSBjb3N0IHRvIHJ1bi10aW1lIHR5cGUgY2hlY2tpbmcuIE9uZSBtYXkgd2lzaCB0b1xuLy8uIGRpc2FibGUgdHlwZSBjaGVja2luZyBpbiBjZXJ0YWluIGNvbnRleHRzIHRvIGF2b2lkIHBheWluZyB0aGlzIGNvc3QuXG4vLy4gW2BjcmVhdGVgXSgjY3JlYXRlKSBmYWNpbGl0YXRlcyB0aGUgY3JlYXRpb24gb2YgYSBTYW5jdHVhcnkgbW9kdWxlIHdoaWNoXG4vLy4gZG9lcyBub3QgcGVyZm9ybSB0eXBlIGNoZWNraW5nLlxuLy8uXG4vLy4gSW4gTm9kZSwgb25lIGNvdWxkIHVzZSBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSB0byBkZXRlcm1pbmUgd2hldGhlciB0b1xuLy8uIHBlcmZvcm0gdHlwZSBjaGVja2luZzpcbi8vLlxuLy8uIGBgYGphdmFzY3JpcHRcbi8vLiBjb25zdCB7Y3JlYXRlLCBlbnZ9ID0gcmVxdWlyZSgnc2FuY3R1YXJ5Jyk7XG4vLy5cbi8vLiBjb25zdCBjaGVja1R5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcbi8vLiBjb25zdCBTID0gY3JlYXRlKHtjaGVja1R5cGVzLCBlbnZ9KTtcbi8vLiBgYGBcbi8vLlxuLy8uICMjIEFQSVxuXG4oZnVuY3Rpb24oZikge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZihyZXF1aXJlKCdzYW5jdHVhcnktZGVmJyksXG4gICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmUoJ3NhbmN0dWFyeS10eXBlLWNsYXNzZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnc2FuY3R1YXJ5LXR5cGUtaWRlbnRpZmllcnMnKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICE9IG51bGwpIHtcbiAgICBkZWZpbmUoWydzYW5jdHVhcnktZGVmJyxcbiAgICAgICAgICAgICdzYW5jdHVhcnktdHlwZS1jbGFzc2VzJyxcbiAgICAgICAgICAgICdzYW5jdHVhcnktdHlwZS1pZGVudGlmaWVycyddLFxuICAgICAgICAgICBmKTtcbiAgfSBlbHNlIHtcbiAgICBzZWxmLnNhbmN0dWFyeSA9IGYoc2VsZi5zYW5jdHVhcnlEZWYsXG4gICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FuY3R1YXJ5VHlwZUNsYXNzZXMsXG4gICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FuY3R1YXJ5VHlwZUlkZW50aWZpZXJzKTtcbiAgfVxuXG59KGZ1bmN0aW9uKCQsIFosIHR5cGUpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gIEZuIDo6IChUeXBlLCBUeXBlKSAtPiBUeXBlXG4gIGZ1bmN0aW9uIEZuKHgsIHkpIHsgcmV0dXJuICQuRnVuY3Rpb24oW3gsIHldKTsgfVxuXG4gIC8vICBmbGlwJCA6OiAoKGEsIGIpIC0+IGMpIC0+IGIgLT4gYSAtPiBjXG4gIGZ1bmN0aW9uIGZsaXAkKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHkpIHtcbiAgICAgICAgcmV0dXJuIGYoeSwgeCk7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICAvLyAgdG9PYmplY3QgOjogYSAtPiBPYmplY3RcbiAgZnVuY3Rpb24gdG9PYmplY3QoeCkge1xuICAgIHJldHVybiB4ID09IG51bGwgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogT2JqZWN0KHgpO1xuICB9XG5cbiAgLy8gIHR5cGVFcSA6OiBTdHJpbmcgLT4gYSAtPiBCb29sZWFuXG4gIGZ1bmN0aW9uIHR5cGVFcSh0eXBlSWRlbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHR5cGUoeCkgPT09IHR5cGVJZGVudDtcbiAgICB9O1xuICB9XG5cbiAgLy8gIHVuY3VycnkyIDo6IChhIC0+IGIgLT4gYykgLT4gKChhLCBiKSAtPiBjKVxuICBmdW5jdGlvbiB1bmN1cnJ5MihmKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHJldHVybiBmKHgpKHkpO1xuICAgIH07XG4gIH1cblxuICAvLyAgcmVhZG1lVXJsIDo6IFN0cmluZyAtPiBTdHJpbmdcbiAgZnVuY3Rpb24gcmVhZG1lVXJsKGlkKSB7XG4gICAgdmFyIHZlcnNpb24gPSAnMC4xNC4xJzsgIC8vIHVwZGF0ZWQgcHJvZ3JhbW1hdGljYWxseVxuICAgIHJldHVybiAnaHR0cHM6Ly9naXRodWIuY29tL3NhbmN0dWFyeS1qcy9zYW5jdHVhcnkvdHJlZS92JyArIHZlcnNpb24gK1xuICAgICAgICAgICAnIycgKyBpZDtcbiAgfVxuXG4gIC8vICA6OiBUeXBlXG4gIHZhciBhID0gJC5UeXBlVmFyaWFibGUoJ2EnKTtcbiAgdmFyIGIgPSAkLlR5cGVWYXJpYWJsZSgnYicpO1xuICB2YXIgYyA9ICQuVHlwZVZhcmlhYmxlKCdjJyk7XG4gIHZhciBkID0gJC5UeXBlVmFyaWFibGUoJ2QnKTtcbiAgdmFyIGUgPSAkLlR5cGVWYXJpYWJsZSgnZScpO1xuICB2YXIgZyA9ICQuVHlwZVZhcmlhYmxlKCdnJyk7XG4gIHZhciBsID0gJC5UeXBlVmFyaWFibGUoJ2wnKTtcbiAgdmFyIHIgPSAkLlR5cGVWYXJpYWJsZSgncicpO1xuXG4gIC8vICA6OiBUeXBlIC0+IFR5cGVcbiAgdmFyIGYgPSAkLlVuYXJ5VHlwZVZhcmlhYmxlKCdmJyk7XG4gIHZhciBtID0gJC5VbmFyeVR5cGVWYXJpYWJsZSgnbScpO1xuICB2YXIgdCA9ICQuVW5hcnlUeXBlVmFyaWFibGUoJ3QnKTtcbiAgdmFyIHcgPSAkLlVuYXJ5VHlwZVZhcmlhYmxlKCd3Jyk7XG5cbiAgLy8gIDo6IFR5cGUgLT4gVHlwZSAtPiBUeXBlXG4gIHZhciBwID0gJC5CaW5hcnlUeXBlVmFyaWFibGUoJ3AnKTtcbiAgdmFyIHMgPSAkLkJpbmFyeVR5cGVWYXJpYWJsZSgncycpO1xuXG4gIC8vICBlaXRoZXJUeXBlSWRlbnQgOjogU3RyaW5nXG4gIHZhciBlaXRoZXJUeXBlSWRlbnQgPSAnc2FuY3R1YXJ5L0VpdGhlcic7XG5cbiAgLy8gICRFaXRoZXIgOjogVHlwZSAtPiBUeXBlIC0+IFR5cGVcbiAgdmFyICRFaXRoZXIgPSAkLkJpbmFyeVR5cGUoXG4gICAgZWl0aGVyVHlwZUlkZW50LFxuICAgIHJlYWRtZVVybCgnRWl0aGVyVHlwZScpLFxuICAgIHR5cGVFcShlaXRoZXJUeXBlSWRlbnQpLFxuICAgIGZ1bmN0aW9uKGVpdGhlcikgeyByZXR1cm4gZWl0aGVyLmlzTGVmdCA/IFtlaXRoZXIudmFsdWVdIDogW107IH0sXG4gICAgZnVuY3Rpb24oZWl0aGVyKSB7IHJldHVybiBlaXRoZXIuaXNSaWdodCA/IFtlaXRoZXIudmFsdWVdIDogW107IH1cbiAgKTtcblxuICAvLyAgTGlzdCA6OiBUeXBlIC0+IFR5cGVcbiAgdmFyIExpc3QgPSAkLlVuYXJ5VHlwZShcbiAgICAnc2FuY3R1YXJ5L0xpc3QnLFxuICAgIHJlYWRtZVVybCgnbGlzdCcpLFxuICAgIGZ1bmN0aW9uKHgpIHsgcmV0dXJuICQuU3RyaW5nLl90ZXN0KHgpIHx8IEFycmF5LmlzQXJyYXkoeCk7IH0sXG4gICAgZnVuY3Rpb24obGlzdCkgeyByZXR1cm4gJC5TdHJpbmcuX3Rlc3QobGlzdCkgPyBbXSA6IGxpc3Q7IH1cbiAgKTtcblxuICAvLyAgbWF5YmVUeXBlSWRlbnQgOjogU3RyaW5nXG4gIHZhciBtYXliZVR5cGVJZGVudCA9ICdzYW5jdHVhcnkvTWF5YmUnO1xuXG4gIC8vICAkTWF5YmUgOjogVHlwZSAtPiBUeXBlXG4gIHZhciAkTWF5YmUgPSAkLlVuYXJ5VHlwZShcbiAgICBtYXliZVR5cGVJZGVudCxcbiAgICByZWFkbWVVcmwoJ01heWJlVHlwZScpLFxuICAgIHR5cGVFcShtYXliZVR5cGVJZGVudCksXG4gICAgZnVuY3Rpb24obWF5YmUpIHsgcmV0dXJuIG1heWJlLmlzSnVzdCA/IFttYXliZS52YWx1ZV0gOiBbXTsgfVxuICApO1xuXG4gIC8vICBUeXBlUmVwIDo6IFR5cGUgLT4gVHlwZVxuICB2YXIgVHlwZVJlcCA9ICQuVW5hcnlUeXBlKFxuICAgICdzYW5jdHVhcnkvVHlwZVJlcCcsXG4gICAgcmVhZG1lVXJsKCd0eXBlLXJlcHJlc2VudGF0aXZlcycpLFxuICAgIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiAkLkFueUZ1bmN0aW9uLl90ZXN0KHgpIHx8XG4gICAgICAgICAgICAgeCAhPSBudWxsICYmICQuU3RyaW5nLl90ZXN0KHhbJ0BAdHlwZSddKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uKHR5cGVSZXApIHsgcmV0dXJuIFtdOyB9XG4gICk7XG5cbiAgLy8gIGRlZmF1bHRFbnYgOjogQXJyYXkgVHlwZVxuICB2YXIgZGVmYXVsdEVudiA9IFouY29uY2F0KCQuZW52LCBbXG4gICAgJC5GaW5pdGVOdW1iZXIsXG4gICAgJC5Ob25aZXJvRmluaXRlTnVtYmVyLFxuICAgICRFaXRoZXIoJC5Vbmtub3duLCAkLlVua25vd24pLFxuICAgIEZuKCQuVW5rbm93biwgJC5Vbmtub3duKSxcbiAgICAkLkdsb2JhbFJlZ0V4cCxcbiAgICAkLk5vbkdsb2JhbFJlZ0V4cCxcbiAgICAkLkludGVnZXIsXG4gICAgJC5Ob25OZWdhdGl2ZUludGVnZXIsXG4gICAgJE1heWJlKCQuVW5rbm93biksXG4gICAgJC5QYWlyKCQuVW5rbm93biwgJC5Vbmtub3duKSxcbiAgICAkLlJlZ2V4RmxhZ3MsXG4gICAgJC5WYWxpZERhdGUsXG4gICAgJC5WYWxpZE51bWJlclxuICBdKTtcblxuICAvLyAgT3B0aW9ucyA6OiBUeXBlXG4gIHZhciBPcHRpb25zID0gJC5SZWNvcmRUeXBlKHtjaGVja1R5cGVzOiAkLkJvb2xlYW4sIGVudjogJC5BcnJheSgkLkFueSl9KTtcblxuICAvLyAgY3JlYXRlU2FuY3R1YXJ5IDo6IE9wdGlvbnMgLT4gTW9kdWxlXG4gIGZ1bmN0aW9uIGNyZWF0ZVNhbmN0dWFyeShvcHRzKSB7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgaW5kZW50ICovXG5cbiAgLy8gIGNoZWNrVHlwZXMgOjogQm9vbGVhblxuICB2YXIgY2hlY2tUeXBlcyA9IG9wdHMuY2hlY2tUeXBlcztcblxuICAvLyAgZW52IDo6IEFycmF5IFR5cGVcbiAgdmFyIGVudiA9IG9wdHMuZW52O1xuXG4gIHZhciBTID0ge307XG5cbiAgLy8jIGNyZWF0ZSA6OiB7IGNoZWNrVHlwZXMgOjogQm9vbGVhbiwgZW52IDo6IEFycmF5IFR5cGUgfSAtPiBNb2R1bGVcbiAgLy8uXG4gIC8vLiBUYWtlcyBhbiBvcHRpb25zIHJlY29yZCBhbmQgcmV0dXJucyBhIFNhbmN0dWFyeSBtb2R1bGUuIGBjaGVja1R5cGVzYFxuICAvLy4gc3BlY2lmaWVzIHdoZXRoZXIgdG8gZW5hYmxlIHR5cGUgY2hlY2tpbmcuIFRoZSBtb2R1bGUncyBwb2x5bW9ycGhpY1xuICAvLy4gZnVuY3Rpb25zIChzdWNoIGFzIFtgSWBdKCNJKSkgcmVxdWlyZSBlYWNoIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBhXG4gIC8vLiB0eXBlIHZhcmlhYmxlIHRvIGJlIGEgbWVtYmVyIG9mIGF0IGxlYXN0IG9uZSB0eXBlIGluIHRoZSBlbnZpcm9ubWVudC5cbiAgLy8uXG4gIC8vLiBBIHdlbGwtdHlwZWQgYXBwbGljYXRpb24gb2YgYSBTYW5jdHVhcnkgZnVuY3Rpb24gd2lsbCBwcm9kdWNlIHRoZSBzYW1lXG4gIC8vLiByZXN1bHQgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHR5cGUgY2hlY2tpbmcgaXMgZW5hYmxlZC4gSWYgdHlwZSBjaGVja2luZ1xuICAvLy4gaXMgZW5hYmxlZCwgYSBiYWRseSB0eXBlZCBhcHBsaWNhdGlvbiB3aWxsIHByb2R1Y2UgYW4gZXhjZXB0aW9uIHdpdGggYVxuICAvLy4gZGVzY3JpcHRpdmUgZXJyb3IgbWVzc2FnZS5cbiAgLy8uXG4gIC8vLiBUaGUgZm9sbG93aW5nIHNuaXBwZXQgZGVtb25zdHJhdGVzIGRlZmluaW5nIGEgY3VzdG9tIHR5cGUgYW5kIHVzaW5nXG4gIC8vLiBgY3JlYXRlYCB0byBwcm9kdWNlIGEgU2FuY3R1YXJ5IG1vZHVsZSB3aGljaCBpcyBhd2FyZSBvZiB0aGF0IHR5cGU6XG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gY29uc3Qge2NyZWF0ZSwgZW52fSA9IHJlcXVpcmUoJ3NhbmN0dWFyeScpO1xuICAvLy4gY29uc3QgJCA9IHJlcXVpcmUoJ3NhbmN0dWFyeS1kZWYnKTtcbiAgLy8uIGNvbnN0IHR5cGUgPSByZXF1aXJlKCdzYW5jdHVhcnktdHlwZS1pZGVudGlmaWVycycpO1xuICAvLy5cbiAgLy8uIC8vICAgIElkZW50aXR5IDo6IGEgLT4gSWRlbnRpdHkgYVxuICAvLy4gY29uc3QgSWRlbnRpdHkgPSBmdW5jdGlvbiBJZGVudGl0eSh4KSB7XG4gIC8vLiAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBJZGVudGl0eSkpIHJldHVybiBuZXcgSWRlbnRpdHkoeCk7XG4gIC8vLiAgIHRoaXMudmFsdWUgPSB4O1xuICAvLy4gfTtcbiAgLy8uXG4gIC8vLiBJZGVudGl0eVsnQEB0eXBlJ10gPSAnbXktcGFja2FnZS9JZGVudGl0eUAxJztcbiAgLy8uXG4gIC8vLiBJZGVudGl0eS5wcm90b3R5cGVbJ2ZhbnRhc3ktbGFuZC9tYXAnXSA9IGZ1bmN0aW9uKGYpIHtcbiAgLy8uICAgcmV0dXJuIElkZW50aXR5KGYodGhpcy52YWx1ZSkpO1xuICAvLy4gfTtcbiAgLy8uXG4gIC8vLiAvLyAgICBJZGVudGl0eVR5cGUgOjogVHlwZSAtPiBUeXBlXG4gIC8vLiBjb25zdCBJZGVudGl0eVR5cGUgPSAkLlVuYXJ5VHlwZShcbiAgLy8uICAgSWRlbnRpdHlbJ0BAdHlwZSddLFxuICAvLy4gICAnaHR0cDovL2V4YW1wbGUuY29tL215LXBhY2thZ2UjSWRlbnRpdHknLFxuICAvLy4gICB4ID0+IHR5cGUoeCkgPT09IElkZW50aXR5WydAQHR5cGUnXSxcbiAgLy8uICAgaWRlbnRpdHkgPT4gW2lkZW50aXR5LnZhbHVlXVxuICAvLy4gKTtcbiAgLy8uXG4gIC8vLiBjb25zdCBTID0gY3JlYXRlKHtcbiAgLy8uICAgY2hlY2tUeXBlczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcbiAgLy8uICAgZW52OiBlbnYuY29uY2F0KFtJZGVudGl0eVR5cGUoJC5Vbmtub3duKV0pLFxuICAvLy4gfSk7XG4gIC8vLlxuICAvLy4gUy5tYXAoUy5zdWIoMSksIElkZW50aXR5KDQzKSk7XG4gIC8vLiAvLyA9PiBJZGVudGl0eSg0MilcbiAgLy8uIGBgYFxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgZW52YF0oI2VudikuXG4gIFMuY3JlYXRlID1cbiAgJC5jcmVhdGUoe2NoZWNrVHlwZXM6IGNoZWNrVHlwZXMsIGVudjogZGVmYXVsdEVudn0pKCdjcmVhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbT3B0aW9ucywgJC5PYmplY3RdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlU2FuY3R1YXJ5KTtcblxuICAvLyMgZW52IDo6IEFycmF5IFR5cGVcbiAgLy8uXG4gIC8vLiBUaGUgZGVmYXVsdCBlbnZpcm9ubWVudCwgd2hpY2ggbWF5IGJlIHVzZWQgYXMgaXMgb3IgYXMgdGhlIGJhc2lzIG9mIGFcbiAgLy8uIGN1c3RvbSBlbnZpcm9ubWVudCBpbiBjb25qdW5jdGlvbiB3aXRoIFtgY3JlYXRlYF0oI2NyZWF0ZSkuXG4gIFMuZW52ID0gZGVmYXVsdEVudjtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBfX2RvY3Rlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLyogZ2xvYmFsIF9fZG9jdGVzdDpmYWxzZSAqL1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gICAgdmFyIF9MaXN0ID0gX19kb2N0ZXN0LnJlcXVpcmUoJy4vdGVzdC9pbnRlcm5hbC9MaXN0Jyk7XG4gICAgdmFyIENvbnMgPSBfTGlzdC5Db25zO1xuICAgIHZhciBOaWwgPSBfTGlzdC5OaWw7XG4gICAgdmFyIFN1bSA9IF9fZG9jdGVzdC5yZXF1aXJlKCcuL3Rlc3QvaW50ZXJuYWwvU3VtJyk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICAgIGVudiA9IFouY29uY2F0KGVudiwgW19MaXN0LlR5cGUoJC5Vbmtub3duKSwgU3VtLlR5cGVdKTtcbiAgfVxuXG4gIHZhciBkZWYgPSAkLmNyZWF0ZSh7Y2hlY2tUeXBlczogY2hlY2tUeXBlcywgZW52OiBlbnZ9KTtcblxuICAvLy4gIyMjIFBsYWNlaG9sZGVyXG4gIC8vLlxuICAvLy4gU2FuY3R1YXJ5IGZ1bmN0aW9ucyBhcmUgZGVzaWduZWQgd2l0aCBwYXJ0aWFsIGFwcGxpY2F0aW9uIGluIG1pbmQuXG4gIC8vLiBJbiBtYW55IGNhc2VzIG9uZSBjYW4gZGVmaW5lIGEgbW9yZSBzcGVjaWZpYyBmdW5jdGlvbiBpbiB0ZXJtcyBvZlxuICAvLy4gYSBtb3JlIGdlbmVyYWwgb25lIHNpbXBseSBieSBhcHBseWluZyB0aGUgbW9yZSBnZW5lcmFsIGZ1bmN0aW9uIHRvXG4gIC8vLiBzb21lIChidXQgbm90IGFsbCkgb2YgaXRzIGFyZ3VtZW50cy4gRm9yIGV4YW1wbGUsIG9uZSBjb3VsZCBkZWZpbmVcbiAgLy8uIGBzdW0gOjogRm9sZGFibGUgZiA9PiBmIE51bWJlciAtPiBOdW1iZXJgIGFzIGBTLnJlZHVjZShTLmFkZCwgMClgLlxuICAvLy5cbiAgLy8uIEluIHNvbWUgY2FzZXMsIHRob3VnaCwgdGhlcmUgYXJlIG11bHRpcGxlIG9yZGVycyBpbiB3aGljaCBvbmUgbWF5XG4gIC8vLiB3aXNoIHRvIHByb3ZpZGUgYSBmdW5jdGlvbidzIGFyZ3VtZW50cy4gYFMuY29uY2F0KCdwcmVmaXgnKWAgaXMgYVxuICAvLy4gZnVuY3Rpb24gd2hpY2ggcHJlZml4ZXMgaXRzIGFyZ3VtZW50LCBidXQgaG93IHdvdWxkIG9uZSBkZWZpbmUgYVxuICAvLy4gZnVuY3Rpb24gd2hpY2ggc3VmZml4ZXMgaXRzIGFyZ3VtZW50PyBJdCdzIHBvc3NpYmxlIHdpdGggdGhlIGhlbHBcbiAgLy8uIG9mIFtgX19gXSgjX18pLCB0aGUgc3BlY2lhbCBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgLy8uXG4gIC8vLiBUaGUgcGxhY2Vob2xkZXIgaW5kaWNhdGVzIGEgaG9sZSB0byBiZSBmaWxsZWQgYXQgc29tZSBmdXR1cmUgdGltZS5cbiAgLy8uIFRoZSBmb2xsb3dpbmcgYXJlIGFsbCBlcXVpdmFsZW50IChgX2AgcmVwcmVzZW50cyB0aGUgcGxhY2Vob2xkZXIpOlxuICAvLy5cbiAgLy8uICAgLSBgZih4LCB5LCB6KWBcbiAgLy8uICAgLSBgZihfLCB5LCB6KSh4KWBcbiAgLy8uICAgLSBgZihfLCBfLCB6KSh4LCB5KWBcbiAgLy8uICAgLSBgZihfLCBfLCB6KShfLCB5KSh4KWBcblxuICAvLyMgX18gOjogUGxhY2Vob2xkZXJcbiAgLy8uXG4gIC8vLiBUaGUgc3BlY2lhbCBbcGxhY2Vob2xkZXJdKCNwbGFjZWhvbGRlcikgdmFsdWUuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm1hcChTLmNvbmNhdCgnQCcpLCBbJ2ZvbycsICdiYXInLCAnYmF6J10pXG4gIC8vLiBbJ0Bmb28nLCAnQGJhcicsICdAYmF6J11cbiAgLy8uXG4gIC8vLiA+IFMubWFwKFMuY29uY2F0KFMuX18sICc/JyksIFsnZm9vJywgJ2JhcicsICdiYXonXSlcbiAgLy8uIFsnZm9vPycsICdiYXI/JywgJ2Jhej8nXVxuICAvLy4gYGBgXG4gIFMuX18gPSAkLl9fO1xuXG4gIC8vLiAjIyMgQ2xhc3NpZnlcblxuICAvLyMgdHlwZSA6OiBBbnkgLT4geyBuYW1lc3BhY2UgOjogTWF5YmUgU3RyaW5nLCBuYW1lIDo6IFN0cmluZywgdmVyc2lvbiA6OiBOb25OZWdhdGl2ZUludGVnZXIgfVxuICAvLy5cbiAgLy8uIFJldHVybnMgdGhlIHJlc3VsdCBvZiBwYXJzaW5nIHRoZSBbdHlwZSBpZGVudGlmaWVyXVtdIG9mIHRoZSBnaXZlbiB2YWx1ZS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMudHlwZShTLkp1c3QoNDIpKVxuICAvLy4ge25hbWVzcGFjZTogSnVzdCgnc2FuY3R1YXJ5JyksIG5hbWU6ICdNYXliZScsIHZlcnNpb246IDB9XG4gIC8vLlxuICAvLy4gPiBTLnR5cGUoWzEsIDIsIDNdKVxuICAvLy4ge25hbWVzcGFjZTogTm90aGluZywgbmFtZTogJ0FycmF5JywgdmVyc2lvbjogMH1cbiAgLy8uIGBgYFxuICBTLnR5cGUgPVxuICBkZWYoJ3R5cGUnLFxuICAgICAge30sXG4gICAgICBbJC5BbnksXG4gICAgICAgJC5SZWNvcmRUeXBlKHtuYW1lc3BhY2U6ICRNYXliZSgkLlN0cmluZyksXG4gICAgICAgICAgICAgICAgICAgICBuYW1lOiAkLlN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgIHZlcnNpb246ICQuTm9uTmVnYXRpdmVJbnRlZ2VyfSldLFxuICAgICAgZnVuY3Rpb24oeCkge1xuICAgICAgICB2YXIgciA9IHR5cGUucGFyc2UodHlwZSh4KSk7XG4gICAgICAgIHIubmFtZXNwYWNlID0gdG9NYXliZShyLm5hbWVzcGFjZSk7XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfSk7XG5cbiAgLy8jIGlzIDo6IFR5cGVSZXAgYSAtPiBBbnkgLT4gQm9vbGVhblxuICAvLy5cbiAgLy8uIFRha2VzIGEgW3R5cGUgcmVwcmVzZW50YXRpdmVdKCN0eXBlLXJlcHJlc2VudGF0aXZlcykgYW5kIGEgdmFsdWUgb2YgYW55XG4gIC8vLiB0eXBlIGFuZCByZXR1cm5zIGB0cnVlYCBbaWZmXVtdIHRoZSBnaXZlbiB2YWx1ZSBpcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUuXG4gIC8vLiBTdWJ0eXBpbmcgaXMgbm90IHJlc3BlY3RlZC5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuaXMoTnVtYmVyLCA0MilcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMuaXMoT2JqZWN0LCA0MilcbiAgLy8uIGZhbHNlXG4gIC8vLlxuICAvLy4gPiBTLmlzKFN0cmluZywgNDIpXG4gIC8vLiBmYWxzZVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGlzKHR5cGVSZXAsIHgpIHtcbiAgICB2YXIgeFR5cGUgPSB0eXBlKHgpO1xuICAgIGlmICgkLlN0cmluZy5fdGVzdCh0eXBlUmVwWydAQHR5cGUnXSkpIHtcbiAgICAgIHJldHVybiB4VHlwZSA9PT0gdHlwZVJlcFsnQEB0eXBlJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtYXRjaCA9IC9mdW5jdGlvbiAoXFx3KikvLmV4ZWModHlwZVJlcCk7XG4gICAgICByZXR1cm4gbWF0Y2ggIT0gbnVsbCAmJiBtYXRjaFsxXSA9PT0geFR5cGU7XG4gICAgfVxuICB9XG4gIFMuaXMgPSBkZWYoJ2lzJywge30sIFtUeXBlUmVwKGEpLCAkLkFueSwgJC5Cb29sZWFuXSwgaXMpO1xuXG4gIC8vLiAjIyMgU2hvd2FibGVcblxuICAvLyMgdG9TdHJpbmcgOjogQW55IC0+IFN0cmluZ1xuICAvLy5cbiAgLy8uIEFsaWFzIG9mIFtgWi50b1N0cmluZ2BdW10uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRvU3RyaW5nKC0wKVxuICAvLy4gJy0wJ1xuICAvLy5cbiAgLy8uID4gUy50b1N0cmluZyhbJ2ZvbycsICdiYXInLCAnYmF6J10pXG4gIC8vLiAnW1wiZm9vXCIsIFwiYmFyXCIsIFwiYmF6XCJdJ1xuICAvLy5cbiAgLy8uID4gUy50b1N0cmluZyh7eDogMSwgeTogMiwgejogM30pXG4gIC8vLiAne1wieFwiOiAxLCBcInlcIjogMiwgXCJ6XCI6IDN9J1xuICAvLy5cbiAgLy8uID4gUy50b1N0cmluZyhTLkxlZnQoUy5SaWdodChTLkp1c3QoUy5Ob3RoaW5nKSkpKVxuICAvLy4gJ0xlZnQoUmlnaHQoSnVzdChOb3RoaW5nKSkpJ1xuICAvLy4gYGBgXG4gIFMudG9TdHJpbmcgPSBkZWYoJ3RvU3RyaW5nJywge30sIFskLkFueSwgJC5TdHJpbmddLCBaLnRvU3RyaW5nKTtcblxuICAvLy4gIyMjIEZhbnRhc3kgTGFuZFxuICAvLy5cbiAgLy8uIFNhbmN0dWFyeSBpcyBjb21wYXRpYmxlIHdpdGggdGhlIFtGYW50YXN5IExhbmRdW10gc3BlY2lmaWNhdGlvbi5cblxuICAvLyMgZXF1YWxzIDo6IFNldG9pZCBhID0+IGEgLT4gYSAtPiBCb29sZWFuXG4gIC8vLlxuICAvLy4gQ3VycmllZCB2ZXJzaW9uIG9mIFtgWi5lcXVhbHNgXVtdIHdoaWNoIHJlcXVpcmVzIHR3byBhcmd1bWVudHMgb2YgdGhlXG4gIC8vLiBzYW1lIHR5cGUuXG4gIC8vLlxuICAvLy4gVG8gY29tcGFyZSB2YWx1ZXMgb2YgZGlmZmVyZW50IHR5cGVzIGZpcnN0IHVzZSBbYGNyZWF0ZWBdKCNjcmVhdGUpIHRvXG4gIC8vLiBjcmVhdGUgYSBTYW5jdHVhcnkgbW9kdWxlIHdpdGggdHlwZSBjaGVja2luZyBkaXNhYmxlZCwgdGhlbiB1c2UgdGhhdFxuICAvLy4gbW9kdWxlJ3MgYGVxdWFsc2AgZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmVxdWFscygwLCAtMClcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMuZXF1YWxzKE5hTiwgTmFOKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5lcXVhbHMoUy5KdXN0KFsxLCAyLCAzXSksIFMuSnVzdChbMSwgMiwgM10pKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5lcXVhbHMoUy5KdXN0KFsxLCAyLCAzXSksIFMuSnVzdChbMSwgMiwgNF0pKVxuICAvLy4gZmFsc2VcbiAgLy8uIGBgYFxuICBTLmVxdWFscyA9IGRlZignZXF1YWxzJywge2E6IFtaLlNldG9pZF19LCBbYSwgYSwgJC5Cb29sZWFuXSwgWi5lcXVhbHMpO1xuXG4gIC8vIyBsdCA6OiBPcmQgYSA9PiBhIC0+IChhIC0+IEJvb2xlYW4pXG4gIC8vLlxuICAvLy4gUmV0dXJucyBgdHJ1ZWAgW2lmZl1bXSB0aGUgKnNlY29uZCogYXJndW1lbnQgaXMgbGVzcyB0aGFuIHRoZSBmaXJzdFxuICAvLy4gYWNjb3JkaW5nIHRvIFtgWi5sdGBdW10uIFRoZSBhcmd1bWVudHMgbXVzdCBiZSBwcm92aWRlZCBvbmUgYXQgYSB0aW1lLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgbHRfYF0oI2x0XykuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmZpbHRlcihTLmx0KDMpLCBbMSwgMiwgMywgNCwgNV0pXG4gIC8vLiBbMSwgMl1cbiAgLy8uIGBgYFxuICBTLmx0ID0gZGVmKCdsdCcsIHthOiBbWi5PcmRdfSwgW2EsICQuUHJlZGljYXRlKGEpXSwgZmxpcCQoWi5sdCkpO1xuXG4gIC8vIyBsdF8gOjogT3JkIGEgPT4gYSAtPiBhIC0+IEJvb2xlYW5cbiAgLy8uXG4gIC8vLiBSZXR1cm5zIGB0cnVlYCBbaWZmXVtdIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4gdGhlIHNlY29uZFxuICAvLy4gYWNjb3JkaW5nIHRvIFtgWi5sdGBdW10uXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BsdGBdKCNsdCkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmx0XyhbMSwgMiwgM10sIFsxLCAyLCAzXSlcbiAgLy8uIGZhbHNlXG4gIC8vLlxuICAvLy4gPiBTLmx0XyhbMSwgMiwgM10sIFsxLCAyLCA0XSlcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMubHRfKFsxLCAyLCAzXSwgWzEsIDJdKVxuICAvLy4gZmFsc2VcbiAgLy8uIGBgYFxuICBTLmx0XyA9IGRlZignbHRfJywge2E6IFtaLk9yZF19LCBbYSwgYSwgJC5Cb29sZWFuXSwgWi5sdCk7XG5cbiAgLy8jIGx0ZSA6OiBPcmQgYSA9PiBhIC0+IChhIC0+IEJvb2xlYW4pXG4gIC8vLlxuICAvLy4gUmV0dXJucyBgdHJ1ZWAgW2lmZl1bXSB0aGUgKnNlY29uZCogYXJndW1lbnQgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gIC8vLiB0aGUgZmlyc3QgYWNjb3JkaW5nIHRvIFtgWi5sdGVgXVtdLiBUaGUgYXJndW1lbnRzIG11c3QgYmUgcHJvdmlkZWQgb25lXG4gIC8vLiBhdCBhIHRpbWUuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BsdGVfYF0oI2x0ZV8pLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5maWx0ZXIoUy5sdGUoMyksIFsxLCAyLCAzLCA0LCA1XSlcbiAgLy8uIFsxLCAyLCAzXVxuICAvLy4gYGBgXG4gIFMubHRlID0gZGVmKCdsdGUnLCB7YTogW1ouT3JkXX0sIFthLCAkLlByZWRpY2F0ZShhKV0sIGZsaXAkKFoubHRlKSk7XG5cbiAgLy8jIGx0ZV8gOjogT3JkIGEgPT4gYSAtPiBhIC0+IEJvb2xlYW5cbiAgLy8uXG4gIC8vLiBSZXR1cm5zIGB0cnVlYCBbaWZmXVtdIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlXG4gIC8vLiBzZWNvbmQgYWNjb3JkaW5nIHRvIFtgWi5sdGVgXVtdLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgbHRlYF0oI2x0ZSkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmx0ZV8oWzEsIDIsIDNdLCBbMSwgMiwgM10pXG4gIC8vLiB0cnVlXG4gIC8vLlxuICAvLy4gPiBTLmx0ZV8oWzEsIDIsIDNdLCBbMSwgMiwgNF0pXG4gIC8vLiB0cnVlXG4gIC8vLlxuICAvLy4gPiBTLmx0ZV8oWzEsIDIsIDNdLCBbMSwgMl0pXG4gIC8vLiBmYWxzZVxuICAvLy4gYGBgXG4gIFMubHRlXyA9IGRlZignbHRlXycsIHthOiBbWi5PcmRdfSwgW2EsIGEsICQuQm9vbGVhbl0sIFoubHRlKTtcblxuICAvLyMgZ3QgOjogT3JkIGEgPT4gYSAtPiAoYSAtPiBCb29sZWFuKVxuICAvLy5cbiAgLy8uIFJldHVybnMgYHRydWVgIFtpZmZdW10gdGhlICpzZWNvbmQqIGFyZ3VtZW50IGlzIGdyZWF0ZXIgdGhhbiB0aGUgZmlyc3RcbiAgLy8uIGFjY29yZGluZyB0byBbYFouZ3RgXVtdLiBUaGUgYXJndW1lbnRzIG11c3QgYmUgcHJvdmlkZWQgb25lIGF0IGEgdGltZS5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYGd0X2BdKCNndF8pLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5maWx0ZXIoUy5ndCgzKSwgWzEsIDIsIDMsIDQsIDVdKVxuICAvLy4gWzQsIDVdXG4gIC8vLiBgYGBcbiAgUy5ndCA9IGRlZignZ3QnLCB7YTogW1ouT3JkXX0sIFthLCAkLlByZWRpY2F0ZShhKV0sIGZsaXAkKFouZ3QpKTtcblxuICAvLyMgZ3RfIDo6IE9yZCBhID0+IGEgLT4gYSAtPiBCb29sZWFuXG4gIC8vLlxuICAvLy4gUmV0dXJucyBgdHJ1ZWAgW2lmZl1bXSB0aGUgZmlyc3QgYXJndW1lbnQgaXMgZ3JlYXRlciB0aGFuIHRoZSBzZWNvbmRcbiAgLy8uIGFjY29yZGluZyB0byBbYFouZ3RgXVtdLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgZ3RgXSgjZ3QpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5ndF8oWzEsIDIsIDNdLCBbMSwgMiwgM10pXG4gIC8vLiBmYWxzZVxuICAvLy5cbiAgLy8uID4gUy5ndF8oWzEsIDIsIDNdLCBbMSwgMiwgNF0pXG4gIC8vLiBmYWxzZVxuICAvLy5cbiAgLy8uID4gUy5ndF8oWzEsIDIsIDNdLCBbMSwgMl0pXG4gIC8vLiB0cnVlXG4gIC8vLiBgYGBcbiAgUy5ndF8gPSBkZWYoJ2d0XycsIHthOiBbWi5PcmRdfSwgW2EsIGEsICQuQm9vbGVhbl0sIFouZ3QpO1xuXG4gIC8vIyBndGUgOjogT3JkIGEgPT4gYSAtPiAoYSAtPiBCb29sZWFuKVxuICAvLy5cbiAgLy8uIFJldHVybnMgYHRydWVgIFtpZmZdW10gdGhlICpzZWNvbmQqIGFyZ3VtZW50IGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbFxuICAvLy4gdG8gdGhlIGZpcnN0IGFjY29yZGluZyB0byBbYFouZ3RlYF1bXS4gVGhlIGFyZ3VtZW50cyBtdXN0IGJlIHByb3ZpZGVkXG4gIC8vLiBvbmUgYXQgYSB0aW1lLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgZ3RlX2BdKCNndGVfKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZmlsdGVyKFMuZ3RlKDMpLCBbMSwgMiwgMywgNCwgNV0pXG4gIC8vLiBbMywgNCwgNV1cbiAgLy8uIGBgYFxuICBTLmd0ZSA9IGRlZignZ3RlJywge2E6IFtaLk9yZF19LCBbYSwgJC5QcmVkaWNhdGUoYSldLCBmbGlwJChaLmd0ZSkpO1xuXG4gIC8vIyBndGVfIDo6IE9yZCBhID0+IGEgLT4gYSAtPiBCb29sZWFuXG4gIC8vLlxuICAvLy4gUmV0dXJucyBgdHJ1ZWAgW2lmZl1bXSB0aGUgZmlyc3QgYXJndW1lbnQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gIC8vLiB0aGUgc2Vjb25kIGFjY29yZGluZyB0byBbYFouZ3RlYF1bXS5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYGd0ZWBdKCNndGUpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5ndGVfKFsxLCAyLCAzXSwgWzEsIDIsIDNdKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5ndGVfKFsxLCAyLCAzXSwgWzEsIDIsIDRdKVxuICAvLy4gZmFsc2VcbiAgLy8uXG4gIC8vLiA+IFMuZ3RlXyhbMSwgMiwgM10sIFsxLCAyXSlcbiAgLy8uIHRydWVcbiAgLy8uIGBgYFxuICBTLmd0ZV8gPSBkZWYoJ2d0ZV8nLCB7YTogW1ouT3JkXX0sIFthLCBhLCAkLkJvb2xlYW5dLCBaLmd0ZSk7XG5cbiAgLy8jIG1pbiA6OiBPcmQgYSA9PiBhIC0+IGEgLT4gYVxuICAvLy5cbiAgLy8uIFJldHVybnMgdGhlIHNtYWxsZXIgb2YgaXRzIHR3byBhcmd1bWVudHMgKGFjY29yZGluZyB0byBbYFoubHRlYF1bXSkuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BtYXhgXSgjbWF4KS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMubWluKDEwLCAyKVxuICAvLy4gMlxuICAvLy5cbiAgLy8uID4gUy5taW4obmV3IERhdGUoJzE5OTktMTItMzEnKSwgbmV3IERhdGUoJzIwMDAtMDEtMDEnKSlcbiAgLy8uIG5ldyBEYXRlKCcxOTk5LTEyLTMxJylcbiAgLy8uXG4gIC8vLiA+IFMubWluKCcxMCcsICcyJylcbiAgLy8uICcxMCdcbiAgLy8uIGBgYFxuICBTLm1pbiA9IGRlZignbWluJywge2E6IFtaLk9yZF19LCBbYSwgYSwgYV0sIFoubWluKTtcblxuICAvLyMgbWF4IDo6IE9yZCBhID0+IGEgLT4gYSAtPiBhXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUgbGFyZ2VyIG9mIGl0cyB0d28gYXJndW1lbnRzIChhY2NvcmRpbmcgdG8gW2BaLmx0ZWBdW10pLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgbWluYF0oI21pbikuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm1heCgxMCwgMilcbiAgLy8uIDEwXG4gIC8vLlxuICAvLy4gPiBTLm1heChuZXcgRGF0ZSgnMTk5OS0xMi0zMScpLCBuZXcgRGF0ZSgnMjAwMC0wMS0wMScpKVxuICAvLy4gbmV3IERhdGUoJzIwMDAtMDEtMDEnKVxuICAvLy5cbiAgLy8uID4gUy5tYXgoJzEwJywgJzInKVxuICAvLy4gJzInXG4gIC8vLiBgYGBcbiAgUy5tYXggPSBkZWYoJ21heCcsIHthOiBbWi5PcmRdfSwgW2EsIGEsIGFdLCBaLm1heCk7XG5cbiAgLy8jIGlkIDo6IENhdGVnb3J5IGMgPT4gVHlwZVJlcCBjIC0+IGNcbiAgLy8uXG4gIC8vLiBbVHlwZS1zYWZlXVtzYW5jdHVhcnktZGVmXSB2ZXJzaW9uIG9mIFtgWi5pZGBdW10uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmlkKEZ1bmN0aW9uKSg0MilcbiAgLy8uIDQyXG4gIC8vLiBgYGBcbiAgUy5pZCA9IGRlZignaWQnLCB7YzogW1ouQ2F0ZWdvcnldfSwgW1R5cGVSZXAoYyksIGNdLCBaLmlkKTtcblxuICAvLyMgY29uY2F0IDo6IFNlbWlncm91cCBhID0+IGEgLT4gYSAtPiBhXG4gIC8vLlxuICAvLy4gQ3VycmllZCB2ZXJzaW9uIG9mIFtgWi5jb25jYXRgXVtdLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5jb25jYXQoJ2FiYycsICdkZWYnKVxuICAvLy4gJ2FiY2RlZidcbiAgLy8uXG4gIC8vLiA+IFMuY29uY2F0KFsxLCAyLCAzXSwgWzQsIDUsIDZdKVxuICAvLy4gWzEsIDIsIDMsIDQsIDUsIDZdXG4gIC8vLlxuICAvLy4gPiBTLmNvbmNhdCh7eDogMSwgeTogMn0sIHt5OiAzLCB6OiA0fSlcbiAgLy8uIHt4OiAxLCB5OiAzLCB6OiA0fVxuICAvLy5cbiAgLy8uID4gUy5jb25jYXQoUy5KdXN0KFsxLCAyLCAzXSksIFMuSnVzdChbNCwgNSwgNl0pKVxuICAvLy4gSnVzdChbMSwgMiwgMywgNCwgNSwgNl0pXG4gIC8vLlxuICAvLy4gPiBTLmNvbmNhdChTdW0oMTgpLCBTdW0oMjQpKVxuICAvLy4gU3VtKDQyKVxuICAvLy4gYGBgXG4gIFMuY29uY2F0ID0gZGVmKCdjb25jYXQnLCB7YTogW1ouU2VtaWdyb3VwXX0sIFthLCBhLCBhXSwgWi5jb25jYXQpO1xuXG4gIC8vIyBlbXB0eSA6OiBNb25vaWQgYSA9PiBUeXBlUmVwIGEgLT4gYVxuICAvLy5cbiAgLy8uIFtUeXBlLXNhZmVdW3NhbmN0dWFyeS1kZWZdIHZlcnNpb24gb2YgW2BaLmVtcHR5YF1bXS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZW1wdHkoU3RyaW5nKVxuICAvLy4gJydcbiAgLy8uXG4gIC8vLiA+IFMuZW1wdHkoQXJyYXkpXG4gIC8vLiBbXVxuICAvLy5cbiAgLy8uID4gUy5lbXB0eShPYmplY3QpXG4gIC8vLiB7fVxuICAvLy5cbiAgLy8uID4gUy5lbXB0eShTdW0pXG4gIC8vLiBTdW0oMClcbiAgLy8uIGBgYFxuICBTLmVtcHR5ID0gZGVmKCdlbXB0eScsIHthOiBbWi5Nb25vaWRdfSwgW1R5cGVSZXAoYSksIGFdLCBaLmVtcHR5KTtcblxuICAvLyMgaW52ZXJ0IDo6IEdyb3VwIGcgPT4gZyAtPiBnXG4gIC8vLlxuICAvLy4gW1R5cGUtc2FmZV1bc2FuY3R1YXJ5LWRlZl0gdmVyc2lvbiBvZiBbYFouaW52ZXJ0YF1bXS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuaW52ZXJ0KFN1bSg1KSlcbiAgLy8uIFN1bSgtNSlcbiAgLy8uIGBgYFxuICBTLmludmVydCA9IGRlZignaW52ZXJ0Jywge2c6IFtaLkdyb3VwXX0sIFtnLCBnXSwgWi5pbnZlcnQpO1xuXG4gIC8vIyBtYXAgOjogRnVuY3RvciBmID0+IChhIC0+IGIpIC0+IGYgYSAtPiBmIGJcbiAgLy8uXG4gIC8vLiBDdXJyaWVkIHZlcnNpb24gb2YgW2BaLm1hcGBdW10uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm1hcChNYXRoLnNxcnQsIFsxLCA0LCA5XSlcbiAgLy8uIFsxLCAyLCAzXVxuICAvLy5cbiAgLy8uID4gUy5tYXAoTWF0aC5zcXJ0LCB7eDogMSwgeTogNCwgejogOX0pXG4gIC8vLiB7eDogMSwgeTogMiwgejogM31cbiAgLy8uXG4gIC8vLiA+IFMubWFwKE1hdGguc3FydCwgUy5KdXN0KDkpKVxuICAvLy4gSnVzdCgzKVxuICAvLy5cbiAgLy8uID4gUy5tYXAoTWF0aC5zcXJ0LCBTLlJpZ2h0KDkpKVxuICAvLy4gUmlnaHQoMylcbiAgLy8uIGBgYFxuICAvLy5cbiAgLy8uIFJlcGxhY2luZyBgRnVuY3RvciBmID0+IGZgIHdpdGggYEZ1bmN0aW9uIHhgIHByb2R1Y2VzIHRoZSBCIGNvbWJpbmF0b3JcbiAgLy8uIGZyb20gY29tYmluYXRvcnkgbG9naWMgKGkuZS4gW2Bjb21wb3NlYF0oI2NvbXBvc2UpKTpcbiAgLy8uXG4gIC8vLiAgICAgRnVuY3RvciBmID0+IChhIC0+IGIpIC0+IGYgYSAtPiBmIGJcbiAgLy8uICAgICAoYSAtPiBiKSAtPiBGdW5jdGlvbiB4IGEgLT4gRnVuY3Rpb24geCBiXG4gIC8vLiAgICAgKGEgLT4gYykgLT4gRnVuY3Rpb24geCBhIC0+IEZ1bmN0aW9uIHggY1xuICAvLy4gICAgIChiIC0+IGMpIC0+IEZ1bmN0aW9uIHggYiAtPiBGdW5jdGlvbiB4IGNcbiAgLy8uICAgICAoYiAtPiBjKSAtPiBGdW5jdGlvbiBhIGIgLT4gRnVuY3Rpb24gYSBjXG4gIC8vLiAgICAgKGIgLT4gYykgLT4gKGEgLT4gYikgLT4gKGEgLT4gYylcbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMubWFwKE1hdGguc3FydCwgUy5hZGQoMSkpKDk5KVxuICAvLy4gMTBcbiAgLy8uIGBgYFxuICBTLm1hcCA9IGRlZignbWFwJywge2Y6IFtaLkZ1bmN0b3JdfSwgW0ZuKGEsIGIpLCBmKGEpLCBmKGIpXSwgWi5tYXApO1xuXG4gIC8vIyBiaW1hcCA6OiBCaWZ1bmN0b3IgZiA9PiAoYSAtPiBiKSAtPiAoYyAtPiBkKSAtPiBmIGEgYyAtPiBmIGIgZFxuICAvLy5cbiAgLy8uIEN1cnJpZWQgdmVyc2lvbiBvZiBbYFouYmltYXBgXVtdLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5iaW1hcChTLnRvVXBwZXIsIE1hdGguc3FydCwgUy5MZWZ0KCdmb28nKSlcbiAgLy8uIExlZnQoJ0ZPTycpXG4gIC8vLlxuICAvLy4gPiBTLmJpbWFwKFMudG9VcHBlciwgTWF0aC5zcXJ0LCBTLlJpZ2h0KDY0KSlcbiAgLy8uIFJpZ2h0KDgpXG4gIC8vLiBgYGBcbiAgUy5iaW1hcCA9XG4gIGRlZignYmltYXAnLFxuICAgICAge3A6IFtaLkJpZnVuY3Rvcl19LFxuICAgICAgW0ZuKGEsIGIpLCBGbihjLCBkKSwgcChhLCBjKSwgcChiLCBkKV0sXG4gICAgICBaLmJpbWFwKTtcblxuICAvLyMgcHJvbWFwIDo6IFByb2Z1bmN0b3IgcCA9PiAoYSAtPiBiKSAtPiAoYyAtPiBkKSAtPiBwIGIgYyAtPiBwIGEgZFxuICAvLy5cbiAgLy8uIEN1cnJpZWQgdmVyc2lvbiBvZiBbYFoucHJvbWFwYF1bXS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMucHJvbWFwKE1hdGguYWJzLCBTLmFkZCgxKSwgTWF0aC5zcXJ0KSgtMTAwKVxuICAvLy4gMTFcbiAgLy8uIGBgYFxuICBTLnByb21hcCA9XG4gIGRlZigncHJvbWFwJyxcbiAgICAgIHtwOiBbWi5Qcm9mdW5jdG9yXX0sXG4gICAgICBbRm4oYSwgYiksIEZuKGMsIGQpLCBwKGIsIGMpLCBwKGEsIGQpXSxcbiAgICAgIFoucHJvbWFwKTtcblxuICAvLyMgYWx0IDo6IEFsdCBmID0+IGYgYSAtPiBmIGEgLT4gZiBhXG4gIC8vLlxuICAvLy4gQ3VycmllZCB2ZXJzaW9uIG9mIFtgWi5hbHRgXVtdLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5hbHQoUy5Ob3RoaW5nLCBTLkp1c3QoMSkpXG4gIC8vLiBKdXN0KDEpXG4gIC8vLlxuICAvLy4gPiBTLmFsdChTLkp1c3QoMiksIFMuSnVzdCgzKSlcbiAgLy8uIEp1c3QoMilcbiAgLy8uXG4gIC8vLiA+IFMuYWx0KFMuTGVmdCgnWCcpLCBTLlJpZ2h0KDEpKVxuICAvLy4gUmlnaHQoMSlcbiAgLy8uXG4gIC8vLiA+IFMuYWx0KFMuUmlnaHQoMiksIFMuUmlnaHQoMykpXG4gIC8vLiBSaWdodCgyKVxuICAvLy4gYGBgXG4gIFMuYWx0ID0gZGVmKCdhbHQnLCB7ZjogW1ouQWx0XX0sIFtmKGEpLCBmKGEpLCBmKGEpXSwgWi5hbHQpO1xuXG4gIC8vIyB6ZXJvIDo6IFBsdXMgZiA9PiBUeXBlUmVwIGYgLT4gZiBhXG4gIC8vLlxuICAvLy4gW1R5cGUtc2FmZV1bc2FuY3R1YXJ5LWRlZl0gdmVyc2lvbiBvZiBbYFouemVyb2BdW10uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnplcm8oQXJyYXkpXG4gIC8vLiBbXVxuICAvLy5cbiAgLy8uID4gUy56ZXJvKE9iamVjdClcbiAgLy8uIHt9XG4gIC8vLlxuICAvLy4gPiBTLnplcm8oUy5NYXliZSlcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICBTLnplcm8gPVxuICBkZWYoJ3plcm8nLCB7ZjogW1ouUGx1c119LCBbVHlwZVJlcCgkLlR5cGVWYXJpYWJsZSgnZicpKSwgZihhKV0sIFouemVybyk7XG5cbiAgLy8jIHJlZHVjZSA6OiBGb2xkYWJsZSBmID0+IChiIC0+IGEgLT4gYikgLT4gYiAtPiBmIGEgLT4gYlxuICAvLy5cbiAgLy8uIFRha2VzIGEgY3VycmllZCBiaW5hcnkgZnVuY3Rpb24sIGFuIGluaXRpYWwgdmFsdWUsIGFuZCBhIFtGb2xkYWJsZV1bXSxcbiAgLy8uIGFuZCBhcHBsaWVzIHRoZSBmdW5jdGlvbiB0byB0aGUgaW5pdGlhbCB2YWx1ZSBhbmQgdGhlIEZvbGRhYmxlJ3MgZmlyc3RcbiAgLy8uIHZhbHVlLCB0aGVuIGFwcGxpZXMgdGhlIGZ1bmN0aW9uIHRvIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzXG4gIC8vLiBhcHBsaWNhdGlvbiBhbmQgdGhlIEZvbGRhYmxlJ3Mgc2Vjb25kIHZhbHVlLiBSZXBlYXRzIHRoaXMgcHJvY2Vzc1xuICAvLy4gdW50aWwgZWFjaCBvZiB0aGUgRm9sZGFibGUncyB2YWx1ZXMgaGFzIGJlZW4gdXNlZC4gUmV0dXJucyB0aGUgaW5pdGlhbFxuICAvLy4gdmFsdWUgaWYgdGhlIEZvbGRhYmxlIGlzIGVtcHR5OyB0aGUgcmVzdWx0IG9mIHRoZSBmaW5hbCBhcHBsaWNhdGlvblxuICAvLy4gb3RoZXJ3aXNlLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5yZWR1Y2UoUy5hZGQsIDAsIFsxLCAyLCAzLCA0LCA1XSlcbiAgLy8uIDE1XG4gIC8vLlxuICAvLy4gPiBTLnJlZHVjZSh4cyA9PiB4ID0+IFt4XS5jb25jYXQoeHMpLCBbXSwgWzEsIDIsIDMsIDQsIDVdKVxuICAvLy4gWzUsIDQsIDMsIDIsIDFdXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gcmVkdWNlKGYsIGluaXRpYWwsIGZvbGRhYmxlKSB7XG4gICAgcmV0dXJuIFoucmVkdWNlKHVuY3VycnkyKGYpLCBpbml0aWFsLCBmb2xkYWJsZSk7XG4gIH1cbiAgUy5yZWR1Y2UgPVxuICBkZWYoJ3JlZHVjZScsIHtmOiBbWi5Gb2xkYWJsZV19LCBbRm4oYSwgRm4oYiwgYSkpLCBhLCBmKGIpLCBhXSwgcmVkdWNlKTtcblxuICAvLyMgdHJhdmVyc2UgOjogKEFwcGxpY2F0aXZlIGYsIFRyYXZlcnNhYmxlIHQpID0+IFR5cGVSZXAgZiAtPiAoYSAtPiBmIGIpIC0+IHQgYSAtPiBmICh0IGIpXG4gIC8vLlxuICAvLy4gQ3VycmllZCB2ZXJzaW9uIG9mIFtgWi50cmF2ZXJzZWBdW10uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRyYXZlcnNlKEFycmF5LCBTLndvcmRzLCBTLkp1c3QoJ2ZvbyBiYXIgYmF6JykpXG4gIC8vLiBbSnVzdCgnZm9vJyksIEp1c3QoJ2JhcicpLCBKdXN0KCdiYXonKV1cbiAgLy8uXG4gIC8vLiA+IFMudHJhdmVyc2UoQXJyYXksIFMud29yZHMsIFMuTm90aGluZylcbiAgLy8uIFtOb3RoaW5nXVxuICAvLy5cbiAgLy8uID4gUy50cmF2ZXJzZShTLk1heWJlLCBTLnBhcnNlSW50KDE2KSwgWydBJywgJ0InLCAnQyddKVxuICAvLy4gSnVzdChbMTAsIDExLCAxMl0pXG4gIC8vLlxuICAvLy4gPiBTLnRyYXZlcnNlKFMuTWF5YmUsIFMucGFyc2VJbnQoMTYpLCBbJ0EnLCAnQicsICdDJywgJ1gnXSlcbiAgLy8uIE5vdGhpbmdcbiAgLy8uXG4gIC8vLiA+IFMudHJhdmVyc2UoUy5NYXliZSwgUy5wYXJzZUludCgxNiksIHthOiAnQScsIGI6ICdCJywgYzogJ0MnfSlcbiAgLy8uIEp1c3Qoe2E6IDEwLCBiOiAxMSwgYzogMTJ9KVxuICAvLy5cbiAgLy8uID4gUy50cmF2ZXJzZShTLk1heWJlLCBTLnBhcnNlSW50KDE2KSwge2E6ICdBJywgYjogJ0InLCBjOiAnQycsIHg6ICdYJ30pXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgUy50cmF2ZXJzZSA9XG4gIGRlZigndHJhdmVyc2UnLFxuICAgICAge2Y6IFtaLkFwcGxpY2F0aXZlXSwgdDogW1ouVHJhdmVyc2FibGVdfSxcbiAgICAgIFtUeXBlUmVwKCQuVHlwZVZhcmlhYmxlKCdmJykpLCBGbihhLCBmKGIpKSwgdChhKSwgZih0KGIpKV0sXG4gICAgICBaLnRyYXZlcnNlKTtcblxuICAvLyMgc2VxdWVuY2UgOjogKEFwcGxpY2F0aXZlIGYsIFRyYXZlcnNhYmxlIHQpID0+IFR5cGVSZXAgZiAtPiB0IChmIGEpIC0+IGYgKHQgYSlcbiAgLy8uXG4gIC8vLiBDdXJyaWVkIHZlcnNpb24gb2YgW2BaLnNlcXVlbmNlYF1bXS4gSW52ZXJ0cyB0aGUgZ2l2ZW4gYHQgKGYgYSlgXG4gIC8vLiB0byBwcm9kdWNlIGFuIGBmICh0IGEpYC5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuc2VxdWVuY2UoQXJyYXksIFMuSnVzdChbMSwgMiwgM10pKVxuICAvLy4gW0p1c3QoMSksIEp1c3QoMiksIEp1c3QoMyldXG4gIC8vLlxuICAvLy4gPiBTLnNlcXVlbmNlKFMuTWF5YmUsIFtTLkp1c3QoMSksIFMuSnVzdCgyKSwgUy5KdXN0KDMpXSlcbiAgLy8uIEp1c3QoWzEsIDIsIDNdKVxuICAvLy5cbiAgLy8uID4gUy5zZXF1ZW5jZShTLk1heWJlLCBbUy5KdXN0KDEpLCBTLkp1c3QoMiksIFMuTm90aGluZ10pXG4gIC8vLiBOb3RoaW5nXG4gIC8vLlxuICAvLy4gPiBTLnNlcXVlbmNlKFMuTWF5YmUsIHthOiBTLkp1c3QoMSksIGI6IFMuSnVzdCgyKSwgYzogUy5KdXN0KDMpfSlcbiAgLy8uIEp1c3Qoe2E6IDEsIGI6IDIsIGM6IDN9KVxuICAvLy5cbiAgLy8uID4gUy5zZXF1ZW5jZShTLk1heWJlLCB7YTogUy5KdXN0KDEpLCBiOiBTLkp1c3QoMiksIGM6IFMuTm90aGluZ30pXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgUy5zZXF1ZW5jZSA9XG4gIGRlZignc2VxdWVuY2UnLFxuICAgICAge2Y6IFtaLkFwcGxpY2F0aXZlXSwgdDogW1ouVHJhdmVyc2FibGVdfSxcbiAgICAgIFtUeXBlUmVwKCQuVHlwZVZhcmlhYmxlKCdmJykpLCB0KGYoYSkpLCBmKHQoYSkpXSxcbiAgICAgIFouc2VxdWVuY2UpO1xuXG4gIC8vIyBhcCA6OiBBcHBseSBmID0+IGYgKGEgLT4gYikgLT4gZiBhIC0+IGYgYlxuICAvLy5cbiAgLy8uIEN1cnJpZWQgdmVyc2lvbiBvZiBbYFouYXBgXVtdLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5hcChbTWF0aC5zcXJ0LCB4ID0+IHggKiB4XSwgWzEsIDQsIDksIDE2LCAyNV0pXG4gIC8vLiBbMSwgMiwgMywgNCwgNSwgMSwgMTYsIDgxLCAyNTYsIDYyNV1cbiAgLy8uXG4gIC8vLiA+IFMuYXAoe3g6IE1hdGguc3FydCwgeTogUy5hZGQoMSksIHo6IFMuc3ViKDEpfSwge3c6IDQsIHg6IDQsIHk6IDR9KVxuICAvLy4ge3g6IDIsIHk6IDV9XG4gIC8vLlxuICAvLy4gPiBTLmFwKFMuSnVzdChNYXRoLnNxcnQpLCBTLkp1c3QoNjQpKVxuICAvLy4gSnVzdCg4KVxuICAvLy4gYGBgXG4gIC8vLlxuICAvLy4gUmVwbGFjaW5nIGBBcHBseSBmID0+IGZgIHdpdGggYEZ1bmN0aW9uIHhgIHByb2R1Y2VzIHRoZSBTIGNvbWJpbmF0b3JcbiAgLy8uIGZyb20gY29tYmluYXRvcnkgbG9naWM6XG4gIC8vLlxuICAvLy4gICAgIEFwcGx5IGYgPT4gZiAoYSAtPiBiKSAtPiBmIGEgLT4gZiBiXG4gIC8vLiAgICAgRnVuY3Rpb24geCAoYSAtPiBiKSAtPiBGdW5jdGlvbiB4IGEgLT4gRnVuY3Rpb24geCBiXG4gIC8vLiAgICAgRnVuY3Rpb24geCAoYSAtPiBjKSAtPiBGdW5jdGlvbiB4IGEgLT4gRnVuY3Rpb24geCBjXG4gIC8vLiAgICAgRnVuY3Rpb24geCAoYiAtPiBjKSAtPiBGdW5jdGlvbiB4IGIgLT4gRnVuY3Rpb24geCBjXG4gIC8vLiAgICAgRnVuY3Rpb24gYSAoYiAtPiBjKSAtPiBGdW5jdGlvbiBhIGIgLT4gRnVuY3Rpb24gYSBjXG4gIC8vLiAgICAgKGEgLT4gYiAtPiBjKSAtPiAoYSAtPiBiKSAtPiAoYSAtPiBjKVxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5hcChzID0+IG4gPT4gcy5zbGljZSgwLCBuKSwgcyA9PiBNYXRoLmNlaWwocy5sZW5ndGggLyAyKSkoJ0hhc2tlbGwnKVxuICAvLy4gJ0hhc2snXG4gIC8vLiBgYGBcbiAgUy5hcCA9XG4gIGRlZignYXAnLFxuICAgICAge2Y6IFtaLkFwcGx5XX0sXG4gICAgICBbZihGbihhLCBiKSksIGYoYSksIGYoYildLFxuICAgICAgWi5hcCk7XG5cbiAgLy8jIGxpZnQyIDo6IEFwcGx5IGYgPT4gKGEgLT4gYiAtPiBjKSAtPiBmIGEgLT4gZiBiIC0+IGYgY1xuICAvLy5cbiAgLy8uIFByb21vdGVzIGEgY3VycmllZCBiaW5hcnkgZnVuY3Rpb24gdG8gYSBmdW5jdGlvbiB3aGljaCBvcGVyYXRlcyBvbiB0d29cbiAgLy8uIFtBcHBseV1bXXMuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmxpZnQyKFMuYWRkLCBTLkp1c3QoMiksIFMuSnVzdCgzKSlcbiAgLy8uIEp1c3QoNSlcbiAgLy8uXG4gIC8vLiA+IFMubGlmdDIoUy5hZGQsIFMuSnVzdCgyKSwgUy5Ob3RoaW5nKVxuICAvLy4gTm90aGluZ1xuICAvLy5cbiAgLy8uID4gUy5saWZ0MihTLmFuZCwgUy5KdXN0KHRydWUpLCBTLkp1c3QodHJ1ZSkpXG4gIC8vLiBKdXN0KHRydWUpXG4gIC8vLlxuICAvLy4gPiBTLmxpZnQyKFMuYW5kLCBTLkp1c3QodHJ1ZSksIFMuSnVzdChmYWxzZSkpXG4gIC8vLiBKdXN0KGZhbHNlKVxuICAvLy4gYGBgXG4gIFMubGlmdDIgPVxuICBkZWYoJ2xpZnQyJywge2Y6IFtaLkFwcGx5XX0sIFtGbihhLCBGbihiLCBjKSksIGYoYSksIGYoYiksIGYoYyldLCBaLmxpZnQyKTtcblxuICAvLyMgbGlmdDMgOjogQXBwbHkgZiA9PiAoYSAtPiBiIC0+IGMgLT4gZCkgLT4gZiBhIC0+IGYgYiAtPiBmIGMgLT4gZiBkXG4gIC8vLlxuICAvLy4gUHJvbW90ZXMgYSBjdXJyaWVkIHRlcm5hcnkgZnVuY3Rpb24gdG8gYSBmdW5jdGlvbiB3aGljaCBvcGVyYXRlcyBvbiB0aHJlZVxuICAvLy4gW0FwcGx5XVtdcy5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMubGlmdDMoUy5yZWR1Y2UsIFMuSnVzdChTLmFkZCksIFMuSnVzdCgwKSwgUy5KdXN0KFsxLCAyLCAzXSkpXG4gIC8vLiBKdXN0KDYpXG4gIC8vLlxuICAvLy4gPiBTLmxpZnQzKFMucmVkdWNlLCBTLkp1c3QoUy5hZGQpLCBTLkp1c3QoMCksIFMuTm90aGluZylcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICBTLmxpZnQzID1cbiAgZGVmKCdsaWZ0MycsXG4gICAgICB7ZjogW1ouQXBwbHldfSxcbiAgICAgIFtGbihhLCBGbihiLCBGbihjLCBkKSkpLCBmKGEpLCBmKGIpLCBmKGMpLCBmKGQpXSxcbiAgICAgIFoubGlmdDMpO1xuXG4gIC8vIyBhcEZpcnN0IDo6IEFwcGx5IGYgPT4gZiBhIC0+IGYgYiAtPiBmIGFcbiAgLy8uXG4gIC8vLiBDdXJyaWVkIHZlcnNpb24gb2YgW2BaLmFwRmlyc3RgXVtdLiBDb21iaW5lcyB0d28gZWZmZWN0ZnVsIGFjdGlvbnMsXG4gIC8vLiBrZWVwaW5nIG9ubHkgdGhlIHJlc3VsdCBvZiB0aGUgZmlyc3QuIEVxdWl2YWxlbnQgdG8gSGFza2VsbCdzIGAoPCopYFxuICAvLy4gZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BhcFNlY29uZGBdKCNhcFNlY29uZCkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmFwRmlyc3QoWzEsIDJdLCBbMywgNF0pXG4gIC8vLiBbMSwgMSwgMiwgMl1cbiAgLy8uXG4gIC8vLiA+IFMuYXBGaXJzdChTLkp1c3QoMSksIFMuSnVzdCgyKSlcbiAgLy8uIEp1c3QoMSlcbiAgLy8uIGBgYFxuICBTLmFwRmlyc3QgPSBkZWYoJ2FwRmlyc3QnLCB7ZjogW1ouQXBwbHldfSwgW2YoYSksIGYoYiksIGYoYSldLCBaLmFwRmlyc3QpO1xuXG4gIC8vIyBhcFNlY29uZCA6OiBBcHBseSBmID0+IGYgYSAtPiBmIGIgLT4gZiBiXG4gIC8vLlxuICAvLy4gQ3VycmllZCB2ZXJzaW9uIG9mIFtgWi5hcFNlY29uZGBdW10uIENvbWJpbmVzIHR3byBlZmZlY3RmdWwgYWN0aW9ucyxcbiAgLy8uIGtlZXBpbmcgb25seSB0aGUgcmVzdWx0IG9mIHRoZSBzZWNvbmQuIEVxdWl2YWxlbnQgdG8gSGFza2VsbCdzIGAoKj4pYFxuICAvLy4gZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BhcEZpcnN0YF0oI2FwRmlyc3QpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5hcFNlY29uZChbMSwgMl0sIFszLCA0XSlcbiAgLy8uIFszLCA0LCAzLCA0XVxuICAvLy5cbiAgLy8uID4gUy5hcFNlY29uZChTLkp1c3QoMSksIFMuSnVzdCgyKSlcbiAgLy8uIEp1c3QoMilcbiAgLy8uIGBgYFxuICBTLmFwU2Vjb25kID0gZGVmKCdhcFNlY29uZCcsIHtmOiBbWi5BcHBseV19LCBbZihhKSwgZihiKSwgZihiKV0sIFouYXBTZWNvbmQpO1xuXG4gIC8vIyBvZiA6OiBBcHBsaWNhdGl2ZSBmID0+IFR5cGVSZXAgZiAtPiBhIC0+IGYgYVxuICAvLy5cbiAgLy8uIEN1cnJpZWQgdmVyc2lvbiBvZiBbYFoub2ZgXVtdLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5vZihBcnJheSwgNDIpXG4gIC8vLiBbNDJdXG4gIC8vLlxuICAvLy4gPiBTLm9mKEZ1bmN0aW9uLCA0MikobnVsbClcbiAgLy8uIDQyXG4gIC8vLlxuICAvLy4gPiBTLm9mKFMuTWF5YmUsIDQyKVxuICAvLy4gSnVzdCg0MilcbiAgLy8uXG4gIC8vLiA+IFMub2YoUy5FaXRoZXIsIDQyKVxuICAvLy4gUmlnaHQoNDIpXG4gIC8vLiBgYGBcbiAgUy5vZiA9XG4gIGRlZignb2YnLFxuICAgICAge2Y6IFtaLkFwcGxpY2F0aXZlXX0sXG4gICAgICBbVHlwZVJlcCgkLlR5cGVWYXJpYWJsZSgnZicpKSwgYSwgZihhKV0sXG4gICAgICBaLm9mKTtcblxuICAvLyMgY2hhaW4gOjogQ2hhaW4gbSA9PiAoYSAtPiBtIGIpIC0+IG0gYSAtPiBtIGJcbiAgLy8uXG4gIC8vLiBDdXJyaWVkIHZlcnNpb24gb2YgW2BaLmNoYWluYF1bXS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuY2hhaW4oeCA9PiBbeCwgeF0sIFsxLCAyLCAzXSlcbiAgLy8uIFsxLCAxLCAyLCAyLCAzLCAzXVxuICAvLy5cbiAgLy8uID4gUy5jaGFpbihuID0+IHMgPT4gcy5zbGljZSgwLCBuKSwgcyA9PiBNYXRoLmNlaWwocy5sZW5ndGggLyAyKSkoJ3NsaWNlJylcbiAgLy8uICdzbGknXG4gIC8vLlxuICAvLy4gPiBTLmNoYWluKFMucGFyc2VJbnQoMTApLCBTLkp1c3QoJzEyMycpKVxuICAvLy4gSnVzdCgxMjMpXG4gIC8vLlxuICAvLy4gPiBTLmNoYWluKFMucGFyc2VJbnQoMTApLCBTLkp1c3QoJ1hYWCcpKVxuICAvLy4gTm90aGluZ1xuICAvLy4gYGBgXG4gIFMuY2hhaW4gPSBkZWYoJ2NoYWluJywge206IFtaLkNoYWluXX0sIFtGbihhLCBtKGIpKSwgbShhKSwgbShiKV0sIFouY2hhaW4pO1xuXG4gIC8vIyBqb2luIDo6IENoYWluIG0gPT4gbSAobSBhKSAtPiBtIGFcbiAgLy8uXG4gIC8vLiBbVHlwZS1zYWZlXVtzYW5jdHVhcnktZGVmXSB2ZXJzaW9uIG9mIFtgWi5qb2luYF1bXS5cbiAgLy8uIFJlbW92ZXMgb25lIGxldmVsIG9mIG5lc3RpbmcgZnJvbSBhIG5lc3RlZCBtb25hZGljIHN0cnVjdHVyZS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuam9pbihbWzFdLCBbMl0sIFszXV0pXG4gIC8vLiBbMSwgMiwgM11cbiAgLy8uXG4gIC8vLiA+IFMuam9pbihbW1sxLCAyLCAzXV1dKVxuICAvLy4gW1sxLCAyLCAzXV1cbiAgLy8uXG4gIC8vLiA+IFMuam9pbihTLkp1c3QoUy5KdXN0KDEpKSlcbiAgLy8uIFMuSnVzdCgxKVxuICAvLy4gYGBgXG4gIC8vLlxuICAvLy4gUmVwbGFjaW5nIGBDaGFpbiBtID0+IG1gIHdpdGggYEZ1bmN0aW9uIHhgIHByb2R1Y2VzIHRoZSBXIGNvbWJpbmF0b3JcbiAgLy8uIGZyb20gY29tYmluYXRvcnkgbG9naWM6XG4gIC8vLlxuICAvLy4gICAgIENoYWluIG0gPT4gbSAobSBhKSAtPiBtIGFcbiAgLy8uICAgICBGdW5jdGlvbiB4IChGdW5jdGlvbiB4IGEpIC0+IEZ1bmN0aW9uIHggYVxuICAvLy4gICAgICh4IC0+IHggLT4gYSkgLT4gKHggLT4gYSlcbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuam9pbihTLmNvbmNhdCkoJ2FiYycpXG4gIC8vLiAnYWJjYWJjJ1xuICAvLy4gYGBgXG4gIFMuam9pbiA9IGRlZignam9pbicsIHttOiBbWi5DaGFpbl19LCBbbShtKGEpKSwgbShhKV0sIFouam9pbik7XG5cbiAgLy8jIGNoYWluUmVjIDo6IENoYWluUmVjIG0gPT4gVHlwZVJlcCBtIC0+IChhIC0+IG0gKEVpdGhlciBhIGIpKSAtPiBhIC0+IG0gYlxuICAvLy5cbiAgLy8uIFBlcmZvcm1zIGEgW2BjaGFpbmBdKCNjaGFpbiktbGlrZSBjb21wdXRhdGlvbiB3aXRoIGNvbnN0YW50IHN0YWNrIHVzYWdlLlxuICAvLy4gU2ltaWxhciB0byBbYFouY2hhaW5SZWNgXVtdLCBidXQgY3VycmllZCBhbmQgbW9yZSBjb252ZW5pZW50IGR1ZSB0byB0aGVcbiAgLy8uIHVzZSBvZiB0aGUgRWl0aGVyIHR5cGUgdG8gaW5kaWNhdGUgY29tcGxldGlvbiAodmlhIGEgUmlnaHQpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5jaGFpblJlYyhBcnJheSxcbiAgLy8uIC4gICAgICAgICAgICBzID0+IHMubGVuZ3RoID09PSAyID8gUy5tYXAoUy5SaWdodCwgW3MgKyAnIScsIHMgKyAnPyddKVxuICAvLy4gLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBTLm1hcChTLkxlZnQsIFtzICsgJ28nLCBzICsgJ24nXSksXG4gIC8vLiAuICAgICAgICAgICAgJycpXG4gIC8vLiBbJ29vIScsICdvbz8nLCAnb24hJywgJ29uPycsICdubyEnLCAnbm8/JywgJ25uIScsICdubj8nXVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGNoYWluUmVjKHR5cGVSZXAsIGYsIHgpIHtcbiAgICBmdW5jdGlvbiBzdGVwKG5leHQsIGRvbmUsIHgpIHtcbiAgICAgIHJldHVybiBaLm1hcChmdW5jdGlvbihlKSB7IHJldHVybiBlaXRoZXIobmV4dCwgZG9uZSwgZSk7IH0sIGYoeCkpO1xuICAgIH1cbiAgICByZXR1cm4gWi5jaGFpblJlYyh0eXBlUmVwLCBzdGVwLCB4KTtcbiAgfVxuICBTLmNoYWluUmVjID1cbiAgZGVmKCdjaGFpblJlYycsXG4gICAgICB7bTogW1ouQ2hhaW5SZWNdfSxcbiAgICAgIFtUeXBlUmVwKCQuVHlwZVZhcmlhYmxlKCdtJykpLCBGbihhLCBtKCRFaXRoZXIoYSwgYikpKSwgYSwgbShiKV0sXG4gICAgICBjaGFpblJlYyk7XG5cbiAgLy8jIGV4dGVuZCA6OiBFeHRlbmQgdyA9PiAodyBhIC0+IGIpIC0+IHcgYSAtPiB3IGJcbiAgLy8uXG4gIC8vLiBDdXJyaWVkIHZlcnNpb24gb2YgW2BaLmV4dGVuZGBdW10uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmV4dGVuZChTLmpvaW5XaXRoKCcnKSwgWyd4JywgJ3knLCAneiddKVxuICAvLy4gWyd4eXonLCAneXonLCAneiddXG4gIC8vLiBgYGBcbiAgUy5leHRlbmQgPVxuICBkZWYoJ2V4dGVuZCcsIHt3OiBbWi5FeHRlbmRdfSwgW0ZuKHcoYSksIGIpLCB3KGEpLCB3KGIpXSwgWi5leHRlbmQpO1xuXG4gIC8vIyBleHRyYWN0IDo6IENvbW9uYWQgdyA9PiB3IGEgLT4gYVxuICAvLy5cbiAgLy8uIFtUeXBlLXNhZmVdW3NhbmN0dWFyeS1kZWZdIHZlcnNpb24gb2YgW2BaLmV4dHJhY3RgXVtdLlxuICBTLmV4dHJhY3QgPVxuICBkZWYoJ2V4dHJhY3QnLCB7dzogW1ouQ29tb25hZF19LCBbdyhhKSwgYV0sIFouZXh0cmFjdCk7XG5cbiAgLy8jIGNvbnRyYW1hcCA6OiBDb250cmF2YXJpYW50IGYgPT4gKGIgLT4gYSkgLT4gZiBhIC0+IGYgYlxuICAvLy5cbiAgLy8uIFtUeXBlLXNhZmVdW3NhbmN0dWFyeS1kZWZdIHZlcnNpb24gb2YgW2BaLmNvbnRyYW1hcGBdW10uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmNvbnRyYW1hcChzID0+IHMubGVuZ3RoLCBNYXRoLnNxcnQpKCdTYW5jdHVhcnknKVxuICAvLy4gM1xuICAvLy4gYGBgXG4gIFMuY29udHJhbWFwID1cbiAgZGVmKCdjb250cmFtYXAnLFxuICAgICAge2Y6IFtaLkNvbnRyYXZhcmlhbnRdfSxcbiAgICAgIFtGbihiLCBhKSwgZihhKSwgZihiKV0sXG4gICAgICBaLmNvbnRyYW1hcCk7XG5cbiAgLy8jIGZpbHRlciA6OiAoQXBwbGljYXRpdmUgZiwgRm9sZGFibGUgZiwgTW9ub2lkIChmIGEpKSA9PiAoYSAtPiBCb29sZWFuKSAtPiBmIGEgLT4gZiBhXG4gIC8vLlxuICAvLy4gQ3VycmllZCB2ZXJzaW9uIG9mIFtgWi5maWx0ZXJgXVtdLiBGaWx0ZXJzIGl0cyBzZWNvbmQgYXJndW1lbnQgaW5cbiAgLy8uIGFjY29yZGFuY2Ugd2l0aCB0aGUgZ2l2ZW4gcHJlZGljYXRlLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgZmlsdGVyTWBdKCNmaWx0ZXJNKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZmlsdGVyKFMub2RkLCBbMSwgMiwgMywgNCwgNV0pXG4gIC8vLiBbMSwgMywgNV1cbiAgLy8uIGBgYFxuICBTLmZpbHRlciA9XG4gIGRlZignZmlsdGVyJyxcbiAgICAgIHtmOiBbWi5BcHBsaWNhdGl2ZSwgWi5Gb2xkYWJsZSwgWi5Nb25vaWRdfSxcbiAgICAgIFskLlByZWRpY2F0ZShhKSwgZihhKSwgZihhKV0sXG4gICAgICBaLmZpbHRlcik7XG5cbiAgLy8jIGZpbHRlck0gOjogKEFsdGVybmF0aXZlIG0sIE1vbmFkIG0pID0+IChhIC0+IEJvb2xlYW4pIC0+IG0gYSAtPiBtIGFcbiAgLy8uXG4gIC8vLiBDdXJyaWVkIHZlcnNpb24gb2YgW2BaLmZpbHRlck1gXVtdLiBGaWx0ZXJzIGl0cyBzZWNvbmQgYXJndW1lbnQgaW5cbiAgLy8uIGFjY29yZGFuY2Ugd2l0aCB0aGUgZ2l2ZW4gcHJlZGljYXRlLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgZmlsdGVyYF0oI2ZpbHRlcikuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmZpbHRlck0oUy5vZGQsIFsxLCAyLCAzLCA0LCA1XSlcbiAgLy8uIFsxLCAzLCA1XVxuICAvLy5cbiAgLy8uID4gUy5maWx0ZXJNKFMub2RkLCBTLkp1c3QoOSkpXG4gIC8vLiBKdXN0KDkpXG4gIC8vLlxuICAvLy4gPiBTLmZpbHRlck0oUy5vZGQsIFMuSnVzdCg0KSlcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICBTLmZpbHRlck0gPVxuICBkZWYoJ2ZpbHRlck0nLFxuICAgICAge206IFtaLkFsdGVybmF0aXZlLCBaLk1vbmFkXX0sXG4gICAgICBbJC5QcmVkaWNhdGUoYSksIG0oYSksIG0oYSldLFxuICAgICAgWi5maWx0ZXJNKTtcblxuICAvLyMgdGFrZVdoaWxlIDo6IChGb2xkYWJsZSBmLCBBbHRlcm5hdGl2ZSBmKSA9PiAoYSAtPiBCb29sZWFuKSAtPiBmIGEgLT4gZiBhXG4gIC8vLlxuICAvLy4gRGlzY2FyZHMgdGhlIGZpcnN0IGlubmVyIHZhbHVlIHdoaWNoIGRvZXMgbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZSwgYW5kXG4gIC8vLiBhbGwgc3Vic2VxdWVudCBpbm5lciB2YWx1ZXMuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRha2VXaGlsZShTLm9kZCwgWzMsIDMsIDMsIDcsIDYsIDMsIDUsIDRdKVxuICAvLy4gWzMsIDMsIDMsIDddXG4gIC8vLlxuICAvLy4gPiBTLnRha2VXaGlsZShTLmV2ZW4sIFszLCAzLCAzLCA3LCA2LCAzLCA1LCA0XSlcbiAgLy8uIFtdXG4gIC8vLiBgYGBcbiAgUy50YWtlV2hpbGUgPVxuICBkZWYoJ3Rha2VXaGlsZScsXG4gICAgICB7ZjogW1ouRm9sZGFibGUsIFouQWx0ZXJuYXRpdmVdfSxcbiAgICAgIFskLlByZWRpY2F0ZShhKSwgZihhKSwgZihhKV0sXG4gICAgICBaLnRha2VXaGlsZSk7XG5cbiAgLy8jIGRyb3BXaGlsZSA6OiAoRm9sZGFibGUgZiwgQWx0ZXJuYXRpdmUgZikgPT4gKGEgLT4gQm9vbGVhbikgLT4gZiBhIC0+IGYgYVxuICAvLy5cbiAgLy8uIFJldGFpbnMgdGhlIGZpcnN0IGlubmVyIHZhbHVlIHdoaWNoIGRvZXMgbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZSwgYW5kXG4gIC8vLiBhbGwgc3Vic2VxdWVudCBpbm5lciB2YWx1ZXMuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmRyb3BXaGlsZShTLm9kZCwgWzMsIDMsIDMsIDcsIDYsIDMsIDUsIDRdKVxuICAvLy4gWzYsIDMsIDUsIDRdXG4gIC8vLlxuICAvLy4gPiBTLmRyb3BXaGlsZShTLmV2ZW4sIFszLCAzLCAzLCA3LCA2LCAzLCA1LCA0XSlcbiAgLy8uIFszLCAzLCAzLCA3LCA2LCAzLCA1LCA0XVxuICAvLy4gYGBgXG4gIFMuZHJvcFdoaWxlID1cbiAgZGVmKCdkcm9wV2hpbGUnLFxuICAgICAge2Y6IFtaLkZvbGRhYmxlLCBaLkFsdGVybmF0aXZlXX0sXG4gICAgICBbJC5QcmVkaWNhdGUoYSksIGYoYSksIGYoYSldLFxuICAgICAgWi5kcm9wV2hpbGUpO1xuXG4gIC8vLiAjIyMgQ29tYmluYXRvclxuXG4gIC8vIyBJIDo6IGEgLT4gYVxuICAvLy5cbiAgLy8uIFRoZSBJIGNvbWJpbmF0b3IuIFJldHVybnMgaXRzIGFyZ3VtZW50LiBFcXVpdmFsZW50IHRvIEhhc2tlbGwncyBgaWRgXG4gIC8vLiBmdW5jdGlvbi5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuSSgnZm9vJylcbiAgLy8uICdmb28nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gSSh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbiAgUy5JID0gZGVmKCdJJywge30sIFthLCBhXSwgSSk7XG5cbiAgLy8jIEsgOjogYSAtPiBiIC0+IGFcbiAgLy8uXG4gIC8vLiBUaGUgSyBjb21iaW5hdG9yLiBUYWtlcyB0d28gdmFsdWVzIGFuZCByZXR1cm5zIHRoZSBmaXJzdC4gRXF1aXZhbGVudCB0b1xuICAvLy4gSGFza2VsbCdzIGBjb25zdGAgZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLksoJ2ZvbycsICdiYXInKVxuICAvLy4gJ2ZvbydcbiAgLy8uXG4gIC8vLiA+IFMubWFwKFMuSyg0MiksIFMucmFuZ2UoMCwgNSkpXG4gIC8vLiBbNDIsIDQyLCA0MiwgNDIsIDQyXVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIEsoeCwgeSkge1xuICAgIHJldHVybiB4O1xuICB9XG4gIFMuSyA9IGRlZignSycsIHt9LCBbYSwgYiwgYV0sIEspO1xuXG4gIC8vIyBBIDo6IChhIC0+IGIpIC0+IGEgLT4gYlxuICAvLy5cbiAgLy8uIFRoZSBBIGNvbWJpbmF0b3IuIFRha2VzIGEgZnVuY3Rpb24gYW5kIGEgdmFsdWUsIGFuZCByZXR1cm5zIHRoZSByZXN1bHRcbiAgLy8uIG9mIGFwcGx5aW5nIHRoZSBmdW5jdGlvbiB0byB0aGUgdmFsdWUuIEVxdWl2YWxlbnQgdG8gSGFza2VsbCdzIGAoJClgXG4gIC8vLiBmdW5jdGlvbi5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuQShTLmFkZCgxKSwgNDIpXG4gIC8vLiA0M1xuICAvLy5cbiAgLy8uID4gUy5tYXAoUy5BKFMuX18sIDEwMCksIFtTLmFkZCgxKSwgTWF0aC5zcXJ0XSlcbiAgLy8uIFsxMDEsIDEwXVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIEEoZiwgeCkge1xuICAgIHJldHVybiBmKHgpO1xuICB9XG4gIFMuQSA9IGRlZignQScsIHt9LCBbRm4oYSwgYiksIGEsIGJdLCBBKTtcblxuICAvLyMgVCA6OiBhIC0+IChhIC0+IGIpIC0+IGJcbiAgLy8uXG4gIC8vLiBUaGUgVCAoW3RocnVzaF1bXSkgY29tYmluYXRvci4gVGFrZXMgYSB2YWx1ZSBhbmQgYSBmdW5jdGlvbiwgYW5kIHJldHVybnNcbiAgLy8uIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIGZ1bmN0aW9uIHRvIHRoZSB2YWx1ZS4gRXF1aXZhbGVudCB0byBIYXNrZWxsJ3NcbiAgLy8uIGAoJilgIGZ1bmN0aW9uLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5UKDQyLCBTLmFkZCgxKSlcbiAgLy8uIDQzXG4gIC8vLlxuICAvLy4gPiBTLm1hcChTLlQoMTAwKSwgW1MuYWRkKDEpLCBNYXRoLnNxcnRdKVxuICAvLy4gWzEwMSwgMTBdXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gVCh4LCBmKSB7XG4gICAgcmV0dXJuIGYoeCk7XG4gIH1cbiAgUy5UID0gZGVmKCdUJywge30sIFthLCBGbihhLCBiKSwgYl0sIFQpO1xuXG4gIC8vLiAjIyMgRnVuY3Rpb25cblxuICAvLyMgY3VycnkyIDo6ICgoYSwgYikgLT4gYykgLT4gYSAtPiBiIC0+IGNcbiAgLy8uXG4gIC8vLiBDdXJyaWVzIHRoZSBnaXZlbiBiaW5hcnkgZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm1hcChTLmN1cnJ5MihNYXRoLnBvdykoMTApLCBbMSwgMiwgM10pXG4gIC8vLiBbMTAsIDEwMCwgMTAwMF1cbiAgLy8uXG4gIC8vLiA+IFMubWFwKFMuY3VycnkyKE1hdGgucG93LCAxMCksIFsxLCAyLCAzXSlcbiAgLy8uIFsxMCwgMTAwLCAxMDAwXVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGN1cnJ5MihmLCB4LCB5KSB7XG4gICAgcmV0dXJuIGYoeCwgeSk7XG4gIH1cbiAgUy5jdXJyeTIgPVxuICBkZWYoJ2N1cnJ5MicsXG4gICAgICB7fSxcbiAgICAgIFskLkZ1bmN0aW9uKFthLCBiLCBjXSksIGEsIGIsIGNdLFxuICAgICAgY3VycnkyKTtcblxuICAvLyMgY3VycnkzIDo6ICgoYSwgYiwgYykgLT4gZCkgLT4gYSAtPiBiIC0+IGMgLT4gZFxuICAvLy5cbiAgLy8uIEN1cnJpZXMgdGhlIGdpdmVuIHRlcm5hcnkgZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBnbG9iYWwucmVwbGFjZVN0cmluZyA9IFMuY3VycnkzKCh3aGF0LCByZXBsYWNlbWVudCwgc3RyaW5nKSA9PlxuICAvLy4gLiAgIHN0cmluZy5yZXBsYWNlKHdoYXQsIHJlcGxhY2VtZW50KVxuICAvLy4gLiApXG4gIC8vLiByZXBsYWNlU3RyaW5nXG4gIC8vLlxuICAvLy4gPiByZXBsYWNlU3RyaW5nKCdiYW5hbmEnKSgnb3JhbmdlJykoJ2JhbmFuYSBpY2VjcmVhbScpXG4gIC8vLiAnb3JhbmdlIGljZWNyZWFtJ1xuICAvLy5cbiAgLy8uID4gcmVwbGFjZVN0cmluZygnYmFuYW5hJywgJ29yYW5nZScsICdiYW5hbmEgaWNlY3JlYW0nKVxuICAvLy4gJ29yYW5nZSBpY2VjcmVhbSdcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBjdXJyeTMoZiwgeCwgeSwgeikge1xuICAgIHJldHVybiBmKHgsIHksIHopO1xuICB9XG4gIFMuY3VycnkzID1cbiAgZGVmKCdjdXJyeTMnLFxuICAgICAge30sXG4gICAgICBbJC5GdW5jdGlvbihbYSwgYiwgYywgZF0pLCBhLCBiLCBjLCBkXSxcbiAgICAgIGN1cnJ5Myk7XG5cbiAgLy8jIGN1cnJ5NCA6OiAoKGEsIGIsIGMsIGQpIC0+IGUpIC0+IGEgLT4gYiAtPiBjIC0+IGQgLT4gZVxuICAvLy5cbiAgLy8uIEN1cnJpZXMgdGhlIGdpdmVuIHF1YXRlcm5hcnkgZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBnbG9iYWwuY3JlYXRlUmVjdCA9IFMuY3Vycnk0KCh4LCB5LCB3aWR0aCwgaGVpZ2h0KSA9PlxuICAvLy4gLiAgICh7eCwgeSwgd2lkdGgsIGhlaWdodH0pXG4gIC8vLiAuIClcbiAgLy8uIGNyZWF0ZVJlY3RcbiAgLy8uXG4gIC8vLiA+IGNyZWF0ZVJlY3QoMCkoMCkoMTApKDEwKVxuICAvLy4ge3g6IDAsIHk6IDAsIHdpZHRoOiAxMCwgaGVpZ2h0OiAxMH1cbiAgLy8uXG4gIC8vLiA+IGNyZWF0ZVJlY3QoMCwgMCwgMTAsIDEwKVxuICAvLy4ge3g6IDAsIHk6IDAsIHdpZHRoOiAxMCwgaGVpZ2h0OiAxMH1cbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBjdXJyeTQoZiwgdywgeCwgeSwgeikge1xuICAgIHJldHVybiBmKHcsIHgsIHksIHopO1xuICB9XG4gIFMuY3Vycnk0ID1cbiAgZGVmKCdjdXJyeTQnLFxuICAgICAge30sXG4gICAgICBbJC5GdW5jdGlvbihbYSwgYiwgYywgZCwgZV0pLCBhLCBiLCBjLCBkLCBlXSxcbiAgICAgIGN1cnJ5NCk7XG5cbiAgLy8jIGN1cnJ5NSA6OiAoKGEsIGIsIGMsIGQsIGUpIC0+IGYpIC0+IGEgLT4gYiAtPiBjIC0+IGQgLT4gZSAtPiBmXG4gIC8vLlxuICAvLy4gQ3VycmllcyB0aGUgZ2l2ZW4gcXVpbmFyeSBmdW5jdGlvbi5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IGdsb2JhbC50b1VybCA9IFMuY3Vycnk1KChwcm90b2NvbCwgY3JlZHMsIGhvc3RuYW1lLCBwb3J0LCBwYXRobmFtZSkgPT5cbiAgLy8uIC4gICBwcm90b2NvbCArICcvLycgK1xuICAvLy4gLiAgIFMubWF5YmUoJycsIF8gPT4gXy51c2VybmFtZSArICc6JyArIF8ucGFzc3dvcmQgKyAnQCcsIGNyZWRzKSArXG4gIC8vLiAuICAgaG9zdG5hbWUgK1xuICAvLy4gLiAgIFMubWF5YmUoJycsIFMuY29uY2F0KCc6JyksIHBvcnQpICtcbiAgLy8uIC4gICBwYXRobmFtZVxuICAvLy4gLiApXG4gIC8vLiB0b1VybFxuICAvLy5cbiAgLy8uID4gdG9VcmwoJ2h0dHBzOicpKFMuTm90aGluZykoJ2V4YW1wbGUuY29tJykoUy5KdXN0KCc0NDMnKSkoJy9mb28vYmFyJylcbiAgLy8uICdodHRwczovL2V4YW1wbGUuY29tOjQ0My9mb28vYmFyJ1xuICAvLy5cbiAgLy8uID4gdG9VcmwoJ2h0dHBzOicsIFMuTm90aGluZywgJ2V4YW1wbGUuY29tJywgUy5KdXN0KCc0NDMnKSwgJy9mb28vYmFyJylcbiAgLy8uICdodHRwczovL2V4YW1wbGUuY29tOjQ0My9mb28vYmFyJ1xuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGN1cnJ5NShmLCB2LCB3LCB4LCB5LCB6KSB7XG4gICAgcmV0dXJuIGYodiwgdywgeCwgeSwgeik7XG4gIH1cbiAgUy5jdXJyeTUgPVxuICBkZWYoJ2N1cnJ5NScsXG4gICAgICB7fSxcbiAgICAgIFskLkZ1bmN0aW9uKFthLCBiLCBjLCBkLCBlLCByXSksIGEsIGIsIGMsIGQsIGUsIHJdLFxuICAgICAgY3Vycnk1KTtcblxuICAvLyMgZmxpcCA6OiAoYSAtPiBiIC0+IGMpIC0+IGIgLT4gYSAtPiBjXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBjdXJyaWVkIGJpbmFyeSBmdW5jdGlvbiBhbmQgdHdvIHZhbHVlcywgYW5kIHJldHVybnMgdGhlXG4gIC8vLiByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIGZ1bmN0aW9uIHRvIHRoZSB2YWx1ZXMgaW4gcmV2ZXJzZSBvcmRlci5cbiAgLy8uXG4gIC8vLiBUaGlzIGlzIHRoZSBDIGNvbWJpbmF0b3IgZnJvbSBjb21iaW5hdG9yeSBsb2dpYy5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZmxpcChTLmNvbmNhdCwgJ2ZvbycsICdiYXInKVxuICAvLy4gJ2JhcmZvbydcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBmbGlwKGYsIHgsIHkpIHtcbiAgICByZXR1cm4gZih5KSh4KTtcbiAgfVxuICBTLmZsaXAgPSBkZWYoJ2ZsaXAnLCB7fSwgW0ZuKGEsIEZuKGIsIGMpKSwgYiwgYSwgY10sIGZsaXApO1xuXG4gIC8vLiAjIyMgQ29tcG9zaXRpb25cblxuICAvLyMgY29tcG9zZSA6OiBTZW1pZ3JvdXBvaWQgcyA9PiBzIGIgYyAtPiBzIGEgYiAtPiBzIGEgY1xuICAvLy5cbiAgLy8uIEN1cnJpZWQgdmVyc2lvbiBvZiBbYFouY29tcG9zZWBdW10uXG4gIC8vLlxuICAvLy4gV2hlbiBzcGVjaWFsaXplZCB0byBGdW5jdGlvbiwgYGNvbXBvc2VgIGNvbXBvc2VzIHR3byB1bmFyeSBmdW5jdGlvbnMsXG4gIC8vLiBmcm9tIHJpZ2h0IHRvIGxlZnQgKHRoaXMgaXMgdGhlIEIgY29tYmluYXRvciBmcm9tIGNvbWJpbmF0b3J5IGxvZ2ljKS5cbiAgLy8uXG4gIC8vLiBUaGUgZ2VuZXJhbGl6ZWQgdHlwZSBzaWduYXR1cmUgaW5kaWNhdGVzIHRoYXQgYGNvbXBvc2VgIGlzIGNvbXBhdGlibGVcbiAgLy8uIHdpdGggYW55IFtTZW1pZ3JvdXBvaWRdW10uXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BwaXBlYF0oI3BpcGUpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5jb21wb3NlKE1hdGguc3FydCwgUy5hZGQoMSkpKDk5KVxuICAvLy4gMTBcbiAgLy8uIGBgYFxuICBTLmNvbXBvc2UgPVxuICBkZWYoJ2NvbXBvc2UnLFxuICAgICAge3M6IFtaLlNlbWlncm91cG9pZF19LFxuICAgICAgW3MoYiwgYyksIHMoYSwgYiksIHMoYSwgYyldLFxuICAgICAgWi5jb21wb3NlKTtcblxuICAvLyMgcGlwZSA6OiBbKGEgLT4gYiksIChiIC0+IGMpLCAuLi4sIChtIC0+IG4pXSAtPiBhIC0+IG5cbiAgLy8uXG4gIC8vLiBUYWtlcyBhbiBhcnJheSBvZiBmdW5jdGlvbnMgYXNzdW1lZCB0byBiZSB1bmFyeSBhbmQgYSB2YWx1ZSBvZiBhbnkgdHlwZSxcbiAgLy8uIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIHNlcXVlbmNlIG9mIHRyYW5zZm9ybWF0aW9ucyB0b1xuICAvLy4gdGhlIGluaXRpYWwgdmFsdWUuXG4gIC8vLlxuICAvLy4gSW4gZ2VuZXJhbCB0ZXJtcywgYHBpcGVgIHBlcmZvcm1zIGxlZnQtdG8tcmlnaHQgY29tcG9zaXRpb24gb2YgYW4gYXJyYXlcbiAgLy8uIG9mIGZ1bmN0aW9ucy4gYHBpcGUoW2YsIGcsIGhdLCB4KWAgaXMgZXF1aXZhbGVudCB0byBgaChnKGYoeCkpKWAuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnBpcGUoW1MuYWRkKDEpLCBNYXRoLnNxcnQsIFMuc3ViKDEpXSwgOTkpXG4gIC8vLiA5XG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gcGlwZShmcywgeCkge1xuICAgIHJldHVybiBaLnJlZHVjZShmdW5jdGlvbih4LCBmKSB7IHJldHVybiBmKHgpOyB9LCB4LCBmcyk7XG4gIH1cbiAgUy5waXBlID0gZGVmKCdwaXBlJywge30sIFskLkFycmF5KCQuQW55RnVuY3Rpb24pLCBhLCBiXSwgcGlwZSk7XG5cbiAgLy8jIG9uIDo6IChiIC0+IGIgLT4gYykgLT4gKGEgLT4gYikgLT4gYSAtPiBhIC0+IGNcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGJpbmFyeSBmdW5jdGlvbiBgZmAsIGEgdW5hcnkgZnVuY3Rpb24gYGdgLCBhbmQgdHdvXG4gIC8vLiB2YWx1ZXMgYHhgIGFuZCBgeWAuIFJldHVybnMgYGYoZyh4KSkoZyh5KSlgLlxuICAvLy5cbiAgLy8uIFRoaXMgaXMgdGhlIFAgY29tYmluYXRvciBmcm9tIGNvbWJpbmF0b3J5IGxvZ2ljLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5vbihTLmNvbmNhdCwgUy5yZXZlcnNlLCBbMSwgMiwgM10sIFs0LCA1LCA2XSlcbiAgLy8uIFszLCAyLCAxLCA2LCA1LCA0XVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIG9uKGYsIGcsIHgsIHkpIHtcbiAgICByZXR1cm4gZihnKHgpKShnKHkpKTtcbiAgfVxuICBTLm9uID0gZGVmKCdvbicsIHt9LCBbRm4oYiwgRm4oYiwgYykpLCBGbihhLCBiKSwgYSwgYSwgY10sIG9uKTtcblxuICAvLy4gIyMjIE1heWJlIHR5cGVcbiAgLy8uXG4gIC8vLiBUaGUgTWF5YmUgdHlwZSByZXByZXNlbnRzIG9wdGlvbmFsIHZhbHVlczogYSB2YWx1ZSBvZiB0eXBlIGBNYXliZSBhYCBpc1xuICAvLy4gZWl0aGVyIGEgSnVzdCB3aG9zZSB2YWx1ZSBpcyBvZiB0eXBlIGBhYCBvciBOb3RoaW5nICh3aXRoIG5vIHZhbHVlKS5cbiAgLy8uXG4gIC8vLiBUaGUgTWF5YmUgdHlwZSBzYXRpc2ZpZXMgdGhlIFtPcmRdW10sIFtNb25vaWRdW10sIFtNb25hZF1bXSxcbiAgLy8uIFtBbHRlcm5hdGl2ZV1bXSwgW1RyYXZlcnNhYmxlXVtdLCBhbmQgW0V4dGVuZF1bXSBzcGVjaWZpY2F0aW9ucy5cblxuICAvLyMgTWF5YmVUeXBlIDo6IFR5cGUgLT4gVHlwZVxuICAvLy5cbiAgLy8uIEEgW2BVbmFyeVR5cGVgXVtVbmFyeVR5cGVdIGZvciB1c2Ugd2l0aCBbc2FuY3R1YXJ5LWRlZl1bXS5cbiAgUy5NYXliZVR5cGUgPSAkTWF5YmU7XG5cbiAgLy8jIE1heWJlIDo6IFR5cGVSZXAgTWF5YmVcbiAgLy8uXG4gIC8vLiBUaGUgW3R5cGUgcmVwcmVzZW50YXRpdmVdKCN0eXBlLXJlcHJlc2VudGF0aXZlcykgZm9yIHRoZSBNYXliZSB0eXBlLlxuICB2YXIgTWF5YmUgPSBTLk1heWJlID0ge3Byb3RvdHlwZTogX01heWJlLnByb3RvdHlwZX07XG5cbiAgTWF5YmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWF5YmU7XG5cbiAgZnVuY3Rpb24gX01heWJlKHRhZywgdmFsdWUpIHtcbiAgICB0aGlzLmlzTm90aGluZyA9IHRhZyA9PT0gJ05vdGhpbmcnO1xuICAgIHRoaXMuaXNKdXN0ID0gdGFnID09PSAnSnVzdCc7XG4gICAgaWYgKHRoaXMuaXNKdXN0KSB0aGlzLnZhbHVlID0gdmFsdWU7XG5cbiAgICAvLyAgQWRkIFwiZmFudGFzeS1sYW5kL2NvbmNhdFwiIG1ldGhvZCBjb25kaXRpb25hbGx5IHNvIHRoYXQgSnVzdCgnYWJjJylcbiAgICAvLyAgc2F0aXNmaWVzIHRoZSByZXF1aXJlbWVudHMgb2YgU2VtaWdyb3VwIGJ1dCBKdXN0KDEyMykgZG9lcyBub3QuXG4gICAgaWYgKHRoaXMuaXNOb3RoaW5nIHx8IFouU2VtaWdyb3VwLnRlc3QodGhpcy52YWx1ZSkpIHtcbiAgICAgIHRoaXNbJ2ZhbnRhc3ktbGFuZC9jb25jYXQnXSA9IE1heWJlJHByb3RvdHlwZSRjb25jYXQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNOb3RoaW5nIHx8IFouU2V0b2lkLnRlc3QodGhpcy52YWx1ZSkpIHtcbiAgICAgIHRoaXNbJ2ZhbnRhc3ktbGFuZC9lcXVhbHMnXSA9IE1heWJlJHByb3RvdHlwZSRlcXVhbHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNOb3RoaW5nIHx8IFouT3JkLnRlc3QodGhpcy52YWx1ZSkpIHtcbiAgICAgIHRoaXNbJ2ZhbnRhc3ktbGFuZC9sdGUnXSA9IE1heWJlJHByb3RvdHlwZSRsdGU7XG4gICAgfVxuICB9XG5cbiAgLy8jIE5vdGhpbmcgOjogTWF5YmUgYVxuICAvLy5cbiAgLy8uIE5vdGhpbmcuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLk5vdGhpbmdcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICB2YXIgTm90aGluZyA9IFMuTm90aGluZyA9IG5ldyBfTWF5YmUoJ05vdGhpbmcnKTtcblxuICAvLyMgSnVzdCA6OiBhIC0+IE1heWJlIGFcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIHZhbHVlIG9mIGFueSB0eXBlIGFuZCByZXR1cm5zIGEgSnVzdCB3aXRoIHRoZSBnaXZlbiB2YWx1ZS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuSnVzdCg0MilcbiAgLy8uIEp1c3QoNDIpXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gSnVzdCh4KSB7XG4gICAgcmV0dXJuIG5ldyBfTWF5YmUoJ0p1c3QnLCB4KTtcbiAgfVxuICBTLkp1c3QgPSBkZWYoJ0p1c3QnLCB7fSwgW2EsICRNYXliZShhKV0sIEp1c3QpO1xuXG4gIC8vIyBNYXliZS5AQHR5cGUgOjogU3RyaW5nXG4gIC8vLlxuICAvLy4gTWF5YmUgdHlwZSBpZGVudGlmaWVyLCBgJ3NhbmN0dWFyeS9NYXliZSdgLlxuICBNYXliZVsnQEB0eXBlJ10gPSBtYXliZVR5cGVJZGVudDtcblxuICAvLyMgTWF5YmUuZmFudGFzeS1sYW5kL2VtcHR5IDo6ICgpIC0+IE1heWJlIGFcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIE5vdGhpbmcuXG4gIC8vLlxuICAvLy4gSXQgaXMgaWRpb21hdGljIHRvIHVzZSBbYGVtcHR5YF0oI2VtcHR5KSByYXRoZXIgdGhhbiB1c2UgdGhpcyBmdW5jdGlvblxuICAvLy4gZGlyZWN0bHkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmVtcHR5KFMuTWF5YmUpXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgTWF5YmVbJ2ZhbnRhc3ktbGFuZC9lbXB0eSddID0gZnVuY3Rpb24oKSB7IHJldHVybiBOb3RoaW5nOyB9O1xuXG4gIC8vIyBNYXliZS5mYW50YXN5LWxhbmQvb2YgOjogYSAtPiBNYXliZSBhXG4gIC8vLlxuICAvLy4gVGFrZXMgYSB2YWx1ZSBvZiBhbnkgdHlwZSBhbmQgcmV0dXJucyBhIEp1c3Qgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUuXG4gIC8vLlxuICAvLy4gSXQgaXMgaWRpb21hdGljIHRvIHVzZSBbYG9mYF0oI29mKSByYXRoZXIgdGhhbiB1c2UgdGhpcyBmdW5jdGlvblxuICAvLy4gZGlyZWN0bHkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm9mKFMuTWF5YmUsIDQyKVxuICAvLy4gSnVzdCg0MilcbiAgLy8uIGBgYFxuICBNYXliZVsnZmFudGFzeS1sYW5kL29mJ10gPSBKdXN0O1xuXG4gIC8vIyBNYXliZS5mYW50YXN5LWxhbmQvemVybyA6OiAoKSAtPiBNYXliZSBhXG4gIC8vLlxuICAvLy4gUmV0dXJucyBOb3RoaW5nLlxuICAvLy5cbiAgLy8uIEl0IGlzIGlkaW9tYXRpYyB0byB1c2UgW2B6ZXJvYF0oI3plcm8pIHJhdGhlciB0aGFuIHVzZSB0aGlzIGZ1bmN0aW9uXG4gIC8vLiBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuemVybyhTLk1heWJlKVxuICAvLy4gTm90aGluZ1xuICAvLy4gYGBgXG4gIE1heWJlWydmYW50YXN5LWxhbmQvemVybyddID0gZnVuY3Rpb24oKSB7IHJldHVybiBOb3RoaW5nOyB9O1xuXG4gIC8vIyBNYXliZSNpc05vdGhpbmcgOjogTWF5YmUgYSB+PiBCb29sZWFuXG4gIC8vLlxuICAvLy4gYHRydWVgIGlmIGB0aGlzYCBpcyBOb3RoaW5nOyBgZmFsc2VgIGlmIGB0aGlzYCBpcyBhIEp1c3QuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLk5vdGhpbmcuaXNOb3RoaW5nXG4gIC8vLiB0cnVlXG4gIC8vLlxuICAvLy4gPiBTLkp1c3QoNDIpLmlzTm90aGluZ1xuICAvLy4gZmFsc2VcbiAgLy8uIGBgYFxuXG4gIC8vIyBNYXliZSNpc0p1c3QgOjogTWF5YmUgYSB+PiBCb29sZWFuXG4gIC8vLlxuICAvLy4gYHRydWVgIGlmIGB0aGlzYCBpcyBhIEp1c3Q7IGBmYWxzZWAgaWYgYHRoaXNgIGlzIE5vdGhpbmcuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLkp1c3QoNDIpLmlzSnVzdFxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5Ob3RoaW5nLmlzSnVzdFxuICAvLy4gZmFsc2VcbiAgLy8uIGBgYFxuXG4gIC8vIyBNYXliZSN0b1N0cmluZyA6OiBNYXliZSBhIH4+ICgpIC0+IFN0cmluZ1xuICAvLy5cbiAgLy8uIFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgTWF5YmUuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRvU3RyaW5nKFMuTm90aGluZylcbiAgLy8uICdOb3RoaW5nJ1xuICAvLy5cbiAgLy8uID4gUy50b1N0cmluZyhTLkp1c3QoWzEsIDIsIDNdKSlcbiAgLy8uICdKdXN0KFsxLCAyLCAzXSknXG4gIC8vLiBgYGBcbiAgTWF5YmUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNKdXN0ID8gJ0p1c3QoJyArIFoudG9TdHJpbmcodGhpcy52YWx1ZSkgKyAnKScgOiAnTm90aGluZyc7XG4gIH07XG5cbiAgLy8jIE1heWJlI2luc3BlY3QgOjogTWF5YmUgYSB+PiAoKSAtPiBTdHJpbmdcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIE1heWJlLiBUaGlzIG1ldGhvZCBpcyB1c2VkIGJ5XG4gIC8vLiBgdXRpbC5pbnNwZWN0YCBhbmQgdGhlIFJFUEwgdG8gZm9ybWF0IGEgTWF5YmUgZm9yIGRpc3BsYXkuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BNYXliZSN0b1N0cmluZ2BdW10uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLk5vdGhpbmcuaW5zcGVjdCgpXG4gIC8vLiAnTm90aGluZydcbiAgLy8uXG4gIC8vLiA+IFMuSnVzdChbMSwgMiwgM10pLmluc3BlY3QoKVxuICAvLy4gJ0p1c3QoWzEsIDIsIDNdKSdcbiAgLy8uIGBgYFxuICBNYXliZS5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy50b1N0cmluZygpOyB9O1xuXG4gIC8vIyBNYXliZSNmYW50YXN5LWxhbmQvZXF1YWxzIDo6IFNldG9pZCBhID0+IE1heWJlIGEgfj4gTWF5YmUgYSAtPiBCb29sZWFuXG4gIC8vLlxuICAvLy4gVGFrZXMgYSB2YWx1ZSBgbWAgb2YgdGhlIHNhbWUgdHlwZSBhbmQgcmV0dXJucyBgdHJ1ZWAgaWY6XG4gIC8vLlxuICAvLy4gICAtIGB0aGlzYCBhbmQgYG1gIGFyZSBib3RoIE5vdGhpbmc7IG9yXG4gIC8vLlxuICAvLy4gICAtIGB0aGlzYCBhbmQgYG1gIGFyZSBib3RoIEp1c3RzLCBhbmQgdGhlaXIgdmFsdWVzIGFyZSBlcXVhbCBhY2NvcmRpbmdcbiAgLy8uICAgICB0byBbYFouZXF1YWxzYF1bXS5cbiAgLy8uXG4gIC8vLiBJdCBpcyBpZGlvbWF0aWMgdG8gdXNlIFtgZXF1YWxzYF0oI2VxdWFscykgcmF0aGVyIHRoYW4gdXNlIHRoaXMgbWV0aG9kXG4gIC8vLiBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZXF1YWxzKFMuTm90aGluZywgUy5Ob3RoaW5nKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5lcXVhbHMoUy5KdXN0KFsxLCAyLCAzXSksIFMuSnVzdChbMSwgMiwgM10pKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5lcXVhbHMoUy5KdXN0KFsxLCAyLCAzXSksIFMuSnVzdChbMywgMiwgMV0pKVxuICAvLy4gZmFsc2VcbiAgLy8uXG4gIC8vLiA+IFMuZXF1YWxzKFMuSnVzdChbMSwgMiwgM10pLCBTLk5vdGhpbmcpXG4gIC8vLiBmYWxzZVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIE1heWJlJHByb3RvdHlwZSRlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5pc05vdGhpbmcgPyBvdGhlci5pc05vdGhpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBvdGhlci5pc0p1c3QgJiYgWi5lcXVhbHModGhpcy52YWx1ZSwgb3RoZXIudmFsdWUpO1xuICB9XG5cbiAgLy8jIE1heWJlI2ZhbnRhc3ktbGFuZC9sdGUgOjogT3JkIGEgPT4gTWF5YmUgYSB+PiBNYXliZSBhIC0+IEJvb2xlYW5cbiAgLy8uXG4gIC8vLiBUYWtlcyBhIHZhbHVlIGBtYCBvZiB0aGUgc2FtZSB0eXBlIGFuZCByZXR1cm5zIGB0cnVlYCBpZjpcbiAgLy8uXG4gIC8vLiAgIC0gYHRoaXNgIGlzIE5vdGhpbmc7IG9yXG4gIC8vLlxuICAvLy4gICAtIGB0aGlzYCBhbmQgYG1gIGFyZSBib3RoIEp1c3RzIGFuZCB0aGUgdmFsdWUgb2YgYHRoaXNgIGlzIGxlc3MgdGhhblxuICAvLy4gICAgIG9yIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZiBgbWAgYWNjb3JkaW5nIHRvIFtgWi5sdGVgXVtdLlxuICAvLy5cbiAgLy8uIEl0IGlzIGlkaW9tYXRpYyB0byB1c2UgW2BsdGVgXSgjbHRlKSBvciBbYGx0ZV9gXSgjbHRlXykgcmF0aGVyIHRoYW4gdXNlXG4gIC8vLiB0aGlzIG1ldGhvZCBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMubHRlXyhTLk5vdGhpbmcsIFMuTm90aGluZylcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMubHRlXyhTLk5vdGhpbmcsIFMuSnVzdCgwKSlcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMubHRlXyhTLkp1c3QoMCksIFMuTm90aGluZylcbiAgLy8uIGZhbHNlXG4gIC8vLlxuICAvLy4gPiBTLmx0ZV8oUy5KdXN0KDApLCBTLkp1c3QoMSkpXG4gIC8vLiB0cnVlXG4gIC8vLlxuICAvLy4gPiBTLmx0ZV8oUy5KdXN0KDEpLCBTLkp1c3QoMCkpXG4gIC8vLiBmYWxzZVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIE1heWJlJHByb3RvdHlwZSRsdGUob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5pc05vdGhpbmcgfHwgb3RoZXIuaXNKdXN0ICYmIFoubHRlKHRoaXMudmFsdWUsIG90aGVyLnZhbHVlKTtcbiAgfVxuXG4gIC8vIyBNYXliZSNmYW50YXN5LWxhbmQvY29uY2F0IDo6IFNlbWlncm91cCBhID0+IE1heWJlIGEgfj4gTWF5YmUgYSAtPiBNYXliZSBhXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGNvbmNhdGVuYXRpbmcgdHdvIE1heWJlIHZhbHVlcyBvZiB0aGUgc2FtZSB0eXBlLlxuICAvLy4gYGFgIG11c3QgaGF2ZSBhIFtTZW1pZ3JvdXBdW10uXG4gIC8vLlxuICAvLy4gSWYgYHRoaXNgIGlzIE5vdGhpbmcgYW5kIHRoZSBhcmd1bWVudCBpcyBOb3RoaW5nLCB0aGlzIG1ldGhvZCByZXR1cm5zXG4gIC8vLiBOb3RoaW5nLlxuICAvLy5cbiAgLy8uIElmIGB0aGlzYCBpcyBhIEp1c3QgYW5kIHRoZSBhcmd1bWVudCBpcyBhIEp1c3QsIHRoaXMgbWV0aG9kIHJldHVybnMgYVxuICAvLy4gSnVzdCB3aG9zZSB2YWx1ZSBpcyB0aGUgcmVzdWx0IG9mIGNvbmNhdGVuYXRpbmcgdGhpcyBKdXN0J3MgdmFsdWUgYW5kXG4gIC8vLiB0aGUgZ2l2ZW4gSnVzdCdzIHZhbHVlLlxuICAvLy5cbiAgLy8uIE90aGVyd2lzZSwgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgSnVzdC5cbiAgLy8uXG4gIC8vLiBJdCBpcyBpZGlvbWF0aWMgdG8gdXNlIFtgY29uY2F0YF0oI2NvbmNhdCkgcmF0aGVyIHRoYW4gdXNlIHRoaXMgbWV0aG9kXG4gIC8vLiBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuY29uY2F0KFMuTm90aGluZywgUy5Ob3RoaW5nKVxuICAvLy4gTm90aGluZ1xuICAvLy5cbiAgLy8uID4gUy5jb25jYXQoUy5KdXN0KFsxLCAyLCAzXSksIFMuSnVzdChbNCwgNSwgNl0pKVxuICAvLy4gSnVzdChbMSwgMiwgMywgNCwgNSwgNl0pXG4gIC8vLlxuICAvLy4gPiBTLmNvbmNhdChTLk5vdGhpbmcsIFMuSnVzdChbMSwgMiwgM10pKVxuICAvLy4gSnVzdChbMSwgMiwgM10pXG4gIC8vLlxuICAvLy4gPiBTLmNvbmNhdChTLkp1c3QoWzEsIDIsIDNdKSwgUy5Ob3RoaW5nKVxuICAvLy4gSnVzdChbMSwgMiwgM10pXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gTWF5YmUkcHJvdG90eXBlJGNvbmNhdChvdGhlcikge1xuICAgIHJldHVybiB0aGlzLmlzTm90aGluZyA/XG4gICAgICBvdGhlciA6XG4gICAgICBvdGhlci5pc05vdGhpbmcgPyB0aGlzIDogSnVzdChaLmNvbmNhdCh0aGlzLnZhbHVlLCBvdGhlci52YWx1ZSkpO1xuICB9XG5cbiAgLy8jIE1heWJlI2ZhbnRhc3ktbGFuZC9tYXAgOjogTWF5YmUgYSB+PiAoYSAtPiBiKSAtPiBNYXliZSBiXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBmdW5jdGlvbiBhbmQgcmV0dXJucyBgdGhpc2AgaWYgYHRoaXNgIGlzIE5vdGhpbmc7IG90aGVyd2lzZVxuICAvLy4gaXQgcmV0dXJucyBhIEp1c3Qgd2hvc2UgdmFsdWUgaXMgdGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgZnVuY3Rpb25cbiAgLy8uIHRvIHRoaXMgSnVzdCdzIHZhbHVlLlxuICAvLy5cbiAgLy8uIEl0IGlzIGlkaW9tYXRpYyB0byB1c2UgW2BtYXBgXSgjbWFwKSByYXRoZXIgdGhhbiB1c2UgdGhpcyBtZXRob2RcbiAgLy8uIGRpcmVjdGx5LlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5tYXAoTWF0aC5zcXJ0LCBTLk5vdGhpbmcpXG4gIC8vLiBOb3RoaW5nXG4gIC8vLlxuICAvLy4gPiBTLm1hcChNYXRoLnNxcnQsIFMuSnVzdCg5KSlcbiAgLy8uIEp1c3QoMylcbiAgLy8uIGBgYFxuICBNYXliZS5wcm90b3R5cGVbJ2ZhbnRhc3ktbGFuZC9tYXAnXSA9IGZ1bmN0aW9uKGYpIHtcbiAgICByZXR1cm4gdGhpcy5pc0p1c3QgPyBKdXN0KGYodGhpcy52YWx1ZSkpIDogdGhpcztcbiAgfTtcblxuICAvLyMgTWF5YmUjZmFudGFzeS1sYW5kL2FwIDo6IE1heWJlIGEgfj4gTWF5YmUgKGEgLT4gYikgLT4gTWF5YmUgYlxuICAvLy5cbiAgLy8uIFRha2VzIGEgTWF5YmUgYW5kIHJldHVybnMgTm90aGluZyB1bmxlc3MgYHRoaXNgIGlzIGEgSnVzdCAqYW5kKiB0aGVcbiAgLy8uIGFyZ3VtZW50IGlzIGEgSnVzdCwgaW4gd2hpY2ggY2FzZSBpdCByZXR1cm5zIGEgSnVzdCB3aG9zZSB2YWx1ZSBpc1xuICAvLy4gdGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgZ2l2ZW4gSnVzdCdzIHZhbHVlIHRvIHRoaXMgSnVzdCdzIHZhbHVlLlxuICAvLy5cbiAgLy8uIEl0IGlzIGlkaW9tYXRpYyB0byB1c2UgW2BhcGBdKCNhcCkgcmF0aGVyIHRoYW4gdXNlIHRoaXMgbWV0aG9kIGRpcmVjdGx5LlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5hcChTLk5vdGhpbmcsIFMuTm90aGluZylcbiAgLy8uIE5vdGhpbmdcbiAgLy8uXG4gIC8vLiA+IFMuYXAoUy5Ob3RoaW5nLCBTLkp1c3QoOSkpXG4gIC8vLiBOb3RoaW5nXG4gIC8vLlxuICAvLy4gPiBTLmFwKFMuSnVzdChNYXRoLnNxcnQpLCBTLk5vdGhpbmcpXG4gIC8vLiBOb3RoaW5nXG4gIC8vLlxuICAvLy4gPiBTLmFwKFMuSnVzdChNYXRoLnNxcnQpLCBTLkp1c3QoOSkpXG4gIC8vLiBKdXN0KDMpXG4gIC8vLiBgYGBcbiAgTWF5YmUucHJvdG90eXBlWydmYW50YXN5LWxhbmQvYXAnXSA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgcmV0dXJuIG90aGVyLmlzSnVzdCA/IFoubWFwKG90aGVyLnZhbHVlLCB0aGlzKSA6IG90aGVyO1xuICB9O1xuXG4gIC8vIyBNYXliZSNmYW50YXN5LWxhbmQvY2hhaW4gOjogTWF5YmUgYSB+PiAoYSAtPiBNYXliZSBiKSAtPiBNYXliZSBiXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBmdW5jdGlvbiBhbmQgcmV0dXJucyBgdGhpc2AgaWYgYHRoaXNgIGlzIE5vdGhpbmc7IG90aGVyd2lzZVxuICAvLy4gaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBmdW5jdGlvbiB0byB0aGlzIEp1c3QncyB2YWx1ZS5cbiAgLy8uXG4gIC8vLiBJdCBpcyBpZGlvbWF0aWMgdG8gdXNlIFtgY2hhaW5gXSgjY2hhaW4pIHJhdGhlciB0aGFuIHVzZSB0aGlzIG1ldGhvZFxuICAvLy4gZGlyZWN0bHkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmNoYWluKFMucGFyc2VGbG9hdCwgUy5Ob3RoaW5nKVxuICAvLy4gTm90aGluZ1xuICAvLy5cbiAgLy8uID4gUy5jaGFpbihTLnBhcnNlRmxvYXQsIFMuSnVzdCgneHh4JykpXG4gIC8vLiBOb3RoaW5nXG4gIC8vLlxuICAvLy4gPiBTLmNoYWluKFMucGFyc2VGbG9hdCwgUy5KdXN0KCcxMi4zNCcpKVxuICAvLy4gSnVzdCgxMi4zNClcbiAgLy8uIGBgYFxuICBNYXliZS5wcm90b3R5cGVbJ2ZhbnRhc3ktbGFuZC9jaGFpbiddID0gZnVuY3Rpb24oZikge1xuICAgIHJldHVybiB0aGlzLmlzSnVzdCA/IGYodGhpcy52YWx1ZSkgOiB0aGlzO1xuICB9O1xuXG4gIC8vIyBNYXliZSNmYW50YXN5LWxhbmQvYWx0IDo6IE1heWJlIGEgfj4gTWF5YmUgYSAtPiBNYXliZSBhXG4gIC8vLlxuICAvLy4gQ2hvb3NlcyBiZXR3ZWVuIGB0aGlzYCBhbmQgdGhlIG90aGVyIE1heWJlIHByb3ZpZGVkIGFzIGFuIGFyZ3VtZW50LlxuICAvLy4gUmV0dXJucyBgdGhpc2AgaWYgYHRoaXNgIGlzIGEgSnVzdDsgdGhlIG90aGVyIE1heWJlIG90aGVyd2lzZS5cbiAgLy8uXG4gIC8vLiBJdCBpcyBpZGlvbWF0aWMgdG8gdXNlIFtgYWx0YF0oI2FsdCkgcmF0aGVyIHRoYW4gdXNlIHRoaXMgbWV0aG9kXG4gIC8vLiBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuYWx0KFMuTm90aGluZywgUy5Ob3RoaW5nKVxuICAvLy4gTm90aGluZ1xuICAvLy5cbiAgLy8uID4gUy5hbHQoUy5Ob3RoaW5nLCBTLkp1c3QoMSkpXG4gIC8vLiBKdXN0KDEpXG4gIC8vLlxuICAvLy4gPiBTLmFsdChTLkp1c3QoMiksIFMuTm90aGluZylcbiAgLy8uIEp1c3QoMilcbiAgLy8uXG4gIC8vLiA+IFMuYWx0KFMuSnVzdCgzKSwgUy5KdXN0KDQpKVxuICAvLy4gSnVzdCgzKVxuICAvLy4gYGBgXG4gIE1heWJlLnByb3RvdHlwZVsnZmFudGFzeS1sYW5kL2FsdCddID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5pc0p1c3QgPyB0aGlzIDogb3RoZXI7XG4gIH07XG5cbiAgLy8jIE1heWJlI2ZhbnRhc3ktbGFuZC9yZWR1Y2UgOjogTWF5YmUgYSB+PiAoKGIsIGEpIC0+IGIsIGIpIC0+IGJcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGZ1bmN0aW9uIGFuZCBhbiBpbml0aWFsIHZhbHVlIG9mIGFueSB0eXBlLCBhbmQgcmV0dXJuczpcbiAgLy8uXG4gIC8vLiAgIC0gdGhlIGluaXRpYWwgdmFsdWUgaWYgYHRoaXNgIGlzIE5vdGhpbmc7IG90aGVyd2lzZVxuICAvLy5cbiAgLy8uICAgLSB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBmdW5jdGlvbiB0byB0aGUgaW5pdGlhbCB2YWx1ZSBhbmQgdGhpc1xuICAvLy4gICAgIEp1c3QncyB2YWx1ZS5cbiAgLy8uXG4gIC8vLiBJdCBpcyBpZGlvbWF0aWMgdG8gdXNlIFtgcmVkdWNlYF0oI3JlZHVjZSkgcmF0aGVyIHRoYW4gdXNlIHRoaXMgbWV0aG9kXG4gIC8vLiBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMucmVkdWNlKFMuY3VycnkyKE1hdGgucG93KSwgMTAsIFMuTm90aGluZylcbiAgLy8uIDEwXG4gIC8vLlxuICAvLy4gPiBTLnJlZHVjZShTLmN1cnJ5MihNYXRoLnBvdyksIDEwLCBTLkp1c3QoMykpXG4gIC8vLiAxMDAwXG4gIC8vLiBgYGBcbiAgTWF5YmUucHJvdG90eXBlWydmYW50YXN5LWxhbmQvcmVkdWNlJ10gPSBmdW5jdGlvbihmLCB4KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNKdXN0ID8gZih4LCB0aGlzLnZhbHVlKSA6IHg7XG4gIH07XG5cbiAgLy8jIE1heWJlI2ZhbnRhc3ktbGFuZC90cmF2ZXJzZSA6OiBBcHBsaWNhdGl2ZSBmID0+IE1heWJlIGEgfj4gKFR5cGVSZXAgZiwgYSAtPiBmIGIpIC0+IGYgKE1heWJlIGIpXG4gIC8vLlxuICAvLy4gVGFrZXMgdGhlIHR5cGUgcmVwcmVzZW50YXRpdmUgb2Ygc29tZSBbQXBwbGljYXRpdmVdW10gYW5kIGEgZnVuY3Rpb25cbiAgLy8uIHdoaWNoIHJldHVybnMgYSB2YWx1ZSBvZiB0aGF0IEFwcGxpY2F0aXZlLCBhbmQgcmV0dXJuczpcbiAgLy8uXG4gIC8vLiAgIC0gdGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgdHlwZSByZXByZXNlbnRhdGl2ZSdzIFtgb2ZgXVtdIGZ1bmN0aW9uIHRvXG4gIC8vLiAgICAgYHRoaXNgIGlmIGB0aGlzYCBpcyBOb3RoaW5nOyBvdGhlcndpc2VcbiAgLy8uXG4gIC8vLiAgIC0gdGhlIHJlc3VsdCBvZiBtYXBwaW5nIFtgSnVzdGBdKCNKdXN0KSBvdmVyIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlXG4gIC8vLiAgICAgZmlyc3QgZnVuY3Rpb24gdG8gdGhpcyBKdXN0J3MgdmFsdWUuXG4gIC8vLlxuICAvLy4gSXQgaXMgaWRpb21hdGljIHRvIHVzZSBbYHRyYXZlcnNlYF0oI3RyYXZlcnNlKSByYXRoZXIgdGhhbiB1c2UgdGhpc1xuICAvLy4gbWV0aG9kIGRpcmVjdGx5LlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy50cmF2ZXJzZShBcnJheSwgUy53b3JkcywgUy5Ob3RoaW5nKVxuICAvLy4gW05vdGhpbmddXG4gIC8vLlxuICAvLy4gPiBTLnRyYXZlcnNlKEFycmF5LCBTLndvcmRzLCBTLkp1c3QoJ2ZvbyBiYXIgYmF6JykpXG4gIC8vLiBbSnVzdCgnZm9vJyksIEp1c3QoJ2JhcicpLCBKdXN0KCdiYXonKV1cbiAgLy8uIGBgYFxuICBNYXliZS5wcm90b3R5cGVbJ2ZhbnRhc3ktbGFuZC90cmF2ZXJzZSddID0gZnVuY3Rpb24odHlwZVJlcCwgZikge1xuICAgIHJldHVybiB0aGlzLmlzSnVzdCA/IFoubWFwKEp1c3QsIGYodGhpcy52YWx1ZSkpIDogWi5vZih0eXBlUmVwLCB0aGlzKTtcbiAgfTtcblxuICAvLyMgTWF5YmUjZmFudGFzeS1sYW5kL2V4dGVuZCA6OiBNYXliZSBhIH4+IChNYXliZSBhIC0+IGIpIC0+IE1heWJlIGJcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGZ1bmN0aW9uIGFuZCByZXR1cm5zIGB0aGlzYCBpZiBgdGhpc2AgaXMgTm90aGluZzsgb3RoZXJ3aXNlXG4gIC8vLiBpdCByZXR1cm5zIGEgSnVzdCB3aG9zZSB2YWx1ZSBpcyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBmdW5jdGlvblxuICAvLy4gdG8gYHRoaXNgLlxuICAvLy5cbiAgLy8uIEl0IGlzIGlkaW9tYXRpYyB0byB1c2UgW2BleHRlbmRgXSgjZXh0ZW5kKSByYXRoZXIgdGhhbiB1c2UgdGhpcyBtZXRob2RcbiAgLy8uIGRpcmVjdGx5LlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5leHRlbmQoeCA9PiB4LnZhbHVlICsgMSwgUy5Ob3RoaW5nKVxuICAvLy4gTm90aGluZ1xuICAvLy5cbiAgLy8uID4gUy5leHRlbmQoeCA9PiB4LnZhbHVlICsgMSwgUy5KdXN0KDQyKSlcbiAgLy8uIEp1c3QoNDMpXG4gIC8vLiBgYGBcbiAgTWF5YmUucHJvdG90eXBlWydmYW50YXN5LWxhbmQvZXh0ZW5kJ10gPSBmdW5jdGlvbihmKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNKdXN0ID8gSnVzdChmKHRoaXMpKSA6IHRoaXM7XG4gIH07XG5cbiAgLy8jIGlzTm90aGluZyA6OiBNYXliZSBhIC0+IEJvb2xlYW5cbiAgLy8uXG4gIC8vLiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gTWF5YmUgaXMgTm90aGluZzsgYGZhbHNlYCBpZiBpdCBpcyBhIEp1c3QuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmlzTm90aGluZyhTLk5vdGhpbmcpXG4gIC8vLiB0cnVlXG4gIC8vLlxuICAvLy4gPiBTLmlzTm90aGluZyhTLkp1c3QoNDIpKVxuICAvLy4gZmFsc2VcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBpc05vdGhpbmcobWF5YmUpIHtcbiAgICByZXR1cm4gbWF5YmUuaXNOb3RoaW5nO1xuICB9XG4gIFMuaXNOb3RoaW5nID0gZGVmKCdpc05vdGhpbmcnLCB7fSwgWyRNYXliZShhKSwgJC5Cb29sZWFuXSwgaXNOb3RoaW5nKTtcblxuICAvLyMgaXNKdXN0IDo6IE1heWJlIGEgLT4gQm9vbGVhblxuICAvLy5cbiAgLy8uIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBNYXliZSBpcyBhIEp1c3Q7IGBmYWxzZWAgaWYgaXQgaXMgTm90aGluZy5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuaXNKdXN0KFMuSnVzdCg0MikpXG4gIC8vLiB0cnVlXG4gIC8vLlxuICAvLy4gPiBTLmlzSnVzdChTLk5vdGhpbmcpXG4gIC8vLiBmYWxzZVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGlzSnVzdChtYXliZSkge1xuICAgIHJldHVybiBtYXliZS5pc0p1c3Q7XG4gIH1cbiAgUy5pc0p1c3QgPSBkZWYoJ2lzSnVzdCcsIHt9LCBbJE1heWJlKGEpLCAkLkJvb2xlYW5dLCBpc0p1c3QpO1xuXG4gIC8vIyBmcm9tTWF5YmUgOjogYSAtPiBNYXliZSBhIC0+IGFcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGRlZmF1bHQgdmFsdWUgYW5kIGEgTWF5YmUsIGFuZCByZXR1cm5zIHRoZSBNYXliZSdzIHZhbHVlXG4gIC8vLiBpZiB0aGUgTWF5YmUgaXMgYSBKdXN0OyB0aGUgZGVmYXVsdCB2YWx1ZSBvdGhlcndpc2UuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2Bmcm9tTWF5YmVfYF0oI2Zyb21NYXliZV8pIGFuZFxuICAvLy4gW2BtYXliZVRvTnVsbGFibGVgXSgjbWF5YmVUb051bGxhYmxlKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZnJvbU1heWJlKDAsIFMuSnVzdCg0MikpXG4gIC8vLiA0MlxuICAvLy5cbiAgLy8uID4gUy5mcm9tTWF5YmUoMCwgUy5Ob3RoaW5nKVxuICAvLy4gMFxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGZyb21NYXliZSh4LCBtYXliZSkge1xuICAgIHJldHVybiBtYXliZS5pc0p1c3QgPyBtYXliZS52YWx1ZSA6IHg7XG4gIH1cbiAgUy5mcm9tTWF5YmUgPSBkZWYoJ2Zyb21NYXliZScsIHt9LCBbYSwgJE1heWJlKGEpLCBhXSwgZnJvbU1heWJlKTtcblxuICAvLyMgZnJvbU1heWJlXyA6OiAoKCkgLT4gYSkgLT4gTWF5YmUgYSAtPiBhXG4gIC8vLlxuICAvLy4gVmFyaWFudCBvZiBbYGZyb21NYXliZWBdKCNmcm9tTWF5YmUpIHdoaWNoIHRha2VzIGEgdGh1bmsgc28gdGhlIGRlZmF1bHRcbiAgLy8uIHZhbHVlIGlzIG9ubHkgY29tcHV0ZWQgaWYgcmVxdWlyZWQuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBmdW5jdGlvbiBmaWIobikgeyByZXR1cm4gbiA8PSAxID8gbiA6IGZpYihuIC0gMikgKyBmaWIobiAtIDEpOyB9XG4gIC8vLlxuICAvLy4gPiBTLmZyb21NYXliZV8oKCkgPT4gZmliKDMwKSwgUy5KdXN0KDEwMDAwMDApKVxuICAvLy4gMTAwMDAwMFxuICAvLy5cbiAgLy8uID4gUy5mcm9tTWF5YmVfKCgpID0+IGZpYigzMCksIFMuTm90aGluZylcbiAgLy8uIDgzMjA0MFxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGZyb21NYXliZV8odGh1bmssIG1heWJlKSB7XG4gICAgcmV0dXJuIG1heWJlLmlzSnVzdCA/IG1heWJlLnZhbHVlIDogdGh1bmsoKTtcbiAgfVxuICBTLmZyb21NYXliZV8gPSBkZWYoJ2Zyb21NYXliZV8nLCB7fSwgWyQuVGh1bmsoYSksICRNYXliZShhKSwgYV0sIGZyb21NYXliZV8pO1xuXG4gIC8vIyBtYXliZVRvTnVsbGFibGUgOjogTWF5YmUgYSAtPiBOdWxsYWJsZSBhXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUgZ2l2ZW4gTWF5YmUncyB2YWx1ZSBpZiB0aGUgTWF5YmUgaXMgYSBKdXN0OyBgbnVsbGAgb3RoZXJ3aXNlLlxuICAvLy4gW051bGxhYmxlXVtdIGlzIGRlZmluZWQgaW4gW3NhbmN0dWFyeS1kZWZdW10uXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2Bmcm9tTWF5YmVgXSgjZnJvbU1heWJlKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMubWF5YmVUb051bGxhYmxlKFMuSnVzdCg0MikpXG4gIC8vLiA0MlxuICAvLy5cbiAgLy8uID4gUy5tYXliZVRvTnVsbGFibGUoUy5Ob3RoaW5nKVxuICAvLy4gbnVsbFxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIG1heWJlVG9OdWxsYWJsZShtYXliZSkge1xuICAgIHJldHVybiBtYXliZS5pc0p1c3QgPyBtYXliZS52YWx1ZSA6IG51bGw7XG4gIH1cbiAgUy5tYXliZVRvTnVsbGFibGUgPVxuICBkZWYoJ21heWJlVG9OdWxsYWJsZScsIHt9LCBbJE1heWJlKGEpLCAkLk51bGxhYmxlKGEpXSwgbWF5YmVUb051bGxhYmxlKTtcblxuICAvLyMgdG9NYXliZSA6OiBhPyAtPiBNYXliZSBhXG4gIC8vLlxuICAvLy4gVGFrZXMgYSB2YWx1ZSBhbmQgcmV0dXJucyBOb3RoaW5nIGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGA7XG4gIC8vLiBKdXN0IHRoZSB2YWx1ZSBvdGhlcndpc2UuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRvTWF5YmUobnVsbClcbiAgLy8uIE5vdGhpbmdcbiAgLy8uXG4gIC8vLiA+IFMudG9NYXliZSg0MilcbiAgLy8uIEp1c3QoNDIpXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gdG9NYXliZSh4KSB7XG4gICAgcmV0dXJuIHggPT0gbnVsbCA/IE5vdGhpbmcgOiBKdXN0KHgpO1xuICB9XG4gIFMudG9NYXliZSA9IGRlZigndG9NYXliZScsIHt9LCBbYSwgJE1heWJlKGEpXSwgdG9NYXliZSk7XG5cbiAgLy8jIG1heWJlIDo6IGIgLT4gKGEgLT4gYikgLT4gTWF5YmUgYSAtPiBiXG4gIC8vLlxuICAvLy4gVGFrZXMgYSB2YWx1ZSBvZiBhbnkgdHlwZSwgYSBmdW5jdGlvbiwgYW5kIGEgTWF5YmUuIElmIHRoZSBNYXliZSBpc1xuICAvLy4gYSBKdXN0LCB0aGUgcmV0dXJuIHZhbHVlIGlzIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIGZ1bmN0aW9uIHRvXG4gIC8vLiB0aGUgSnVzdCdzIHZhbHVlLiBPdGhlcndpc2UsIHRoZSBmaXJzdCBhcmd1bWVudCBpcyByZXR1cm5lZC5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYG1heWJlX2BdKCNtYXliZV8pLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5tYXliZSgwLCBTLnByb3AoJ2xlbmd0aCcpLCBTLkp1c3QoJ3JlZnVnZScpKVxuICAvLy4gNlxuICAvLy5cbiAgLy8uID4gUy5tYXliZSgwLCBTLnByb3AoJ2xlbmd0aCcpLCBTLk5vdGhpbmcpXG4gIC8vLiAwXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gbWF5YmUoeCwgZiwgbWF5YmUpIHtcbiAgICByZXR1cm4gZnJvbU1heWJlKHgsIFoubWFwKGYsIG1heWJlKSk7XG4gIH1cbiAgUy5tYXliZSA9IGRlZignbWF5YmUnLCB7fSwgW2IsIEZuKGEsIGIpLCAkTWF5YmUoYSksIGJdLCBtYXliZSk7XG5cbiAgLy8jIG1heWJlXyA6OiAoKCkgLT4gYikgLT4gKGEgLT4gYikgLT4gTWF5YmUgYSAtPiBiXG4gIC8vLlxuICAvLy4gVmFyaWFudCBvZiBbYG1heWJlYF0oI21heWJlKSB3aGljaCB0YWtlcyBhIHRodW5rIHNvIHRoZSBkZWZhdWx0IHZhbHVlXG4gIC8vLiBpcyBvbmx5IGNvbXB1dGVkIGlmIHJlcXVpcmVkLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gZnVuY3Rpb24gZmliKG4pIHsgcmV0dXJuIG4gPD0gMSA/IG4gOiBmaWIobiAtIDIpICsgZmliKG4gLSAxKTsgfVxuICAvLy5cbiAgLy8uID4gUy5tYXliZV8oKCkgPT4gZmliKDMwKSwgTWF0aC5zcXJ0LCBTLkp1c3QoMTAwMDAwMCkpXG4gIC8vLiAxMDAwXG4gIC8vLlxuICAvLy4gPiBTLm1heWJlXygoKSA9PiBmaWIoMzApLCBNYXRoLnNxcnQsIFMuTm90aGluZylcbiAgLy8uIDgzMjA0MFxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIG1heWJlXyh0aHVuaywgZiwgbWF5YmUpIHtcbiAgICByZXR1cm4gbWF5YmUuaXNKdXN0ID8gZihtYXliZS52YWx1ZSkgOiB0aHVuaygpO1xuICB9XG4gIFMubWF5YmVfID0gZGVmKCdtYXliZV8nLCB7fSwgWyQuVGh1bmsoYiksIEZuKGEsIGIpLCAkTWF5YmUoYSksIGJdLCBtYXliZV8pO1xuXG4gIC8vIyBqdXN0cyA6OiBBcnJheSAoTWF5YmUgYSkgLT4gQXJyYXkgYVxuICAvLy5cbiAgLy8uIFRha2VzIGFuIGFycmF5IG9mIE1heWJlcyBhbmQgcmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIGVhY2ggSnVzdCdzXG4gIC8vLiB2YWx1ZS4gRXF1aXZhbGVudCB0byBIYXNrZWxsJ3MgYGNhdE1heWJlc2AgZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BsZWZ0c2BdKCNsZWZ0cykgYW5kIFtgcmlnaHRzYF0oI3JpZ2h0cykuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmp1c3RzKFtTLkp1c3QoJ2ZvbycpLCBTLk5vdGhpbmcsIFMuSnVzdCgnYmF6JyldKVxuICAvLy4gWydmb28nLCAnYmF6J11cbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBqdXN0cyhtYXliZXMpIHtcbiAgICByZXR1cm4gWi5yZWR1Y2UoZnVuY3Rpb24oeHMsIG1heWJlKSB7XG4gICAgICBpZiAobWF5YmUuaXNKdXN0KSB4cy5wdXNoKG1heWJlLnZhbHVlKTtcbiAgICAgIHJldHVybiB4cztcbiAgICB9LCBbXSwgbWF5YmVzKTtcbiAgfVxuICBTLmp1c3RzID0gZGVmKCdqdXN0cycsIHt9LCBbJC5BcnJheSgkTWF5YmUoYSkpLCAkLkFycmF5KGEpXSwganVzdHMpO1xuXG4gIC8vIyBtYXBNYXliZSA6OiAoYSAtPiBNYXliZSBiKSAtPiBBcnJheSBhIC0+IEFycmF5IGJcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSwgYXBwbGllcyB0aGUgZnVuY3Rpb24gdG8gZWFjaCBlbGVtZW50IG9mXG4gIC8vLiB0aGUgYXJyYXksIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIFwic3VjY2Vzc2Z1bFwiIHJlc3VsdHMuIElmIHRoZSByZXN1bHQgb2ZcbiAgLy8uIGFwcGx5aW5nIHRoZSBmdW5jdGlvbiB0byBhbiBlbGVtZW50IG9mIHRoZSBhcnJheSBpcyBOb3RoaW5nLCB0aGUgcmVzdWx0XG4gIC8vLiBpcyBkaXNjYXJkZWQ7IGlmIHRoZSByZXN1bHQgaXMgYSBKdXN0LCB0aGUgSnVzdCdzIHZhbHVlIGlzIGluY2x1ZGVkIGluXG4gIC8vLiB0aGUgb3V0cHV0IGFycmF5LlxuICAvLy5cbiAgLy8uIEluIGdlbmVyYWwgdGVybXMsIGBtYXBNYXliZWAgZmlsdGVycyBhbiBhcnJheSB3aGlsZSBtYXBwaW5nIG92ZXIgaXQuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm1hcE1heWJlKFMuaGVhZCwgW1tdLCBbMSwgMiwgM10sIFtdLCBbNCwgNSwgNl0sIFtdXSlcbiAgLy8uIFsxLCA0XVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIG1hcE1heWJlKGYsIHhzKSB7XG4gICAgcmV0dXJuIGp1c3RzKFoubWFwKGYsIHhzKSk7XG4gIH1cbiAgUy5tYXBNYXliZSA9XG4gIGRlZignbWFwTWF5YmUnLCB7fSwgW0ZuKGEsICRNYXliZShiKSksICQuQXJyYXkoYSksICQuQXJyYXkoYildLCBtYXBNYXliZSk7XG5cbiAgLy8jIGVuY2FzZSA6OiAoYSAtPiBiKSAtPiBhIC0+IE1heWJlIGJcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIHVuYXJ5IGZ1bmN0aW9uIGBmYCB3aGljaCBtYXkgdGhyb3cgYW5kIGEgdmFsdWUgYHhgIG9mIGFueSB0eXBlLFxuICAvLy4gYW5kIGFwcGxpZXMgYGZgIHRvIGB4YCBpbnNpZGUgYSBgdHJ5YCBibG9jay4gSWYgYW4gZXhjZXB0aW9uIGlzIGNhdWdodCxcbiAgLy8uIHRoZSByZXR1cm4gdmFsdWUgaXMgTm90aGluZzsgb3RoZXJ3aXNlIHRoZSByZXR1cm4gdmFsdWUgaXMgSnVzdCB0aGVcbiAgLy8uIHJlc3VsdCBvZiBhcHBseWluZyBgZmAgdG8gYHhgLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgZW5jYXNlRWl0aGVyYF0oI2VuY2FzZUVpdGhlcikuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmVuY2FzZShldmFsLCAnMSArIDEnKVxuICAvLy4gSnVzdCgyKVxuICAvLy5cbiAgLy8uID4gUy5lbmNhc2UoZXZhbCwgJzEgKycpXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gZW5jYXNlKGYsIHgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEp1c3QoZih4KSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gTm90aGluZztcbiAgICB9XG4gIH1cbiAgUy5lbmNhc2UgPSBkZWYoJ2VuY2FzZScsIHt9LCBbRm4oYSwgYiksIGEsICRNYXliZShiKV0sIGVuY2FzZSk7XG5cbiAgLy8jIGVuY2FzZTIgOjogKGEgLT4gYiAtPiBjKSAtPiBhIC0+IGIgLT4gTWF5YmUgY1xuICAvLy5cbiAgLy8uIEJpbmFyeSB2ZXJzaW9uIG9mIFtgZW5jYXNlYF0oI2VuY2FzZSkuXG4gIGZ1bmN0aW9uIGVuY2FzZTIoZiwgeCwgeSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSnVzdChmKHgpKHkpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBOb3RoaW5nO1xuICAgIH1cbiAgfVxuICBTLmVuY2FzZTIgPSBkZWYoJ2VuY2FzZTInLCB7fSwgW0ZuKGEsIEZuKGIsIGMpKSwgYSwgYiwgJE1heWJlKGMpXSwgZW5jYXNlMik7XG5cbiAgLy8jIGVuY2FzZTMgOjogKGEgLT4gYiAtPiBjIC0+IGQpIC0+IGEgLT4gYiAtPiBjIC0+IE1heWJlIGRcbiAgLy8uXG4gIC8vLiBUZXJuYXJ5IHZlcnNpb24gb2YgW2BlbmNhc2VgXSgjZW5jYXNlKS5cbiAgZnVuY3Rpb24gZW5jYXNlMyhmLCB4LCB5LCB6KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKdXN0KGYoeCkoeSkoeikpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIE5vdGhpbmc7XG4gICAgfVxuICB9XG4gIFMuZW5jYXNlMyA9XG4gIGRlZignZW5jYXNlMycsIHt9LCBbRm4oYSwgRm4oYiwgRm4oYywgZCkpKSwgYSwgYiwgYywgJE1heWJlKGQpXSwgZW5jYXNlMyk7XG5cbiAgLy8jIG1heWJlVG9FaXRoZXIgOjogYSAtPiBNYXliZSBiIC0+IEVpdGhlciBhIGJcbiAgLy8uXG4gIC8vLiBDb252ZXJ0cyBhIE1heWJlIHRvIGFuIEVpdGhlci4gTm90aGluZyBiZWNvbWVzIGEgTGVmdCAoY29udGFpbmluZyB0aGVcbiAgLy8uIGZpcnN0IGFyZ3VtZW50KTsgYSBKdXN0IGJlY29tZXMgYSBSaWdodC5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYGVpdGhlclRvTWF5YmVgXSgjZWl0aGVyVG9NYXliZSkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm1heWJlVG9FaXRoZXIoJ0V4cGVjdGluZyBhbiBpbnRlZ2VyJywgUy5wYXJzZUludCgxMCwgJ3h5eicpKVxuICAvLy4gTGVmdCgnRXhwZWN0aW5nIGFuIGludGVnZXInKVxuICAvLy5cbiAgLy8uID4gUy5tYXliZVRvRWl0aGVyKCdFeHBlY3RpbmcgYW4gaW50ZWdlcicsIFMucGFyc2VJbnQoMTAsICc0MicpKVxuICAvLy4gUmlnaHQoNDIpXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gbWF5YmVUb0VpdGhlcih4LCBtYXliZSkge1xuICAgIHJldHVybiBtYXliZS5pc05vdGhpbmcgPyBMZWZ0KHgpIDogUmlnaHQobWF5YmUudmFsdWUpO1xuICB9XG4gIFMubWF5YmVUb0VpdGhlciA9XG4gIGRlZignbWF5YmVUb0VpdGhlcicsIHt9LCBbYSwgJE1heWJlKGIpLCAkRWl0aGVyKGEsIGIpXSwgbWF5YmVUb0VpdGhlcik7XG5cbiAgLy8uICMjIyBFaXRoZXIgdHlwZVxuICAvLy5cbiAgLy8uIFRoZSBFaXRoZXIgdHlwZSByZXByZXNlbnRzIHZhbHVlcyB3aXRoIHR3byBwb3NzaWJpbGl0aWVzOiBhIHZhbHVlIG9mIHR5cGVcbiAgLy8uIGBFaXRoZXIgYSBiYCBpcyBlaXRoZXIgYSBMZWZ0IHdob3NlIHZhbHVlIGlzIG9mIHR5cGUgYGFgIG9yIGEgUmlnaHQgd2hvc2VcbiAgLy8uIHZhbHVlIGlzIG9mIHR5cGUgYGJgLlxuICAvLy5cbiAgLy8uIFRoZSBFaXRoZXIgdHlwZSBzYXRpc2ZpZXMgdGhlIFtPcmRdW10sIFtTZW1pZ3JvdXBdW10sIFtNb25hZF1bXSxcbiAgLy8uIFtBbHRdW10sIFtUcmF2ZXJzYWJsZV1bXSwgW0V4dGVuZF1bXSwgYW5kIFtCaWZ1bmN0b3JdW10gc3BlY2lmaWNhdGlvbnMuXG5cbiAgLy8jIEVpdGhlclR5cGUgOjogVHlwZSAtPiBUeXBlIC0+IFR5cGVcbiAgLy8uXG4gIC8vLiBBIFtgQmluYXJ5VHlwZWBdW0JpbmFyeVR5cGVdIGZvciB1c2Ugd2l0aCBbc2FuY3R1YXJ5LWRlZl1bXS5cbiAgUy5FaXRoZXJUeXBlID0gJEVpdGhlcjtcblxuICAvLyMgRWl0aGVyIDo6IFR5cGVSZXAgRWl0aGVyXG4gIC8vLlxuICAvLy4gVGhlIFt0eXBlIHJlcHJlc2VudGF0aXZlXSgjdHlwZS1yZXByZXNlbnRhdGl2ZXMpIGZvciB0aGUgRWl0aGVyIHR5cGUuXG4gIHZhciBFaXRoZXIgPSBTLkVpdGhlciA9IHtwcm90b3R5cGU6IF9FaXRoZXIucHJvdG90eXBlfTtcblxuICBFaXRoZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRWl0aGVyO1xuXG4gIGZ1bmN0aW9uIF9FaXRoZXIodGFnLCB2YWx1ZSkge1xuICAgIHRoaXMuaXNMZWZ0ID0gdGFnID09PSAnTGVmdCc7XG4gICAgdGhpcy5pc1JpZ2h0ID0gdGFnID09PSAnUmlnaHQnO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblxuICAgIC8vICBBZGQgXCJmYW50YXN5LWxhbmQvY29uY2F0XCIgbWV0aG9kIGNvbmRpdGlvbmFsbHkgc28gdGhhdCBMZWZ0KCdhYmMnKVxuICAgIC8vICBhbmQgUmlnaHQoJ2FiYycpIHNhdGlzZnkgdGhlIHJlcXVpcmVtZW50cyBvZiBTZW1pZ3JvdXAgYnV0IExlZnQoMTIzKVxuICAgIC8vICBhbmQgUmlnaHQoMTIzKSBkbyBub3QuXG4gICAgaWYgKFouU2VtaWdyb3VwLnRlc3QodGhpcy52YWx1ZSkpIHtcbiAgICAgIHRoaXNbJ2ZhbnRhc3ktbGFuZC9jb25jYXQnXSA9IEVpdGhlciRwcm90b3R5cGUkY29uY2F0O1xuICAgIH1cblxuICAgIGlmIChaLlNldG9pZC50ZXN0KHRoaXMudmFsdWUpKSB7XG4gICAgICB0aGlzWydmYW50YXN5LWxhbmQvZXF1YWxzJ10gPSBFaXRoZXIkcHJvdG90eXBlJGVxdWFscztcbiAgICB9XG5cbiAgICBpZiAoWi5PcmQudGVzdCh0aGlzLnZhbHVlKSkge1xuICAgICAgdGhpc1snZmFudGFzeS1sYW5kL2x0ZSddID0gRWl0aGVyJHByb3RvdHlwZSRsdGU7XG4gICAgfVxuICB9XG5cbiAgLy8jIExlZnQgOjogYSAtPiBFaXRoZXIgYSBiXG4gIC8vLlxuICAvLy4gVGFrZXMgYSB2YWx1ZSBvZiBhbnkgdHlwZSBhbmQgcmV0dXJucyBhIExlZnQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLkxlZnQoJ0Nhbm5vdCBkaXZpZGUgYnkgemVybycpXG4gIC8vLiBMZWZ0KCdDYW5ub3QgZGl2aWRlIGJ5IHplcm8nKVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIExlZnQoeCkge1xuICAgIHJldHVybiBuZXcgX0VpdGhlcignTGVmdCcsIHgpO1xuICB9XG4gIFMuTGVmdCA9IGRlZignTGVmdCcsIHt9LCBbYSwgJEVpdGhlcihhLCBiKV0sIExlZnQpO1xuXG4gIC8vIyBSaWdodCA6OiBiIC0+IEVpdGhlciBhIGJcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIHZhbHVlIG9mIGFueSB0eXBlIGFuZCByZXR1cm5zIGEgUmlnaHQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLlJpZ2h0KDQyKVxuICAvLy4gUmlnaHQoNDIpXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gUmlnaHQoeCkge1xuICAgIHJldHVybiBuZXcgX0VpdGhlcignUmlnaHQnLCB4KTtcbiAgfVxuICBTLlJpZ2h0ID0gZGVmKCdSaWdodCcsIHt9LCBbYiwgJEVpdGhlcihhLCBiKV0sIFJpZ2h0KTtcblxuICAvLyMgRWl0aGVyLkBAdHlwZSA6OiBTdHJpbmdcbiAgLy8uXG4gIC8vLiBFaXRoZXIgdHlwZSBpZGVudGlmaWVyLCBgJ3NhbmN0dWFyeS9FaXRoZXInYC5cbiAgRWl0aGVyWydAQHR5cGUnXSA9IGVpdGhlclR5cGVJZGVudDtcblxuICAvLyMgRWl0aGVyLmZhbnRhc3ktbGFuZC9vZiA6OiBiIC0+IEVpdGhlciBhIGJcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIHZhbHVlIG9mIGFueSB0eXBlIGFuZCByZXR1cm5zIGEgUmlnaHQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUuXG4gIC8vLlxuICAvLy4gSXQgaXMgaWRpb21hdGljIHRvIHVzZSBbYG9mYF0oI29mKSByYXRoZXIgdGhhbiB1c2UgdGhpcyBmdW5jdGlvblxuICAvLy4gZGlyZWN0bHkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm9mKFMuRWl0aGVyLCA0MilcbiAgLy8uIFJpZ2h0KDQyKVxuICAvLy4gYGBgXG4gIEVpdGhlclsnZmFudGFzeS1sYW5kL29mJ10gPSBSaWdodDtcblxuICAvLyMgRWl0aGVyI2lzTGVmdCA6OiBFaXRoZXIgYSBiIH4+IEJvb2xlYW5cbiAgLy8uXG4gIC8vLiBgdHJ1ZWAgaWYgYHRoaXNgIGlzIGEgTGVmdDsgYGZhbHNlYCBpZiBgdGhpc2AgaXMgYSBSaWdodC5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuTGVmdCgnQ2Fubm90IGRpdmlkZSBieSB6ZXJvJykuaXNMZWZ0XG4gIC8vLiB0cnVlXG4gIC8vLlxuICAvLy4gPiBTLlJpZ2h0KDQyKS5pc0xlZnRcbiAgLy8uIGZhbHNlXG4gIC8vLiBgYGBcblxuICAvLyMgRWl0aGVyI2lzUmlnaHQgOjogRWl0aGVyIGEgYiB+PiBCb29sZWFuXG4gIC8vLlxuICAvLy4gYHRydWVgIGlmIGB0aGlzYCBpcyBhIFJpZ2h0OyBgZmFsc2VgIGlmIGB0aGlzYCBpcyBhIExlZnQuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLlJpZ2h0KDQyKS5pc1JpZ2h0XG4gIC8vLiB0cnVlXG4gIC8vLlxuICAvLy4gPiBTLkxlZnQoJ0Nhbm5vdCBkaXZpZGUgYnkgemVybycpLmlzUmlnaHRcbiAgLy8uIGZhbHNlXG4gIC8vLiBgYGBcblxuICAvLyMgRWl0aGVyI3RvU3RyaW5nIDo6IEVpdGhlciBhIGIgfj4gKCkgLT4gU3RyaW5nXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBFaXRoZXIuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRvU3RyaW5nKFMuTGVmdCgnQ2Fubm90IGRpdmlkZSBieSB6ZXJvJykpXG4gIC8vLiAnTGVmdChcIkNhbm5vdCBkaXZpZGUgYnkgemVyb1wiKSdcbiAgLy8uXG4gIC8vLiA+IFMudG9TdHJpbmcoUy5SaWdodChbMSwgMiwgM10pKVxuICAvLy4gJ1JpZ2h0KFsxLCAyLCAzXSknXG4gIC8vLiBgYGBcbiAgRWl0aGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAodGhpcy5pc0xlZnQgPyAnTGVmdCcgOiAnUmlnaHQnKSArXG4gICAgICAgICAgICcoJyArIFoudG9TdHJpbmcodGhpcy52YWx1ZSkgKyAnKSc7XG4gIH07XG5cbiAgLy8jIEVpdGhlciNpbnNwZWN0IDo6IEVpdGhlciBhIGIgfj4gKCkgLT4gU3RyaW5nXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBFaXRoZXIuIFRoaXMgbWV0aG9kIGlzIHVzZWQgYnlcbiAgLy8uIGB1dGlsLmluc3BlY3RgIGFuZCB0aGUgUkVQTCB0byBmb3JtYXQgYSBFaXRoZXIgZm9yIGRpc3BsYXkuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BFaXRoZXIjdG9TdHJpbmdgXVtdLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5MZWZ0KCdDYW5ub3QgZGl2aWRlIGJ5IHplcm8nKS5pbnNwZWN0KClcbiAgLy8uICdMZWZ0KFwiQ2Fubm90IGRpdmlkZSBieSB6ZXJvXCIpJ1xuICAvLy5cbiAgLy8uID4gUy5SaWdodChbMSwgMiwgM10pLmluc3BlY3QoKVxuICAvLy4gJ1JpZ2h0KFsxLCAyLCAzXSknXG4gIC8vLiBgYGBcbiAgRWl0aGVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnRvU3RyaW5nKCk7IH07XG5cbiAgLy8jIEVpdGhlciNmYW50YXN5LWxhbmQvZXF1YWxzIDo6IChTZXRvaWQgYSwgU2V0b2lkIGIpID0+IEVpdGhlciBhIGIgfj4gRWl0aGVyIGEgYiAtPiBCb29sZWFuXG4gIC8vLlxuICAvLy4gVGFrZXMgYSB2YWx1ZSBgZWAgb2YgdGhlIHNhbWUgdHlwZSBhbmQgcmV0dXJucyBgdHJ1ZWAgaWY6XG4gIC8vLlxuICAvLy4gICAtIGB0aGlzYCBhbmQgYGVgIGFyZSBib3RoIExlZnRzIG9yIGJvdGggUmlnaHRzLCBhbmQgdGhlaXIgdmFsdWVzIGFyZVxuICAvLy4gICAgIGVxdWFsIGFjY29yZGluZyB0byBbYFouZXF1YWxzYF1bXS5cbiAgLy8uXG4gIC8vLiBJdCBpcyBpZGlvbWF0aWMgdG8gdXNlIFtgZXF1YWxzYF0oI2VxdWFscykgcmF0aGVyIHRoYW4gdXNlIHRoaXMgbWV0aG9kXG4gIC8vLiBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZXF1YWxzKFMuUmlnaHQoWzEsIDIsIDNdKSwgUy5SaWdodChbMSwgMiwgM10pKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5lcXVhbHMoUy5SaWdodChbMSwgMiwgM10pLCBTLkxlZnQoWzEsIDIsIDNdKSlcbiAgLy8uIGZhbHNlXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gRWl0aGVyJHByb3RvdHlwZSRlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5pc0xlZnQgPT09IG90aGVyLmlzTGVmdCAmJiBaLmVxdWFscyh0aGlzLnZhbHVlLCBvdGhlci52YWx1ZSk7XG4gIH1cblxuICAvLyMgRWl0aGVyI2ZhbnRhc3ktbGFuZC9sdGUgOjogKE9yZCBhLCBPcmQgYikgPT4gRWl0aGVyIGEgYiB+PiBFaXRoZXIgYSBiIC0+IEJvb2xlYW5cbiAgLy8uXG4gIC8vLiBUYWtlcyBhIHZhbHVlIGBlYCBvZiB0aGUgc2FtZSB0eXBlIGFuZCByZXR1cm5zIGB0cnVlYCBpZjpcbiAgLy8uXG4gIC8vLiAgIC0gYHRoaXNgIGlzIGEgTGVmdCBhbmQgYGVgIGlzIGEgUmlnaHQ7IG9yXG4gIC8vLlxuICAvLy4gICAtIGB0aGlzYCBhbmQgYGVgIGFyZSBib3RoIExlZnRzIG9yIGJvdGggUmlnaHRzLCBhbmQgdGhlIHZhbHVlIG9mIGB0aGlzYFxuICAvLy4gICAgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdmFsdWUgb2YgYGVgIGFjY29yZGluZyB0byBbYFoubHRlYF1bXS5cbiAgLy8uXG4gIC8vLiBJdCBpcyBpZGlvbWF0aWMgdG8gdXNlIFtgbHRlYF0oI2x0ZSkgb3IgW2BsdGVfYF0oI2x0ZV8pIHJhdGhlciB0aGFuIHVzZVxuICAvLy4gdGhpcyBtZXRob2QgZGlyZWN0bHkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmx0ZV8oUy5MZWZ0KDEwKSwgUy5SaWdodCgwKSlcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMubHRlXyhTLlJpZ2h0KDApLCBTLkxlZnQoMTApKVxuICAvLy4gZmFsc2VcbiAgLy8uXG4gIC8vLiA+IFMubHRlXyhTLlJpZ2h0KDApLCBTLlJpZ2h0KDEpKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5sdGVfKFMuUmlnaHQoMSksIFMuUmlnaHQoMCkpXG4gIC8vLiBmYWxzZVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIEVpdGhlciRwcm90b3R5cGUkbHRlKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNMZWZ0ID09PSBvdGhlci5pc0xlZnQgP1xuICAgICAgWi5sdGUodGhpcy52YWx1ZSwgb3RoZXIudmFsdWUpIDpcbiAgICAgIHRoaXMuaXNMZWZ0O1xuICB9XG5cbiAgLy8jIEVpdGhlciNmYW50YXN5LWxhbmQvY29uY2F0IDo6IChTZW1pZ3JvdXAgYSwgU2VtaWdyb3VwIGIpID0+IEVpdGhlciBhIGIgfj4gRWl0aGVyIGEgYiAtPiBFaXRoZXIgYSBiXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGNvbmNhdGVuYXRpbmcgdHdvIEVpdGhlciB2YWx1ZXMgb2YgdGhlIHNhbWUgdHlwZS5cbiAgLy8uIGBhYCBtdXN0IGhhdmUgYSBbU2VtaWdyb3VwXVtdLCBhcyBtdXN0IGBiYC5cbiAgLy8uXG4gIC8vLiBJZiBgdGhpc2AgaXMgYSBMZWZ0IGFuZCB0aGUgYXJndW1lbnQgaXMgYSBMZWZ0LCB0aGlzIG1ldGhvZCByZXR1cm5zIGFcbiAgLy8uIExlZnQgd2hvc2UgdmFsdWUgaXMgdGhlIHJlc3VsdCBvZiBjb25jYXRlbmF0aW5nIHRoaXMgTGVmdCdzIHZhbHVlIGFuZFxuICAvLy4gdGhlIGdpdmVuIExlZnQncyB2YWx1ZS5cbiAgLy8uXG4gIC8vLiBJZiBgdGhpc2AgaXMgYSBSaWdodCBhbmQgdGhlIGFyZ3VtZW50IGlzIGEgUmlnaHQsIHRoaXMgbWV0aG9kIHJldHVybnMgYVxuICAvLy4gUmlnaHQgd2hvc2UgdmFsdWUgaXMgdGhlIHJlc3VsdCBvZiBjb25jYXRlbmF0aW5nIHRoaXMgUmlnaHQncyB2YWx1ZSBhbmRcbiAgLy8uIHRoZSBnaXZlbiBSaWdodCdzIHZhbHVlLlxuICAvLy5cbiAgLy8uIE90aGVyd2lzZSwgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgUmlnaHQuXG4gIC8vLlxuICAvLy4gSXQgaXMgaWRpb21hdGljIHRvIHVzZSBbYGNvbmNhdGBdKCNjb25jYXQpIHJhdGhlciB0aGFuIHVzZSB0aGlzIG1ldGhvZFxuICAvLy4gZGlyZWN0bHkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmNvbmNhdChTLkxlZnQoJ2FiYycpLCBTLkxlZnQoJ2RlZicpKVxuICAvLy4gTGVmdCgnYWJjZGVmJylcbiAgLy8uXG4gIC8vLiA+IFMuY29uY2F0KFMuUmlnaHQoWzEsIDIsIDNdKSwgUy5SaWdodChbNCwgNSwgNl0pKVxuICAvLy4gUmlnaHQoWzEsIDIsIDMsIDQsIDUsIDZdKVxuICAvLy5cbiAgLy8uID4gUy5jb25jYXQoUy5MZWZ0KCdhYmMnKSwgUy5SaWdodChbMSwgMiwgM10pKVxuICAvLy4gUmlnaHQoWzEsIDIsIDNdKVxuICAvLy5cbiAgLy8uID4gUy5jb25jYXQoUy5SaWdodChbMSwgMiwgM10pLCBTLkxlZnQoJ2FiYycpKVxuICAvLy4gUmlnaHQoWzEsIDIsIDNdKVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIEVpdGhlciRwcm90b3R5cGUkY29uY2F0KG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNMZWZ0ID9cbiAgICAgIG90aGVyLmlzTGVmdCA/IExlZnQoWi5jb25jYXQodGhpcy52YWx1ZSwgb3RoZXIudmFsdWUpKSA6IG90aGVyIDpcbiAgICAgIG90aGVyLmlzTGVmdCA/IHRoaXMgOiBSaWdodChaLmNvbmNhdCh0aGlzLnZhbHVlLCBvdGhlci52YWx1ZSkpO1xuICB9XG5cbiAgLy8jIEVpdGhlciNmYW50YXN5LWxhbmQvbWFwIDo6IEVpdGhlciBhIGIgfj4gKGIgLT4gYykgLT4gRWl0aGVyIGEgY1xuICAvLy5cbiAgLy8uIFRha2VzIGEgZnVuY3Rpb24gYW5kIHJldHVybnMgYHRoaXNgIGlmIGB0aGlzYCBpcyBhIExlZnQ7IG90aGVyd2lzZSBpdFxuICAvLy4gcmV0dXJucyBhIFJpZ2h0IHdob3NlIHZhbHVlIGlzIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIGZ1bmN0aW9uIHRvXG4gIC8vLiB0aGlzIFJpZ2h0J3MgdmFsdWUuXG4gIC8vLlxuICAvLy4gSXQgaXMgaWRpb21hdGljIHRvIHVzZSBbYG1hcGBdKCNtYXApIHJhdGhlciB0aGFuIHVzZSB0aGlzIG1ldGhvZFxuICAvLy4gZGlyZWN0bHkuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BFaXRoZXIjZmFudGFzeS1sYW5kL2JpbWFwYF1bXS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMubWFwKE1hdGguc3FydCwgUy5MZWZ0KCdDYW5ub3QgZGl2aWRlIGJ5IHplcm8nKSlcbiAgLy8uIExlZnQoJ0Nhbm5vdCBkaXZpZGUgYnkgemVybycpXG4gIC8vLlxuICAvLy4gPiBTLm1hcChNYXRoLnNxcnQsIFMuUmlnaHQoOSkpXG4gIC8vLiBSaWdodCgzKVxuICAvLy4gYGBgXG4gIEVpdGhlci5wcm90b3R5cGVbJ2ZhbnRhc3ktbGFuZC9tYXAnXSA9IGZ1bmN0aW9uKGYpIHtcbiAgICByZXR1cm4gdGhpcy5pc1JpZ2h0ID8gUmlnaHQoZih0aGlzLnZhbHVlKSkgOiB0aGlzO1xuICB9O1xuXG4gIC8vIyBFaXRoZXIjZmFudGFzeS1sYW5kL2JpbWFwIDo6IEVpdGhlciBhIGIgfj4gKGEgLT4gYywgYiAtPiBkKSAtPiBFaXRoZXIgYyBkXG4gIC8vLlxuICAvLy4gVGFrZXMgdHdvIGZ1bmN0aW9ucyBhbmQgcmV0dXJuczpcbiAgLy8uXG4gIC8vLiAgIC0gYSBMZWZ0IHdob3NlIHZhbHVlIGlzIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIGZpcnN0IGZ1bmN0aW9uXG4gIC8vLiAgICAgdG8gdGhpcyBMZWZ0J3MgdmFsdWUgaWYgYHRoaXNgIGlzIGEgTGVmdDsgb3RoZXJ3aXNlXG4gIC8vLlxuICAvLy4gICAtIGEgUmlnaHQgd2hvc2UgdmFsdWUgaXMgdGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgc2Vjb25kIGZ1bmN0aW9uXG4gIC8vLiAgICAgdG8gdGhpcyBSaWdodCdzIHZhbHVlLlxuICAvLy5cbiAgLy8uIFNpbWlsYXIgdG8gW2BFaXRoZXIjZmFudGFzeS1sYW5kL21hcGBdW10sIGJ1dCBzdXBwb3J0cyBtYXBwaW5nIG92ZXIgdGhlXG4gIC8vLiBsZWZ0IHNpZGUgYXMgd2VsbCBhcyB0aGUgcmlnaHQgc2lkZS5cbiAgLy8uXG4gIC8vLiBJdCBpcyBpZGlvbWF0aWMgdG8gdXNlIFtgYmltYXBgXSgjYmltYXApIHJhdGhlciB0aGFuIHVzZSB0aGlzIG1ldGhvZFxuICAvLy4gZGlyZWN0bHkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmJpbWFwKFMudG9VcHBlciwgUy5hZGQoMSksIFMuTGVmdCgnYWJjJykpXG4gIC8vLiBMZWZ0KCdBQkMnKVxuICAvLy5cbiAgLy8uID4gUy5iaW1hcChTLnRvVXBwZXIsIFMuYWRkKDEpLCBTLlJpZ2h0KDQyKSlcbiAgLy8uIFJpZ2h0KDQzKVxuICAvLy4gYGBgXG4gIEVpdGhlci5wcm90b3R5cGVbJ2ZhbnRhc3ktbGFuZC9iaW1hcCddID0gZnVuY3Rpb24oZiwgZykge1xuICAgIHJldHVybiB0aGlzLmlzTGVmdCA/IExlZnQoZih0aGlzLnZhbHVlKSkgOiBSaWdodChnKHRoaXMudmFsdWUpKTtcbiAgfTtcblxuICAvLyMgRWl0aGVyI2ZhbnRhc3ktbGFuZC9hcCA6OiBFaXRoZXIgYSBiIH4+IEVpdGhlciBhIChiIC0+IGMpIC0+IEVpdGhlciBhIGNcbiAgLy8uXG4gIC8vLiBUYWtlcyBhbiBFaXRoZXIgYW5kIHJldHVybnMgYSBMZWZ0IHVubGVzcyBgdGhpc2AgaXMgYSBSaWdodCAqYW5kKiB0aGVcbiAgLy8uIGFyZ3VtZW50IGlzIGEgUmlnaHQsIGluIHdoaWNoIGNhc2UgaXQgcmV0dXJucyBhIFJpZ2h0IHdob3NlIHZhbHVlIGlzXG4gIC8vLiB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBnaXZlbiBSaWdodCdzIHZhbHVlIHRvIHRoaXMgUmlnaHQncyB2YWx1ZS5cbiAgLy8uXG4gIC8vLiBJdCBpcyBpZGlvbWF0aWMgdG8gdXNlIFtgYXBgXSgjYXApIHJhdGhlciB0aGFuIHVzZSB0aGlzIG1ldGhvZCBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuYXAoUy5MZWZ0KCdObyBzdWNoIGZ1bmN0aW9uJyksIFMuTGVmdCgnQ2Fubm90IGRpdmlkZSBieSB6ZXJvJykpXG4gIC8vLiBMZWZ0KCdObyBzdWNoIGZ1bmN0aW9uJylcbiAgLy8uXG4gIC8vLiA+IFMuYXAoUy5MZWZ0KCdObyBzdWNoIGZ1bmN0aW9uJyksIFMuUmlnaHQoOSkpXG4gIC8vLiBMZWZ0KCdObyBzdWNoIGZ1bmN0aW9uJylcbiAgLy8uXG4gIC8vLiA+IFMuYXAoUy5SaWdodChNYXRoLnNxcnQpLCBTLkxlZnQoJ0Nhbm5vdCBkaXZpZGUgYnkgemVybycpKVxuICAvLy4gTGVmdCgnQ2Fubm90IGRpdmlkZSBieSB6ZXJvJylcbiAgLy8uXG4gIC8vLiA+IFMuYXAoUy5SaWdodChNYXRoLnNxcnQpLCBTLlJpZ2h0KDkpKVxuICAvLy4gUmlnaHQoMylcbiAgLy8uIGBgYFxuICBFaXRoZXIucHJvdG90eXBlWydmYW50YXN5LWxhbmQvYXAnXSA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgcmV0dXJuIG90aGVyLmlzUmlnaHQgPyBaLm1hcChvdGhlci52YWx1ZSwgdGhpcykgOiBvdGhlcjtcbiAgfTtcblxuICAvLyMgRWl0aGVyI2ZhbnRhc3ktbGFuZC9jaGFpbiA6OiBFaXRoZXIgYSBiIH4+IChiIC0+IEVpdGhlciBhIGMpIC0+IEVpdGhlciBhIGNcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGZ1bmN0aW9uIGFuZCByZXR1cm5zIGB0aGlzYCBpZiBgdGhpc2AgaXMgYSBMZWZ0OyBvdGhlcndpc2VcbiAgLy8uIGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgZnVuY3Rpb24gdG8gdGhpcyBSaWdodCdzIHZhbHVlLlxuICAvLy5cbiAgLy8uIEl0IGlzIGlkaW9tYXRpYyB0byB1c2UgW2BjaGFpbmBdKCNjaGFpbikgcmF0aGVyIHRoYW4gdXNlIHRoaXMgbWV0aG9kXG4gIC8vLiBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IGdsb2JhbC5zcXJ0ID0gbiA9PlxuICAvLy4gLiAgIG4gPCAwID8gUy5MZWZ0KCdDYW5ub3QgcmVwcmVzZW50IHNxdWFyZSByb290IG9mIG5lZ2F0aXZlIG51bWJlcicpXG4gIC8vLiAuICAgICAgICAgOiBTLlJpZ2h0KE1hdGguc3FydChuKSlcbiAgLy8uIHNxcnRcbiAgLy8uXG4gIC8vLiA+IFMuY2hhaW4oc3FydCwgUy5MZWZ0KCdDYW5ub3QgZGl2aWRlIGJ5IHplcm8nKSlcbiAgLy8uIExlZnQoJ0Nhbm5vdCBkaXZpZGUgYnkgemVybycpXG4gIC8vLlxuICAvLy4gPiBTLmNoYWluKHNxcnQsIFMuUmlnaHQoLTEpKVxuICAvLy4gTGVmdCgnQ2Fubm90IHJlcHJlc2VudCBzcXVhcmUgcm9vdCBvZiBuZWdhdGl2ZSBudW1iZXInKVxuICAvLy5cbiAgLy8uID4gUy5jaGFpbihzcXJ0LCBTLlJpZ2h0KDI1KSlcbiAgLy8uIFJpZ2h0KDUpXG4gIC8vLiBgYGBcbiAgRWl0aGVyLnByb3RvdHlwZVsnZmFudGFzeS1sYW5kL2NoYWluJ10gPSBmdW5jdGlvbihmKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNSaWdodCA/IGYodGhpcy52YWx1ZSkgOiB0aGlzO1xuICB9O1xuXG4gIC8vIyBFaXRoZXIjZmFudGFzeS1sYW5kL2FsdCA6OiBFaXRoZXIgYSBiIH4+IEVpdGhlciBhIGIgLT4gRWl0aGVyIGEgYlxuICAvLy5cbiAgLy8uIENob29zZXMgYmV0d2VlbiBgdGhpc2AgYW5kIHRoZSBvdGhlciBFaXRoZXIgcHJvdmlkZWQgYXMgYW4gYXJndW1lbnQuXG4gIC8vLiBSZXR1cm5zIGB0aGlzYCBpZiBgdGhpc2AgaXMgYSBSaWdodDsgdGhlIG90aGVyIEVpdGhlciBvdGhlcndpc2UuXG4gIC8vLlxuICAvLy4gSXQgaXMgaWRpb21hdGljIHRvIHVzZSBbYGFsdGBdKCNhbHQpIHJhdGhlciB0aGFuIHVzZSB0aGlzIG1ldGhvZFxuICAvLy4gZGlyZWN0bHkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmFsdChTLkxlZnQoJ0EnKSwgUy5MZWZ0KCdCJykpXG4gIC8vLiBMZWZ0KCdCJylcbiAgLy8uXG4gIC8vLiA+IFMuYWx0KFMuTGVmdCgnQycpLCBTLlJpZ2h0KDEpKVxuICAvLy4gUmlnaHQoMSlcbiAgLy8uXG4gIC8vLiA+IFMuYWx0KFMuUmlnaHQoMiksIFMuTGVmdCgnRCcpKVxuICAvLy4gUmlnaHQoMilcbiAgLy8uXG4gIC8vLiA+IFMuYWx0KFMuUmlnaHQoMyksIFMuUmlnaHQoNCkpXG4gIC8vLiBSaWdodCgzKVxuICAvLy4gYGBgXG4gIEVpdGhlci5wcm90b3R5cGVbJ2ZhbnRhc3ktbGFuZC9hbHQnXSA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNSaWdodCA/IHRoaXMgOiBvdGhlcjtcbiAgfTtcblxuICAvLyMgRWl0aGVyI2ZhbnRhc3ktbGFuZC9yZWR1Y2UgOjogRWl0aGVyIGEgYiB+PiAoKGMsIGIpIC0+IGMsIGMpIC0+IGNcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGZ1bmN0aW9uIGFuZCBhbiBpbml0aWFsIHZhbHVlIG9mIGFueSB0eXBlLCBhbmQgcmV0dXJuczpcbiAgLy8uXG4gIC8vLiAgIC0gdGhlIGluaXRpYWwgdmFsdWUgaWYgYHRoaXNgIGlzIGEgTGVmdDsgb3RoZXJ3aXNlXG4gIC8vLlxuICAvLy4gICAtIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIGZ1bmN0aW9uIHRvIHRoZSBpbml0aWFsIHZhbHVlIGFuZCB0aGlzXG4gIC8vLiAgICAgUmlnaHQncyB2YWx1ZS5cbiAgLy8uXG4gIC8vLiBJdCBpcyBpZGlvbWF0aWMgdG8gdXNlIFtgcmVkdWNlYF0oI3JlZHVjZSkgcmF0aGVyIHRoYW4gdXNlIHRoaXMgbWV0aG9kXG4gIC8vLiBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMucmVkdWNlKFMuY3VycnkyKE1hdGgucG93KSwgMTAsIFMuTGVmdCgnQ2Fubm90IGRpdmlkZSBieSB6ZXJvJykpXG4gIC8vLiAxMFxuICAvLy5cbiAgLy8uID4gUy5yZWR1Y2UoUy5jdXJyeTIoTWF0aC5wb3cpLCAxMCwgUy5SaWdodCgzKSlcbiAgLy8uIDEwMDBcbiAgLy8uIGBgYFxuICBFaXRoZXIucHJvdG90eXBlWydmYW50YXN5LWxhbmQvcmVkdWNlJ10gPSBmdW5jdGlvbihmLCB4KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNSaWdodCA/IGYoeCwgdGhpcy52YWx1ZSkgOiB4O1xuICB9O1xuXG4gIC8vIyBFaXRoZXIjZmFudGFzeS1sYW5kL3RyYXZlcnNlIDo6IEFwcGxpY2F0aXZlIGYgPT4gRWl0aGVyIGEgYiB+PiAoVHlwZVJlcCBmLCBiIC0+IGYgYykgLT4gZiAoRWl0aGVyIGEgYylcbiAgLy8uXG4gIC8vLiBUYWtlcyB0aGUgdHlwZSByZXByZXNlbnRhdGl2ZSBvZiBzb21lIFtBcHBsaWNhdGl2ZV1bXSBhbmQgYSBmdW5jdGlvblxuICAvLy4gd2hpY2ggcmV0dXJucyBhIHZhbHVlIG9mIHRoYXQgQXBwbGljYXRpdmUsIGFuZCByZXR1cm5zOlxuICAvLy5cbiAgLy8uICAgLSB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSB0eXBlIHJlcHJlc2VudGF0aXZlJ3MgW2BvZmBdW10gZnVuY3Rpb24gdG9cbiAgLy8uICAgICBgdGhpc2AgaWYgYHRoaXNgIGlzIGEgTGVmdDsgb3RoZXJ3aXNlXG4gIC8vLlxuICAvLy4gICAtIHRoZSByZXN1bHQgb2YgbWFwcGluZyBbYFJpZ2h0YF0oI1JpZ2h0KSBvdmVyIHRoZSByZXN1bHQgb2YgYXBwbHlpbmdcbiAgLy8uICAgICB0aGUgZmlyc3QgZnVuY3Rpb24gdG8gdGhpcyBSaWdodCdzIHZhbHVlLlxuICAvLy5cbiAgLy8uIEl0IGlzIGlkaW9tYXRpYyB0byB1c2UgW2B0cmF2ZXJzZWBdKCN0cmF2ZXJzZSkgcmF0aGVyIHRoYW4gdXNlIHRoaXNcbiAgLy8uIG1ldGhvZCBkaXJlY3RseS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMudHJhdmVyc2UoQXJyYXksIFMud29yZHMsIFMuTGVmdCgnUmVxdWVzdCBmYWlsZWQnKSlcbiAgLy8uIFtMZWZ0KCdSZXF1ZXN0IGZhaWxlZCcpXVxuICAvLy5cbiAgLy8uID4gUy50cmF2ZXJzZShBcnJheSwgUy53b3JkcywgUy5SaWdodCgnZm9vIGJhciBiYXonKSlcbiAgLy8uIFtSaWdodCgnZm9vJyksIFJpZ2h0KCdiYXInKSwgUmlnaHQoJ2JheicpXVxuICAvLy4gYGBgXG4gIEVpdGhlci5wcm90b3R5cGVbJ2ZhbnRhc3ktbGFuZC90cmF2ZXJzZSddID0gZnVuY3Rpb24odHlwZVJlcCwgZikge1xuICAgIHJldHVybiB0aGlzLmlzUmlnaHQgPyBaLm1hcChSaWdodCwgZih0aGlzLnZhbHVlKSkgOiBaLm9mKHR5cGVSZXAsIHRoaXMpO1xuICB9O1xuXG4gIC8vIyBFaXRoZXIjZmFudGFzeS1sYW5kL2V4dGVuZCA6OiBFaXRoZXIgYSBiIH4+IChFaXRoZXIgYSBiIC0+IGMpIC0+IEVpdGhlciBhIGNcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGZ1bmN0aW9uIGFuZCByZXR1cm5zIGB0aGlzYCBpZiBgdGhpc2AgaXMgYSBMZWZ0OyBvdGhlcndpc2UgaXRcbiAgLy8uIHJldHVybnMgYSBSaWdodCB3aG9zZSB2YWx1ZSBpcyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBmdW5jdGlvbiB0b1xuICAvLy4gYHRoaXNgLlxuICAvLy5cbiAgLy8uIEl0IGlzIGlkaW9tYXRpYyB0byB1c2UgW2BleHRlbmRgXSgjZXh0ZW5kKSByYXRoZXIgdGhhbiB1c2UgdGhpcyBtZXRob2RcbiAgLy8uIGRpcmVjdGx5LlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5leHRlbmQoeCA9PiB4LnZhbHVlICsgMSwgUy5MZWZ0KCdDYW5ub3QgZGl2aWRlIGJ5IHplcm8nKSlcbiAgLy8uIExlZnQoJ0Nhbm5vdCBkaXZpZGUgYnkgemVybycpXG4gIC8vLlxuICAvLy4gPiBTLmV4dGVuZCh4ID0+IHgudmFsdWUgKyAxLCBTLlJpZ2h0KDQyKSlcbiAgLy8uIFJpZ2h0KDQzKVxuICAvLy4gYGBgXG4gIEVpdGhlci5wcm90b3R5cGVbJ2ZhbnRhc3ktbGFuZC9leHRlbmQnXSA9IGZ1bmN0aW9uKGYpIHtcbiAgICByZXR1cm4gdGhpcy5pc0xlZnQgPyB0aGlzIDogUmlnaHQoZih0aGlzKSk7XG4gIH07XG5cbiAgLy8jIGlzTGVmdCA6OiBFaXRoZXIgYSBiIC0+IEJvb2xlYW5cbiAgLy8uXG4gIC8vLiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gRWl0aGVyIGlzIGEgTGVmdDsgYGZhbHNlYCBpZiBpdCBpcyBhIFJpZ2h0LlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5pc0xlZnQoUy5MZWZ0KCdDYW5ub3QgZGl2aWRlIGJ5IHplcm8nKSlcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMuaXNMZWZ0KFMuUmlnaHQoNDIpKVxuICAvLy4gZmFsc2VcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBpc0xlZnQoZWl0aGVyKSB7XG4gICAgcmV0dXJuIGVpdGhlci5pc0xlZnQ7XG4gIH1cbiAgUy5pc0xlZnQgPSBkZWYoJ2lzTGVmdCcsIHt9LCBbJEVpdGhlcihhLCBiKSwgJC5Cb29sZWFuXSwgaXNMZWZ0KTtcblxuICAvLyMgaXNSaWdodCA6OiBFaXRoZXIgYSBiIC0+IEJvb2xlYW5cbiAgLy8uXG4gIC8vLiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gRWl0aGVyIGlzIGEgUmlnaHQ7IGBmYWxzZWAgaWYgaXQgaXMgYSBMZWZ0LlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5pc1JpZ2h0KFMuUmlnaHQoNDIpKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5pc1JpZ2h0KFMuTGVmdCgnQ2Fubm90IGRpdmlkZSBieSB6ZXJvJykpXG4gIC8vLiBmYWxzZVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGlzUmlnaHQoZWl0aGVyKSB7XG4gICAgcmV0dXJuIGVpdGhlci5pc1JpZ2h0O1xuICB9XG4gIFMuaXNSaWdodCA9IGRlZignaXNSaWdodCcsIHt9LCBbJEVpdGhlcihhLCBiKSwgJC5Cb29sZWFuXSwgaXNSaWdodCk7XG5cbiAgLy8jIGZyb21FaXRoZXIgOjogYiAtPiBFaXRoZXIgYSBiIC0+IGJcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGRlZmF1bHQgdmFsdWUgYW5kIGFuIEVpdGhlciwgYW5kIHJldHVybnMgdGhlIFJpZ2h0IHZhbHVlXG4gIC8vLiBpZiB0aGUgRWl0aGVyIGlzIGEgUmlnaHQ7IHRoZSBkZWZhdWx0IHZhbHVlIG90aGVyd2lzZS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZnJvbUVpdGhlcigwLCBTLlJpZ2h0KDQyKSlcbiAgLy8uIDQyXG4gIC8vLlxuICAvLy4gPiBTLmZyb21FaXRoZXIoMCwgUy5MZWZ0KDQyKSlcbiAgLy8uIDBcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBmcm9tRWl0aGVyKHgsIGVpdGhlcikge1xuICAgIHJldHVybiBlaXRoZXIuaXNSaWdodCA/IGVpdGhlci52YWx1ZSA6IHg7XG4gIH1cbiAgUy5mcm9tRWl0aGVyID0gZGVmKCdmcm9tRWl0aGVyJywge30sIFtiLCAkRWl0aGVyKGEsIGIpLCBiXSwgZnJvbUVpdGhlcik7XG5cbiAgLy8jIHRvRWl0aGVyIDo6IGEgLT4gYj8gLT4gRWl0aGVyIGEgYlxuICAvLy5cbiAgLy8uIENvbnZlcnRzIGFuIGFyYml0cmFyeSB2YWx1ZSB0byBhbiBFaXRoZXI6IGEgTGVmdCBpZiB0aGUgdmFsdWUgaXMgYG51bGxgXG4gIC8vLiBvciBgdW5kZWZpbmVkYDsgYSBSaWdodCBvdGhlcndpc2UuIFRoZSBmaXJzdCBhcmd1bWVudCBzcGVjaWZpZXMgdGhlXG4gIC8vLiB2YWx1ZSBvZiB0aGUgTGVmdCBpbiB0aGUgXCJmYWlsdXJlXCIgY2FzZS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMudG9FaXRoZXIoJ1hZWicsIG51bGwpXG4gIC8vLiBMZWZ0KCdYWVonKVxuICAvLy5cbiAgLy8uID4gUy50b0VpdGhlcignWFlaJywgJ0FCQycpXG4gIC8vLiBSaWdodCgnQUJDJylcbiAgLy8uXG4gIC8vLiA+IFMubWFwKFMucHJvcCgnMCcpLCBTLnRvRWl0aGVyKCdJbnZhbGlkIHByb3RvY29sJywgJ2Z0cDovL2V4YW1wbGUuY29tLycubWF0Y2goL15odHRwcz86LykpKVxuICAvLy4gTGVmdCgnSW52YWxpZCBwcm90b2NvbCcpXG4gIC8vLlxuICAvLy4gPiBTLm1hcChTLnByb3AoJzAnKSwgUy50b0VpdGhlcignSW52YWxpZCBwcm90b2NvbCcsICdodHRwczovL2V4YW1wbGUuY29tLycubWF0Y2goL15odHRwcz86LykpKVxuICAvLy4gUmlnaHQoJ2h0dHBzOicpXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gdG9FaXRoZXIoeCwgeSkge1xuICAgIHJldHVybiB5ID09IG51bGwgPyBMZWZ0KHgpIDogUmlnaHQoeSk7XG4gIH1cbiAgUy50b0VpdGhlciA9IGRlZigndG9FaXRoZXInLCB7fSwgW2EsIGIsICRFaXRoZXIoYSwgYildLCB0b0VpdGhlcik7XG5cbiAgLy8jIGVpdGhlciA6OiAoYSAtPiBjKSAtPiAoYiAtPiBjKSAtPiBFaXRoZXIgYSBiIC0+IGNcbiAgLy8uXG4gIC8vLiBUYWtlcyB0d28gZnVuY3Rpb25zIGFuZCBhbiBFaXRoZXIsIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgLy8uIGFwcGx5aW5nIHRoZSBmaXJzdCBmdW5jdGlvbiB0byB0aGUgTGVmdCdzIHZhbHVlLCBpZiB0aGUgRWl0aGVyXG4gIC8vLiBpcyBhIExlZnQsIG9yIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIHNlY29uZCBmdW5jdGlvbiB0byB0aGVcbiAgLy8uIFJpZ2h0J3MgdmFsdWUsIGlmIHRoZSBFaXRoZXIgaXMgYSBSaWdodC5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZWl0aGVyKFMudG9VcHBlciwgUy50b1N0cmluZywgUy5MZWZ0KCdDYW5ub3QgZGl2aWRlIGJ5IHplcm8nKSlcbiAgLy8uICdDQU5OT1QgRElWSURFIEJZIFpFUk8nXG4gIC8vLlxuICAvLy4gPiBTLmVpdGhlcihTLnRvVXBwZXIsIFMudG9TdHJpbmcsIFMuUmlnaHQoNDIpKVxuICAvLy4gJzQyJ1xuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGVpdGhlcihsLCByLCBlaXRoZXIpIHtcbiAgICByZXR1cm4gZWl0aGVyLmlzTGVmdCA/IGwoZWl0aGVyLnZhbHVlKSA6IHIoZWl0aGVyLnZhbHVlKTtcbiAgfVxuICBTLmVpdGhlciA9IGRlZignZWl0aGVyJywge30sIFtGbihhLCBjKSwgRm4oYiwgYyksICRFaXRoZXIoYSwgYiksIGNdLCBlaXRoZXIpO1xuXG4gIC8vIyBsZWZ0cyA6OiBBcnJheSAoRWl0aGVyIGEgYikgLT4gQXJyYXkgYVxuICAvLy5cbiAgLy8uIFRha2VzIGFuIGFycmF5IG9mIEVpdGhlcnMgYW5kIHJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyBlYWNoIExlZnQnc1xuICAvLy4gdmFsdWUuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2ByaWdodHNgXSgjcmlnaHRzKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMubGVmdHMoW1MuUmlnaHQoMjApLCBTLkxlZnQoJ2ZvbycpLCBTLlJpZ2h0KDEwKSwgUy5MZWZ0KCdiYXInKV0pXG4gIC8vLiBbJ2ZvbycsICdiYXInXVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGxlZnRzKGVpdGhlcnMpIHtcbiAgICByZXR1cm4gWi5yZWR1Y2UoZnVuY3Rpb24oeHMsIGVpdGhlcikge1xuICAgICAgaWYgKGVpdGhlci5pc0xlZnQpIHhzLnB1c2goZWl0aGVyLnZhbHVlKTtcbiAgICAgIHJldHVybiB4cztcbiAgICB9LCBbXSwgZWl0aGVycyk7XG4gIH1cbiAgUy5sZWZ0cyA9IGRlZignbGVmdHMnLCB7fSwgWyQuQXJyYXkoJEVpdGhlcihhLCBiKSksICQuQXJyYXkoYSldLCBsZWZ0cyk7XG5cbiAgLy8jIHJpZ2h0cyA6OiBBcnJheSAoRWl0aGVyIGEgYikgLT4gQXJyYXkgYlxuICAvLy5cbiAgLy8uIFRha2VzIGFuIGFycmF5IG9mIEVpdGhlcnMgYW5kIHJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyBlYWNoIFJpZ2h0J3NcbiAgLy8uIHZhbHVlLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgbGVmdHNgXSgjbGVmdHMpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5yaWdodHMoW1MuUmlnaHQoMjApLCBTLkxlZnQoJ2ZvbycpLCBTLlJpZ2h0KDEwKSwgUy5MZWZ0KCdiYXInKV0pXG4gIC8vLiBbMjAsIDEwXVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHJpZ2h0cyhlaXRoZXJzKSB7XG4gICAgcmV0dXJuIFoucmVkdWNlKGZ1bmN0aW9uKHhzLCBlaXRoZXIpIHtcbiAgICAgIGlmIChlaXRoZXIuaXNSaWdodCkgeHMucHVzaChlaXRoZXIudmFsdWUpO1xuICAgICAgcmV0dXJuIHhzO1xuICAgIH0sIFtdLCBlaXRoZXJzKTtcbiAgfVxuICBTLnJpZ2h0cyA9IGRlZigncmlnaHRzJywge30sIFskLkFycmF5KCRFaXRoZXIoYSwgYikpLCAkLkFycmF5KGIpXSwgcmlnaHRzKTtcblxuICAvLyMgdGFnQnkgOjogKGEgLT4gQm9vbGVhbikgLT4gYSAtPiBFaXRoZXIgYSBhXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBwcmVkaWNhdGUgYW5kIGEgdmFsdWUsIGFuZCByZXR1cm5zIGEgUmlnaHQgb2YgdGhlIHZhbHVlIGlmIGl0XG4gIC8vLiBzYXRpc2ZpZXMgdGhlIHByZWRpY2F0ZTsgYSBMZWZ0IG9mIHRoZSB2YWx1ZSBvdGhlcndpc2UuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRhZ0J5KFMub2RkLCAwKVxuICAvLy4gTGVmdCgwKVxuICAvL1xuICAvLy4gPiBTLnRhZ0J5KFMub2RkLCAxKVxuICAvLy4gUmlnaHQoMSlcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiB0YWdCeShwcmVkLCBhKSB7XG4gICAgcmV0dXJuIHByZWQoYSkgPyBSaWdodChhKSA6IExlZnQoYSk7XG4gIH1cbiAgUy50YWdCeSA9IGRlZigndGFnQnknLCB7fSwgWyQuUHJlZGljYXRlKGEpLCBhLCAkRWl0aGVyKGEsIGEpXSwgdGFnQnkpO1xuXG4gIC8vIyBlbmNhc2VFaXRoZXIgOjogKEVycm9yIC0+IGwpIC0+IChhIC0+IHIpIC0+IGEgLT4gRWl0aGVyIGwgclxuICAvLy5cbiAgLy8uIFRha2VzIHR3byB1bmFyeSBmdW5jdGlvbnMsIGBmYCBhbmQgYGdgLCB0aGUgc2Vjb25kIG9mIHdoaWNoIG1heSB0aHJvdyxcbiAgLy8uIGFuZCBhIHZhbHVlIGB4YCBvZiBhbnkgdHlwZS4gQXBwbGllcyBgZ2AgdG8gYHhgIGluc2lkZSBhIGB0cnlgIGJsb2NrLlxuICAvLy4gSWYgYW4gZXhjZXB0aW9uIGlzIGNhdWdodCwgdGhlIHJldHVybiB2YWx1ZSBpcyBhIExlZnQgY29udGFpbmluZyB0aGVcbiAgLy8uIHJlc3VsdCBvZiBhcHBseWluZyBgZmAgdG8gdGhlIGNhdWdodCBFcnJvciBvYmplY3Q7IG90aGVyd2lzZSB0aGUgcmV0dXJuXG4gIC8vLiB2YWx1ZSBpcyBhIFJpZ2h0IGNvbnRhaW5pbmcgdGhlIHJlc3VsdCBvZiBhcHBseWluZyBgZ2AgdG8gYHhgLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgZW5jYXNlYF0oI2VuY2FzZSkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmVuY2FzZUVpdGhlcihTLkksIEpTT04ucGFyc2UsICdbXCJmb29cIixcImJhclwiLFwiYmF6XCJdJylcbiAgLy8uIFJpZ2h0KFsnZm9vJywgJ2JhcicsICdiYXonXSlcbiAgLy8uXG4gIC8vLiA+IFMuZW5jYXNlRWl0aGVyKFMuSSwgSlNPTi5wYXJzZSwgJ1snKVxuICAvLy4gTGVmdChuZXcgU3ludGF4RXJyb3IoJ1VuZXhwZWN0ZWQgZW5kIG9mIEpTT04gaW5wdXQnKSlcbiAgLy8uXG4gIC8vLiA+IFMuZW5jYXNlRWl0aGVyKFMucHJvcCgnbWVzc2FnZScpLCBKU09OLnBhcnNlLCAnWycpXG4gIC8vLiBMZWZ0KCdVbmV4cGVjdGVkIGVuZCBvZiBKU09OIGlucHV0JylcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBlbmNhc2VFaXRoZXIoZiwgZywgeCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gUmlnaHQoZyh4KSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gTGVmdChmKGVycikpO1xuICAgIH1cbiAgfVxuICBTLmVuY2FzZUVpdGhlciA9XG4gIGRlZignZW5jYXNlRWl0aGVyJyxcbiAgICAgIHt9LFxuICAgICAgW0ZuKCQuRXJyb3IsIGwpLCBGbihhLCByKSwgYSwgJEVpdGhlcihsLCByKV0sXG4gICAgICBlbmNhc2VFaXRoZXIpO1xuXG4gIC8vIyBlbmNhc2VFaXRoZXIyIDo6IChFcnJvciAtPiBsKSAtPiAoYSAtPiBiIC0+IHIpIC0+IGEgLT4gYiAtPiBFaXRoZXIgbCByXG4gIC8vLlxuICAvLy4gQmluYXJ5IHZlcnNpb24gb2YgW2BlbmNhc2VFaXRoZXJgXSgjZW5jYXNlRWl0aGVyKS5cbiAgZnVuY3Rpb24gZW5jYXNlRWl0aGVyMihmLCBnLCB4LCB5KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBSaWdodChnKHgpKHkpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBMZWZ0KGYoZXJyKSk7XG4gICAgfVxuICB9XG4gIFMuZW5jYXNlRWl0aGVyMiA9XG4gIGRlZignZW5jYXNlRWl0aGVyMicsXG4gICAgICB7fSxcbiAgICAgIFtGbigkLkVycm9yLCBsKSwgRm4oYSwgRm4oYiwgcikpLCBhLCBiLCAkRWl0aGVyKGwsIHIpXSxcbiAgICAgIGVuY2FzZUVpdGhlcjIpO1xuXG4gIC8vIyBlbmNhc2VFaXRoZXIzIDo6IChFcnJvciAtPiBsKSAtPiAoYSAtPiBiIC0+IGMgLT4gcikgLT4gYSAtPiBiIC0+IGMgLT4gRWl0aGVyIGwgclxuICAvLy5cbiAgLy8uIFRlcm5hcnkgdmVyc2lvbiBvZiBbYGVuY2FzZUVpdGhlcmBdKCNlbmNhc2VFaXRoZXIpLlxuICBmdW5jdGlvbiBlbmNhc2VFaXRoZXIzKGYsIGcsIHgsIHksIHopIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFJpZ2h0KGcoeCkoeSkoeikpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIExlZnQoZihlcnIpKTtcbiAgICB9XG4gIH1cbiAgUy5lbmNhc2VFaXRoZXIzID1cbiAgZGVmKCdlbmNhc2VFaXRoZXIzJyxcbiAgICAgIHt9LFxuICAgICAgW0ZuKCQuRXJyb3IsIGwpLCBGbihhLCBGbihiLCBGbihjLCByKSkpLCBhLCBiLCBjLCAkRWl0aGVyKGwsIHIpXSxcbiAgICAgIGVuY2FzZUVpdGhlcjMpO1xuXG4gIC8vIyBlaXRoZXJUb01heWJlIDo6IEVpdGhlciBhIGIgLT4gTWF5YmUgYlxuICAvLy5cbiAgLy8uIENvbnZlcnRzIGFuIEVpdGhlciB0byBhIE1heWJlLiBBIExlZnQgYmVjb21lcyBOb3RoaW5nOyBhIFJpZ2h0IGJlY29tZXNcbiAgLy8uIGEgSnVzdC5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYG1heWJlVG9FaXRoZXJgXSgjbWF5YmVUb0VpdGhlcikuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmVpdGhlclRvTWF5YmUoUy5MZWZ0KCdDYW5ub3QgZGl2aWRlIGJ5IHplcm8nKSlcbiAgLy8uIE5vdGhpbmdcbiAgLy8uXG4gIC8vLiA+IFMuZWl0aGVyVG9NYXliZShTLlJpZ2h0KDQyKSlcbiAgLy8uIEp1c3QoNDIpXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gZWl0aGVyVG9NYXliZShlaXRoZXIpIHtcbiAgICByZXR1cm4gZWl0aGVyLmlzTGVmdCA/IE5vdGhpbmcgOiBKdXN0KGVpdGhlci52YWx1ZSk7XG4gIH1cbiAgUy5laXRoZXJUb01heWJlID1cbiAgZGVmKCdlaXRoZXJUb01heWJlJywge30sIFskRWl0aGVyKGEsIGIpLCAkTWF5YmUoYildLCBlaXRoZXJUb01heWJlKTtcblxuICAvLy4gIyMjIExvZ2ljXG5cbiAgLy8jIGFuZCA6OiBCb29sZWFuIC0+IEJvb2xlYW4gLT4gQm9vbGVhblxuICAvLy5cbiAgLy8uIEJvb2xlYW4gXCJhbmRcIi5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuYW5kKGZhbHNlLCBmYWxzZSlcbiAgLy8uIGZhbHNlXG4gIC8vLlxuICAvLy4gPiBTLmFuZChmYWxzZSwgdHJ1ZSlcbiAgLy8uIGZhbHNlXG4gIC8vLlxuICAvLy4gPiBTLmFuZCh0cnVlLCBmYWxzZSlcbiAgLy8uIGZhbHNlXG4gIC8vLlxuICAvLy4gPiBTLmFuZCh0cnVlLCB0cnVlKVxuICAvLy4gdHJ1ZVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGFuZCh4LCB5KSB7XG4gICAgcmV0dXJuIHgudmFsdWVPZigpICYmIHkudmFsdWVPZigpO1xuICB9XG4gIFMuYW5kID0gZGVmKCdhbmQnLCB7fSwgWyQuQm9vbGVhbiwgJC5Cb29sZWFuLCAkLkJvb2xlYW5dLCBhbmQpO1xuXG4gIC8vIyBvciA6OiBCb29sZWFuIC0+IEJvb2xlYW4gLT4gQm9vbGVhblxuICAvLy5cbiAgLy8uIEJvb2xlYW4gXCJvclwiLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5vcihmYWxzZSwgZmFsc2UpXG4gIC8vLiBmYWxzZVxuICAvLy5cbiAgLy8uID4gUy5vcihmYWxzZSwgdHJ1ZSlcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMub3IodHJ1ZSwgZmFsc2UpXG4gIC8vLiB0cnVlXG4gIC8vLlxuICAvLy4gPiBTLm9yKHRydWUsIHRydWUpXG4gIC8vLiB0cnVlXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gb3IoeCwgeSkge1xuICAgIHJldHVybiB4LnZhbHVlT2YoKSB8fCB5LnZhbHVlT2YoKTtcbiAgfVxuICBTLm9yID0gZGVmKCdvcicsIHt9LCBbJC5Cb29sZWFuLCAkLkJvb2xlYW4sICQuQm9vbGVhbl0sIG9yKTtcblxuICAvLyMgbm90IDo6IEJvb2xlYW4gLT4gQm9vbGVhblxuICAvLy5cbiAgLy8uIEJvb2xlYW4gXCJub3RcIi5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYGNvbXBsZW1lbnRgXSgjY29tcGxlbWVudCkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm5vdChmYWxzZSlcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMubm90KHRydWUpXG4gIC8vLiBmYWxzZVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIG5vdCh4KSB7XG4gICAgcmV0dXJuICF4LnZhbHVlT2YoKTtcbiAgfVxuICBTLm5vdCA9IGRlZignbm90Jywge30sIFskLkJvb2xlYW4sICQuQm9vbGVhbl0sIG5vdCk7XG5cbiAgLy8jIGNvbXBsZW1lbnQgOjogKGEgLT4gQm9vbGVhbikgLT4gYSAtPiBCb29sZWFuXG4gIC8vLlxuICAvLy4gVGFrZXMgYSB1bmFyeSBwcmVkaWNhdGUgYW5kIGEgdmFsdWUgb2YgYW55IHR5cGUsIGFuZCByZXR1cm5zIHRoZSBsb2dpY2FsXG4gIC8vLiBuZWdhdGlvbiBvZiBhcHBseWluZyB0aGUgcHJlZGljYXRlIHRvIHRoZSB2YWx1ZS5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYG5vdGBdKCNub3QpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gTnVtYmVyLmlzSW50ZWdlcig0MilcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMuY29tcGxlbWVudChOdW1iZXIuaXNJbnRlZ2VyLCA0MilcbiAgLy8uIGZhbHNlXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gY29tcGxlbWVudChwcmVkLCB4KSB7XG4gICAgcmV0dXJuICFwcmVkKHgpO1xuICB9XG4gIFMuY29tcGxlbWVudCA9XG4gIGRlZignY29tcGxlbWVudCcsIHt9LCBbJC5QcmVkaWNhdGUoYSksIGEsICQuQm9vbGVhbl0sIGNvbXBsZW1lbnQpO1xuXG4gIC8vIyBpZkVsc2UgOjogKGEgLT4gQm9vbGVhbikgLT4gKGEgLT4gYikgLT4gKGEgLT4gYikgLT4gYSAtPiBiXG4gIC8vLlxuICAvLy4gVGFrZXMgYSB1bmFyeSBwcmVkaWNhdGUsIGEgdW5hcnkgXCJpZlwiIGZ1bmN0aW9uLCBhIHVuYXJ5IFwiZWxzZVwiXG4gIC8vLiBmdW5jdGlvbiwgYW5kIGEgdmFsdWUgb2YgYW55IHR5cGUsIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgLy8uIGFwcGx5aW5nIHRoZSBcImlmXCIgZnVuY3Rpb24gdG8gdGhlIHZhbHVlIGlmIHRoZSB2YWx1ZSBzYXRpc2ZpZXNcbiAgLy8uIHRoZSBwcmVkaWNhdGU7IHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIFwiZWxzZVwiIGZ1bmN0aW9uIHRvIHRoZVxuICAvLy4gdmFsdWUgb3RoZXJ3aXNlLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgd2hlbmBdKCN3aGVuKSBhbmQgW2B1bmxlc3NgXSgjdW5sZXNzKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuaWZFbHNlKHggPT4geCA8IDAsIE1hdGguYWJzLCBNYXRoLnNxcnQsIC0xKVxuICAvLy4gMVxuICAvLy5cbiAgLy8uID4gUy5pZkVsc2UoeCA9PiB4IDwgMCwgTWF0aC5hYnMsIE1hdGguc3FydCwgMTYpXG4gIC8vLiA0XG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gaWZFbHNlKHByZWQsIGYsIGcsIHgpIHtcbiAgICByZXR1cm4gcHJlZCh4KSA/IGYoeCkgOiBnKHgpO1xuICB9XG4gIFMuaWZFbHNlID1cbiAgZGVmKCdpZkVsc2UnLCB7fSwgWyQuUHJlZGljYXRlKGEpLCBGbihhLCBiKSwgRm4oYSwgYiksIGEsIGJdLCBpZkVsc2UpO1xuXG4gIC8vIyB3aGVuIDo6IChhIC0+IEJvb2xlYW4pIC0+IChhIC0+IGEpIC0+IGEgLT4gYVxuICAvLy5cbiAgLy8uIFRha2VzIGEgdW5hcnkgcHJlZGljYXRlLCBhIHVuYXJ5IGZ1bmN0aW9uLCBhbmQgYSB2YWx1ZSBvZiBhbnkgdHlwZSwgYW5kXG4gIC8vLiByZXR1cm5zIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIGZ1bmN0aW9uIHRvIHRoZSB2YWx1ZSBpZiB0aGUgdmFsdWVcbiAgLy8uIHNhdGlzZmllcyB0aGUgcHJlZGljYXRlOyB0aGUgdmFsdWUgb3RoZXJ3aXNlLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgdW5sZXNzYF0oI3VubGVzcykgYW5kIFtgaWZFbHNlYF0oI2lmRWxzZSkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLndoZW4oeCA9PiB4ID49IDAsIE1hdGguc3FydCwgMTYpXG4gIC8vLiA0XG4gIC8vLlxuICAvLy4gPiBTLndoZW4oeCA9PiB4ID49IDAsIE1hdGguc3FydCwgLTEpXG4gIC8vLiAtMVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHdoZW4ocHJlZCwgZiwgeCkge1xuICAgIHJldHVybiBpZkVsc2UocHJlZCwgZiwgSSwgeCk7XG4gIH1cbiAgUy53aGVuID0gZGVmKCd3aGVuJywge30sIFskLlByZWRpY2F0ZShhKSwgRm4oYSwgYSksIGEsIGFdLCB3aGVuKTtcblxuICAvLyMgdW5sZXNzIDo6IChhIC0+IEJvb2xlYW4pIC0+IChhIC0+IGEpIC0+IGEgLT4gYVxuICAvLy5cbiAgLy8uIFRha2VzIGEgdW5hcnkgcHJlZGljYXRlLCBhIHVuYXJ5IGZ1bmN0aW9uLCBhbmQgYSB2YWx1ZSBvZiBhbnkgdHlwZSwgYW5kXG4gIC8vLiByZXR1cm5zIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIGZ1bmN0aW9uIHRvIHRoZSB2YWx1ZSBpZiB0aGUgdmFsdWVcbiAgLy8uIGRvZXMgbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZTsgdGhlIHZhbHVlIG90aGVyd2lzZS5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYHdoZW5gXSgjd2hlbikgYW5kIFtgaWZFbHNlYF0oI2lmRWxzZSkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnVubGVzcyh4ID0+IHggPCAwLCBNYXRoLnNxcnQsIDE2KVxuICAvLy4gNFxuICAvLy5cbiAgLy8uID4gUy51bmxlc3MoeCA9PiB4IDwgMCwgTWF0aC5zcXJ0LCAtMSlcbiAgLy8uIC0xXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gdW5sZXNzKHByZWQsIGYsIHgpIHtcbiAgICByZXR1cm4gaWZFbHNlKHByZWQsIEksIGYsIHgpO1xuICB9XG4gIFMudW5sZXNzID0gZGVmKCd1bmxlc3MnLCB7fSwgWyQuUHJlZGljYXRlKGEpLCBGbihhLCBhKSwgYSwgYV0sIHVubGVzcyk7XG5cbiAgLy8jIGFsbFBhc3MgOjogRm9sZGFibGUgZiA9PiBmIChhIC0+IEJvb2xlYW4pIC0+IGEgLT4gQm9vbGVhblxuICAvLy5cbiAgLy8uIFRha2VzIGEgc3RydWN0dXJlIGNvbnRhaW5pbmcgemVybyBvciBtb3JlIHByZWRpY2F0ZXMsIGFuZCBhIHZhbHVlXG4gIC8vLiBvZiBhbnkgdHlwZS4gUmV0dXJucyBgdHJ1ZWAgW2lmZl1bXSB0aGUgdmFsdWUgc2F0aXNmaWVzIGFsbCBvZiB0aGVcbiAgLy8uIHByZWRpY2F0ZXMuIE5vbmUgb2YgdGhlIHN1YnNlcXVlbnQgcHJlZGljYXRlcyB3aWxsIGJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8uIHRoZSBmaXJzdCBwcmVkaWNhdGUgbm90IHNhdGlzZmllZC5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuYWxsUGFzcyhbUy50ZXN0KC9xLyksIFMudGVzdCgvdS8pLCBTLnRlc3QoL2kvKV0sICdxdWllc3NlbmNlJylcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMuYWxsUGFzcyhbUy50ZXN0KC9xLyksIFMudGVzdCgvdS8pLCBTLnRlc3QoL2kvKV0sICdmaXNzaXBhcm91cycpXG4gIC8vLiBmYWxzZVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGFsbFBhc3MocHJlZHMsIHgpIHtcbiAgICByZXR1cm4gWi5yZWR1Y2UoZnVuY3Rpb24oYiwgcCkgeyByZXR1cm4gYiAmJiBwKHgpOyB9LCB0cnVlLCBwcmVkcyk7XG4gIH1cbiAgUy5hbGxQYXNzID1cbiAgZGVmKCdhbGxQYXNzJyxcbiAgICAgIHtmOiBbWi5Gb2xkYWJsZV19LFxuICAgICAgW2YoJC5QcmVkaWNhdGUoYSkpLCBhLCAkLkJvb2xlYW5dLFxuICAgICAgYWxsUGFzcyk7XG5cbiAgLy8jIGFueVBhc3MgOjogRm9sZGFibGUgZiA9PiBmIChhIC0+IEJvb2xlYW4pIC0+IGEgLT4gQm9vbGVhblxuICAvLy5cbiAgLy8uIFRha2VzIGEgc3RydWN0dXJlIGNvbnRhaW5pbmcgemVybyBvciBtb3JlIHByZWRpY2F0ZXMsIGFuZCBhIHZhbHVlXG4gIC8vLiBvZiBhbnkgdHlwZS4gUmV0dXJucyBgdHJ1ZWAgW2lmZl1bXSB0aGUgdmFsdWUgc2F0aXNmaWVzIGFueSBvZiB0aGVcbiAgLy8uIHByZWRpY2F0ZXMuIE5vbmUgb2YgdGhlIHN1YnNlcXVlbnQgcHJlZGljYXRlcyB3aWxsIGJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8uIHRoZSBmaXJzdCBwcmVkaWNhdGUgc2F0aXNmaWVkLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5hbnlQYXNzKFtTLnRlc3QoL3EvKSwgUy50ZXN0KC91LyksIFMudGVzdCgvaS8pXSwgJ2luY2FuZGVzY2VudCcpXG4gIC8vLiB0cnVlXG4gIC8vLlxuICAvLy4gPiBTLmFueVBhc3MoW1MudGVzdCgvcS8pLCBTLnRlc3QoL3UvKSwgUy50ZXN0KC9pLyldLCAnZW1wYXRoeScpXG4gIC8vLiBmYWxzZVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGFueVBhc3MocHJlZHMsIHgpIHtcbiAgICByZXR1cm4gWi5yZWR1Y2UoZnVuY3Rpb24oYiwgcCkgeyByZXR1cm4gYiB8fCBwKHgpOyB9LCBmYWxzZSwgcHJlZHMpO1xuICB9XG4gIFMuYW55UGFzcyA9XG4gIGRlZignYW55UGFzcycsXG4gICAgICB7ZjogW1ouRm9sZGFibGVdfSxcbiAgICAgIFtmKCQuUHJlZGljYXRlKGEpKSwgYSwgJC5Cb29sZWFuXSxcbiAgICAgIGFueVBhc3MpO1xuXG4gIC8vLiAjIyMgTGlzdFxuICAvLy5cbiAgLy8uIFRoZSBMaXN0IHR5cGUgY29uc3RydWN0b3IgZW5hYmxlcyB0eXBlIHNpZ25hdHVyZXMgdG8gZGVzY3JpYmUgYWQgaG9jXG4gIC8vLiBwb2x5bW9ycGhpYyBmdW5jdGlvbnMgd2hpY2ggb3BlcmF0ZSBvbiBlaXRoZXIgW2BBcnJheWBdWyQuQXJyYXldIG9yXG4gIC8vLiBbYFN0cmluZ2BdWyQuU3RyaW5nXSB2YWx1ZXMuXG4gIC8vLlxuICAvLy4gTWVudGFsIGd5bW5hc3RpY3MgYXJlIHJlcXVpcmVkIHRvIHRyZWF0IGFycmF5cyBhbmQgc3RyaW5ncyBzaW1pbGFybHkuXG4gIC8vLiBgWzEsIDIsIDNdYCBpcyBhIGxpc3QgY29udGFpbmluZyBgMWAsIGAyYCwgYW5kIGAzYC4gYCdhYmMnYCBpcyBhIGxpc3RcbiAgLy8uIGNvbnRhaW5pbmcgYCdhJ2AsIGAnYidgLCBhbmQgYCdjJ2AuIEJ1dCB3aGF0IGlzIHRoZSB0eXBlIG9mIGAnYSdgP1xuICAvLy4gYFN0cmluZ2AsIHNpbmNlIEphdmFTY3JpcHQgaGFzIG5vIENoYXIgdHlwZSEgVGh1czpcbiAgLy8uXG4gIC8vLiAgICAgJ2FiYycgOjogU3RyaW5nLCBMaXN0IFN0cmluZywgTGlzdCAoTGlzdCBTdHJpbmcpLCAuLi5cbiAgLy8uXG4gIC8vLiBFdmVyeSBtZW1iZXIgb2YgYFN0cmluZ2AgaXMgYWxzbyBhIG1lbWJlciBvZiBgTGlzdCBTdHJpbmdgIVxuXG4gIC8vIyBzbGljZSA6OiBJbnRlZ2VyIC0+IEludGVnZXIgLT4gTGlzdCBhIC0+IE1heWJlIChMaXN0IGEpXG4gIC8vLlxuICAvLy4gUmV0dXJucyBKdXN0IGEgbGlzdCBjb250YWluaW5nIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBzdXBwbGllZCBsaXN0XG4gIC8vLiBmcm9tIGEgYmVnaW5uaW5nIGluZGV4IChpbmNsdXNpdmUpIHRvIGFuIGVuZCBpbmRleCAoZXhjbHVzaXZlKS5cbiAgLy8uIFJldHVybnMgTm90aGluZyB1bmxlc3MgdGhlIHN0YXJ0IGludGVydmFsIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAvLy4gdGhlIGVuZCBpbnRlcnZhbCwgYW5kIHRoZSBsaXN0IGNvbnRhaW5zIGJvdGggKGhhbGYtb3BlbikgaW50ZXJ2YWxzLlxuICAvLy4gQWNjZXB0cyBuZWdhdGl2ZSBpbmRpY2VzLCB3aGljaCBpbmRpY2F0ZSBhbiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mXG4gIC8vLiB0aGUgbGlzdC5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYHRha2VgXSgjdGFrZSksIFtgZHJvcGBdKCNkcm9wKSwgW2B0YWtlTGFzdGBdKCN0YWtlTGFzdCksXG4gIC8vLiBhbmQgW2Bkcm9wTGFzdGBdKCNkcm9wTGFzdCkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnNsaWNlKDEsIDMsIFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ10pXG4gIC8vLiBKdXN0KFsnYicsICdjJ10pXG4gIC8vLlxuICAvLy4gPiBTLnNsaWNlKC0zLCAtMSwgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXSlcbiAgLy8uIEp1c3QoWydjJywgJ2QnXSlcbiAgLy8uXG4gIC8vLiA+IFMuc2xpY2UoMSwgNiwgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXSlcbiAgLy8uIE5vdGhpbmdcbiAgLy8uXG4gIC8vLiA+IFMuc2xpY2UoMiwgNiwgJ2JhbmFuYScpXG4gIC8vLiBKdXN0KCduYW5hJylcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kLCB4cykge1xuICAgIHZhciBsZW4gPSB4cy5sZW5ndGg7XG4gICAgdmFyIGZyb21JZHggPSBzdGFydCA8IDAgPyBzdGFydCArIGxlbiA6IHN0YXJ0O1xuICAgIHZhciB0b0lkeCA9IGVuZCA8IDAgPyBlbmQgKyBsZW4gOiBlbmQ7XG5cbiAgICByZXR1cm4gTWF0aC5hYnMoc3RhcnQpIDw9IGxlbiAmJiBNYXRoLmFicyhlbmQpIDw9IGxlbiAmJiBmcm9tSWR4IDw9IHRvSWR4ID9cbiAgICAgIEp1c3QoeHMuc2xpY2UoZnJvbUlkeCwgdG9JZHgpKSA6XG4gICAgICBOb3RoaW5nO1xuICB9XG4gIFMuc2xpY2UgPVxuICBkZWYoJ3NsaWNlJywge30sIFskLkludGVnZXIsICQuSW50ZWdlciwgTGlzdChhKSwgJE1heWJlKExpc3QoYSkpXSwgc2xpY2UpO1xuXG4gIC8vIyBhdCA6OiBJbnRlZ2VyIC0+IExpc3QgYSAtPiBNYXliZSBhXG4gIC8vLlxuICAvLy4gVGFrZXMgYW4gaW5kZXggYW5kIGEgbGlzdCBhbmQgcmV0dXJucyBKdXN0IHRoZSBlbGVtZW50IG9mIHRoZSBsaXN0IGF0XG4gIC8vLiB0aGUgaW5kZXggaWYgdGhlIGluZGV4IGlzIHdpdGhpbiB0aGUgbGlzdCdzIGJvdW5kczsgTm90aGluZyBvdGhlcndpc2UuXG4gIC8vLiBBIG5lZ2F0aXZlIGluZGV4IHJlcHJlc2VudHMgYW4gb2Zmc2V0IGZyb20gdGhlIGxlbmd0aCBvZiB0aGUgbGlzdC5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuYXQoMiwgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXSlcbiAgLy8uIEp1c3QoJ2MnKVxuICAvLy5cbiAgLy8uID4gUy5hdCg1LCBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddKVxuICAvLy4gTm90aGluZ1xuICAvLy5cbiAgLy8uID4gUy5hdCgtMiwgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXSlcbiAgLy8uIEp1c3QoJ2QnKVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGF0KG4sIHhzKSB7XG4gICAgdmFyIGlkeCA9IG4gPCAwID8geHMubGVuZ3RoICsgbiA6IG47XG4gICAgcmV0dXJuIGlkeCA8IDAgfHwgaWR4ID49IHhzLmxlbmd0aCA/IE5vdGhpbmcgOiBKdXN0KHhzW2lkeF0pO1xuICB9XG4gIFMuYXQgPSBkZWYoJ2F0Jywge30sIFskLkludGVnZXIsIExpc3QoYSksICRNYXliZShhKV0sIGF0KTtcblxuICAvLyMgaGVhZCA6OiBMaXN0IGEgLT4gTWF5YmUgYVxuICAvLy5cbiAgLy8uIFRha2VzIGEgbGlzdCBhbmQgcmV0dXJucyBKdXN0IHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBsaXN0IGlmIHRoZVxuICAvLy4gbGlzdCBjb250YWlucyBhdCBsZWFzdCBvbmUgZWxlbWVudDsgTm90aGluZyBpZiB0aGUgbGlzdCBpcyBlbXB0eS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuaGVhZChbMSwgMiwgM10pXG4gIC8vLiBKdXN0KDEpXG4gIC8vLlxuICAvLy4gPiBTLmhlYWQoW10pXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gaGVhZCh4cykge1xuICAgIHJldHVybiBhdCgwLCB4cyk7XG4gIH1cbiAgUy5oZWFkID0gZGVmKCdoZWFkJywge30sIFtMaXN0KGEpLCAkTWF5YmUoYSldLCBoZWFkKTtcblxuICAvLyMgbGFzdCA6OiBMaXN0IGEgLT4gTWF5YmUgYVxuICAvLy5cbiAgLy8uIFRha2VzIGEgbGlzdCBhbmQgcmV0dXJucyBKdXN0IHRoZSBsYXN0IGVsZW1lbnQgb2YgdGhlIGxpc3QgaWYgdGhlXG4gIC8vLiBsaXN0IGNvbnRhaW5zIGF0IGxlYXN0IG9uZSBlbGVtZW50OyBOb3RoaW5nIGlmIHRoZSBsaXN0IGlzIGVtcHR5LlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5sYXN0KFsxLCAyLCAzXSlcbiAgLy8uIEp1c3QoMylcbiAgLy8uXG4gIC8vLiA+IFMubGFzdChbXSlcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBsYXN0KHhzKSB7XG4gICAgcmV0dXJuIGF0KC0xLCB4cyk7XG4gIH1cbiAgUy5sYXN0ID0gZGVmKCdsYXN0Jywge30sIFtMaXN0KGEpLCAkTWF5YmUoYSldLCBsYXN0KTtcblxuICAvLyMgdGFpbCA6OiBMaXN0IGEgLT4gTWF5YmUgKExpc3QgYSlcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGxpc3QgYW5kIHJldHVybnMgSnVzdCBhIGxpc3QgY29udGFpbmluZyBhbGwgYnV0IHRoZSBmaXJzdFxuICAvLy4gb2YgdGhlIGxpc3QncyBlbGVtZW50cyBpZiB0aGUgbGlzdCBjb250YWlucyBhdCBsZWFzdCBvbmUgZWxlbWVudDtcbiAgLy8uIE5vdGhpbmcgaWYgdGhlIGxpc3QgaXMgZW1wdHkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRhaWwoWzEsIDIsIDNdKVxuICAvLy4gSnVzdChbMiwgM10pXG4gIC8vLlxuICAvLy4gPiBTLnRhaWwoW10pXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gdGFpbCh4cykge1xuICAgIHJldHVybiB4cy5sZW5ndGggPiAwID8gSnVzdCh4cy5zbGljZSgxKSkgOiBOb3RoaW5nO1xuICB9XG4gIFMudGFpbCA9IGRlZigndGFpbCcsIHt9LCBbTGlzdChhKSwgJE1heWJlKExpc3QoYSkpXSwgdGFpbCk7XG5cbiAgLy8jIGluaXQgOjogTGlzdCBhIC0+IE1heWJlIChMaXN0IGEpXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBsaXN0IGFuZCByZXR1cm5zIEp1c3QgYSBsaXN0IGNvbnRhaW5pbmcgYWxsIGJ1dCB0aGUgbGFzdFxuICAvLy4gb2YgdGhlIGxpc3QncyBlbGVtZW50cyBpZiB0aGUgbGlzdCBjb250YWlucyBhdCBsZWFzdCBvbmUgZWxlbWVudDtcbiAgLy8uIE5vdGhpbmcgaWYgdGhlIGxpc3QgaXMgZW1wdHkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmluaXQoWzEsIDIsIDNdKVxuICAvLy4gSnVzdChbMSwgMl0pXG4gIC8vLlxuICAvLy4gPiBTLmluaXQoW10pXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gaW5pdCh4cykge1xuICAgIHJldHVybiB4cy5sZW5ndGggPiAwID8gSnVzdCh4cy5zbGljZSgwLCAtMSkpIDogTm90aGluZztcbiAgfVxuICBTLmluaXQgPSBkZWYoJ2luaXQnLCB7fSwgW0xpc3QoYSksICRNYXliZShMaXN0KGEpKV0sIGluaXQpO1xuXG4gIC8vIyB0YWtlIDo6IEludGVnZXIgLT4gTGlzdCBhIC0+IE1heWJlIChMaXN0IGEpXG4gIC8vLlxuICAvLy4gUmV0dXJucyBKdXN0IHRoZSBmaXJzdCBOIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBjb2xsZWN0aW9uIGlmIE4gaXNcbiAgLy8uIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGxlbmd0aFxuICAvLy4gb2YgdGhlIGNvbGxlY3Rpb247IE5vdGhpbmcgb3RoZXJ3aXNlLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy50YWtlKDIsIFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ10pXG4gIC8vLiBKdXN0KFsnYScsICdiJ10pXG4gIC8vLlxuICAvLy4gPiBTLnRha2UoNCwgJ2FiY2RlZmcnKVxuICAvLy4gSnVzdCgnYWJjZCcpXG4gIC8vLlxuICAvLy4gPiBTLnRha2UoNCwgWydhJywgJ2InLCAnYyddKVxuICAvLy4gTm90aGluZ1xuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHRha2UobiwgeHMpIHtcbiAgICByZXR1cm4gbiA8IDAgfHwgbiA+IHhzLmxlbmd0aCA/IE5vdGhpbmcgOiBKdXN0KHhzLnNsaWNlKDAsIG4pKTtcbiAgfVxuICBTLnRha2UgPSBkZWYoJ3Rha2UnLCB7fSwgWyQuSW50ZWdlciwgTGlzdChhKSwgJE1heWJlKExpc3QoYSkpXSwgdGFrZSk7XG5cbiAgLy8jIHRha2VMYXN0IDo6IEludGVnZXIgLT4gTGlzdCBhIC0+IE1heWJlIChMaXN0IGEpXG4gIC8vLlxuICAvLy4gUmV0dXJucyBKdXN0IHRoZSBsYXN0IE4gZWxlbWVudHMgb2YgdGhlIGdpdmVuIGNvbGxlY3Rpb24gaWYgTiBpc1xuICAvLy4gZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHplcm8gYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgbGVuZ3RoXG4gIC8vLiBvZiB0aGUgY29sbGVjdGlvbjsgTm90aGluZyBvdGhlcndpc2UuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRha2VMYXN0KDIsIFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ10pXG4gIC8vLiBKdXN0KFsnZCcsICdlJ10pXG4gIC8vLlxuICAvLy4gPiBTLnRha2VMYXN0KDQsICdhYmNkZWZnJylcbiAgLy8uIEp1c3QoJ2RlZmcnKVxuICAvLy5cbiAgLy8uID4gUy50YWtlTGFzdCg0LCBbJ2EnLCAnYicsICdjJ10pXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gdGFrZUxhc3QobiwgeHMpIHtcbiAgICByZXR1cm4gbiA8IDAgfHwgbiA+IHhzLmxlbmd0aCA/IE5vdGhpbmcgOiBKdXN0KHhzLnNsaWNlKHhzLmxlbmd0aCAtIG4pKTtcbiAgfVxuICBTLnRha2VMYXN0ID1cbiAgZGVmKCd0YWtlTGFzdCcsIHt9LCBbJC5JbnRlZ2VyLCBMaXN0KGEpLCAkTWF5YmUoTGlzdChhKSldLCB0YWtlTGFzdCk7XG5cbiAgLy8jIGRyb3AgOjogSW50ZWdlciAtPiBMaXN0IGEgLT4gTWF5YmUgKExpc3QgYSlcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIEp1c3QgYWxsIGJ1dCB0aGUgZmlyc3QgTiBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gY29sbGVjdGlvblxuICAvLy4gaWYgTiBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gemVybyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZVxuICAvLy4gbGVuZ3RoIG9mIHRoZSBjb2xsZWN0aW9uOyBOb3RoaW5nIG90aGVyd2lzZS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZHJvcCgyLCBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddKVxuICAvLy4gSnVzdChbJ2MnLCAnZCcsICdlJ10pXG4gIC8vLlxuICAvLy4gPiBTLmRyb3AoNCwgJ2FiY2RlZmcnKVxuICAvLy4gSnVzdCgnZWZnJylcbiAgLy8uXG4gIC8vLiA+IFMuZHJvcCg0LCAnYWJjJylcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBkcm9wKG4sIHhzKSB7XG4gICAgcmV0dXJuIG4gPCAwIHx8IG4gPiB4cy5sZW5ndGggPyBOb3RoaW5nIDogSnVzdCh4cy5zbGljZShuKSk7XG4gIH1cbiAgUy5kcm9wID0gZGVmKCdkcm9wJywge30sIFskLkludGVnZXIsIExpc3QoYSksICRNYXliZShMaXN0KGEpKV0sIGRyb3ApO1xuXG4gIC8vIyBkcm9wTGFzdCA6OiBJbnRlZ2VyIC0+IExpc3QgYSAtPiBNYXliZSAoTGlzdCBhKVxuICAvLy5cbiAgLy8uIFJldHVybnMgSnVzdCBhbGwgYnV0IHRoZSBsYXN0IE4gZWxlbWVudHMgb2YgdGhlIGdpdmVuIGNvbGxlY3Rpb25cbiAgLy8uIGlmIE4gaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHplcm8gYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGVcbiAgLy8uIGxlbmd0aCBvZiB0aGUgY29sbGVjdGlvbjsgTm90aGluZyBvdGhlcndpc2UuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmRyb3BMYXN0KDIsIFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ10pXG4gIC8vLiBKdXN0KFsnYScsICdiJywgJ2MnXSlcbiAgLy8uXG4gIC8vLiA+IFMuZHJvcExhc3QoNCwgJ2FiY2RlZmcnKVxuICAvLy4gSnVzdCgnYWJjJylcbiAgLy8uXG4gIC8vLiA+IFMuZHJvcExhc3QoNCwgJ2FiYycpXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gZHJvcExhc3QobiwgeHMpIHtcbiAgICByZXR1cm4gbiA8IDAgfHwgbiA+IHhzLmxlbmd0aCA/IE5vdGhpbmcgOiBKdXN0KHhzLnNsaWNlKDAsIHhzLmxlbmd0aCAtIG4pKTtcbiAgfVxuICBTLmRyb3BMYXN0ID1cbiAgZGVmKCdkcm9wTGFzdCcsIHt9LCBbJC5JbnRlZ2VyLCBMaXN0KGEpLCAkTWF5YmUoTGlzdChhKSldLCBkcm9wTGFzdCk7XG5cbiAgLy8uICMjIyBBcnJheVxuXG4gIC8vIyBzaXplIDo6IEZvbGRhYmxlIGYgPT4gZiBhIC0+IEludGVnZXJcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgb2YgdGhlIGdpdmVuIHN0cnVjdHVyZS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuc2l6ZShbXSlcbiAgLy8uIDBcbiAgLy8uXG4gIC8vLiA+IFMuc2l6ZShbJ2ZvbycsICdiYXInLCAnYmF6J10pXG4gIC8vLiAzXG4gIC8vLlxuICAvLy4gPiBTLnNpemUoTmlsKVxuICAvLy4gMFxuICAvLy5cbiAgLy8uID4gUy5zaXplKENvbnMoJ2ZvbycsIENvbnMoJ2JhcicsIENvbnMoJ2JheicsIE5pbCkpKSlcbiAgLy8uIDNcbiAgLy8uXG4gIC8vLiA+IFMuc2l6ZShTLk5vdGhpbmcpXG4gIC8vLiAwXG4gIC8vLlxuICAvLy4gPiBTLnNpemUoUy5KdXN0KCdxdXV4JykpXG4gIC8vLiAxXG4gIC8vLiBgYGBcbiAgUy5zaXplID0gZGVmKCdzaXplJywge2Y6IFtaLkZvbGRhYmxlXX0sIFtmKGEpLCAkLkludGVnZXJdLCBaLnNpemUpO1xuXG4gIC8vIyBhcHBlbmQgOjogKEFwcGxpY2F0aXZlIGYsIFNlbWlncm91cCAoZiBhKSkgPT4gYSAtPiBmIGEgLT4gZiBhXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGFwcGVuZGluZyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHNlY29uZC5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYHByZXBlbmRgXSgjcHJlcGVuZCkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmFwcGVuZCgzLCBbMSwgMl0pXG4gIC8vLiBbMSwgMiwgM11cbiAgLy8uXG4gIC8vLiA+IFMuYXBwZW5kKDMsIENvbnMoMSwgQ29ucygyLCBOaWwpKSlcbiAgLy8uIENvbnMoMSwgQ29ucygyLCBDb25zKDMsIE5pbCkpKVxuICAvLy5cbiAgLy8uID4gUy5hcHBlbmQoWzFdLCBTLk5vdGhpbmcpXG4gIC8vLiBKdXN0KFsxXSlcbiAgLy8uXG4gIC8vLiA+IFMuYXBwZW5kKFszXSwgUy5KdXN0KFsxLCAyXSkpXG4gIC8vLiBKdXN0KFsxLCAyLCAzXSlcbiAgLy8uIGBgYFxuICBTLmFwcGVuZCA9XG4gIGRlZignYXBwZW5kJyxcbiAgICAgIHtmOiBbWi5BcHBsaWNhdGl2ZSwgWi5TZW1pZ3JvdXBdfSxcbiAgICAgIFthLCBmKGEpLCBmKGEpXSxcbiAgICAgIFouYXBwZW5kKTtcblxuICAvLyMgcHJlcGVuZCA6OiAoQXBwbGljYXRpdmUgZiwgU2VtaWdyb3VwIChmIGEpKSA9PiBhIC0+IGYgYSAtPiBmIGFcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIHRoZSByZXN1bHQgb2YgcHJlcGVuZGluZyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHNlY29uZC5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYGFwcGVuZGBdKCNhcHBlbmQpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5wcmVwZW5kKDEsIFsyLCAzXSlcbiAgLy8uIFsxLCAyLCAzXVxuICAvLy5cbiAgLy8uID4gUy5wcmVwZW5kKDEsIENvbnMoMiwgQ29ucygzLCBOaWwpKSlcbiAgLy8uIENvbnMoMSwgQ29ucygyLCBDb25zKDMsIE5pbCkpKVxuICAvLy5cbiAgLy8uID4gUy5wcmVwZW5kKFsxXSwgUy5Ob3RoaW5nKVxuICAvLy4gSnVzdChbMV0pXG4gIC8vLlxuICAvLy4gPiBTLnByZXBlbmQoWzFdLCBTLkp1c3QoWzIsIDNdKSlcbiAgLy8uIEp1c3QoWzEsIDIsIDNdKVxuICAvLy4gYGBgXG4gIFMucHJlcGVuZCA9XG4gIGRlZigncHJlcGVuZCcsXG4gICAgICB7ZjogW1ouQXBwbGljYXRpdmUsIFouU2VtaWdyb3VwXX0sXG4gICAgICBbYSwgZihhKSwgZihhKV0sXG4gICAgICBaLnByZXBlbmQpO1xuXG4gIC8vIyBqb2luV2l0aCA6OiBTdHJpbmcgLT4gQXJyYXkgU3RyaW5nIC0+IFN0cmluZ1xuICAvLy5cbiAgLy8uIEpvaW5zIHRoZSBzdHJpbmdzIG9mIHRoZSBzZWNvbmQgYXJndW1lbnQgc2VwYXJhdGVkIGJ5IHRoZSBmaXJzdCBhcmd1bWVudC5cbiAgLy8uXG4gIC8vLiBQcm9wZXJ0aWVzOlxuICAvLy5cbiAgLy8uICAgLSBgZm9yYWxsIHMgOjogU3RyaW5nLCB0IDo6IFN0cmluZy4gUy5qb2luV2l0aChzLCBTLnNwbGl0T24ocywgdCkpID0gdGBcbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYHNwbGl0T25gXSgjc3BsaXRPbikuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmpvaW5XaXRoKCc6JywgWydmb28nLCAnYmFyJywgJ2JheiddKVxuICAvLy4gJ2ZvbzpiYXI6YmF6J1xuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGpvaW5XaXRoKHNlcGFyYXRvciwgc3MpIHtcbiAgICByZXR1cm4gc3Muam9pbihzZXBhcmF0b3IpO1xuICB9XG4gIFMuam9pbldpdGggPVxuICBkZWYoJ2pvaW5XaXRoJywge30sIFskLlN0cmluZywgJC5BcnJheSgkLlN0cmluZyksICQuU3RyaW5nXSwgam9pbldpdGgpO1xuXG4gIC8vIyBlbGVtIDo6IChTZXRvaWQgYSwgRm9sZGFibGUgZikgPT4gYSAtPiBmIGEgLT4gQm9vbGVhblxuICAvLy5cbiAgLy8uIFRha2VzIGEgdmFsdWUgYW5kIGEgc3RydWN0dXJlIGFuZCByZXR1cm5zIGB0cnVlYCBbaWZmXVtdIHRoZSB2YWx1ZSBpcyBhblxuICAvLy4gZWxlbWVudCBvZiB0aGUgc3RydWN0dXJlLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgZmluZGBdKCNmaW5kKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZWxlbSgnYycsIFsnYScsICdiJywgJ2MnXSlcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMuZWxlbSgneCcsIFsnYScsICdiJywgJ2MnXSlcbiAgLy8uIGZhbHNlXG4gIC8vLlxuICAvLy4gPiBTLmVsZW0oMywge3g6IDEsIHk6IDIsIHo6IDN9KVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5lbGVtKDgsIHt4OiAxLCB5OiAyLCB6OiAzfSlcbiAgLy8uIGZhbHNlXG4gIC8vLlxuICAvLy4gPiBTLmVsZW0oMCwgUy5KdXN0KDApKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5lbGVtKDAsIFMuSnVzdCgxKSlcbiAgLy8uIGZhbHNlXG4gIC8vLlxuICAvLy4gPiBTLmVsZW0oMCwgUy5Ob3RoaW5nKVxuICAvLy4gZmFsc2VcbiAgLy8uIGBgYFxuICBTLmVsZW0gPVxuICBkZWYoJ2VsZW0nLCB7YTogW1ouU2V0b2lkXSwgZjogW1ouRm9sZGFibGVdfSwgW2EsIGYoYSksICQuQm9vbGVhbl0sIFouZWxlbSk7XG5cbiAgLy8jIGZpbmQgOjogRm9sZGFibGUgZiA9PiAoYSAtPiBCb29sZWFuKSAtPiBmIGEgLT4gTWF5YmUgYVxuICAvLy5cbiAgLy8uIFRha2VzIGEgcHJlZGljYXRlIGFuZCBhIHN0cnVjdHVyZSBhbmQgcmV0dXJucyBKdXN0IHRoZSBsZWZ0bW9zdCBlbGVtZW50XG4gIC8vLiBvZiB0aGUgc3RydWN0dXJlIHdoaWNoIHNhdGlzZmllcyB0aGUgcHJlZGljYXRlOyBOb3RoaW5nIGlmIHRoZXJlIGlzIG5vXG4gIC8vLiBzdWNoIGVsZW1lbnQuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BlbGVtYF0oI2VsZW0pLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5maW5kKG4gPT4gbiA8IDAsIFsxLCAtMiwgMywgLTQsIDVdKVxuICAvLy4gSnVzdCgtMilcbiAgLy8uXG4gIC8vLiA+IFMuZmluZChuID0+IG4gPCAwLCBbMSwgMiwgMywgNCwgNV0pXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gZmluZChwcmVkLCB4cykge1xuICAgIHJldHVybiBaLnJlZHVjZShcbiAgICAgIGZ1bmN0aW9uKG0sIHgpIHsgcmV0dXJuIG0uaXNKdXN0ID8gbSA6IHByZWQoeCkgPyBKdXN0KHgpIDogTm90aGluZzsgfSxcbiAgICAgIE5vdGhpbmcsXG4gICAgICB4c1xuICAgICk7XG4gIH1cbiAgUy5maW5kID1cbiAgZGVmKCdmaW5kJywge2Y6IFtaLkZvbGRhYmxlXX0sIFskLlByZWRpY2F0ZShhKSwgZihhKSwgJE1heWJlKGEpXSwgZmluZCk7XG5cbiAgLy8jIHBsdWNrIDo6IEZ1bmN0b3IgZiA9PiBTdHJpbmcgLT4gZiBhIC0+IGYgYlxuICAvLy5cbiAgLy8uIENvbWJpbmVzIFtgbWFwYF0oI21hcCkgYW5kIFtgcHJvcGBdKCNwcm9wKS4gYHBsdWNrKGssIHhzKWAgaXMgZXF1aXZhbGVudFxuICAvLy4gdG8gYG1hcChwcm9wKGspLCB4cylgLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5wbHVjaygneCcsIFt7eDogMX0sIHt4OiAyfSwge3g6IDN9XSlcbiAgLy8uIFsxLCAyLCAzXVxuICAvLy5cbiAgLy8uID4gUy5wbHVjaygneCcsIFMuSnVzdCh7eDogMSwgeTogMiwgejogM30pKVxuICAvLy4gSnVzdCgxKVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHBsdWNrKGtleSwgeHMpIHtcbiAgICByZXR1cm4gWi5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgdmFyIG9iaiA9IHRvT2JqZWN0KHgpO1xuICAgICAgaWYgKGtleSBpbiBvYmopIHJldHVybiBvYmpba2V5XTtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ+KAmHBsdWNr4oCZIGV4cGVjdGVkIG9iamVjdCB0byBoYXZlIGEgcHJvcGVydHkgbmFtZWQgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICfigJgnICsga2V5ICsgJ+KAmTsgJyArIFoudG9TdHJpbmcoeCkgKyAnIGRvZXMgbm90Jyk7XG4gICAgfSwgeHMpO1xuICB9XG4gIFMucGx1Y2sgPSBkZWYoJ3BsdWNrJywge2Y6IFtaLkZ1bmN0b3JdfSwgWyQuU3RyaW5nLCBmKGEpLCBmKGIpXSwgcGx1Y2spO1xuXG4gIC8vIyB1bmZvbGRyIDo6IChiIC0+IE1heWJlIChQYWlyIGEgYikpIC0+IGIgLT4gQXJyYXkgYVxuICAvLy5cbiAgLy8uIFRha2VzIGEgZnVuY3Rpb24gYW5kIGEgc2VlZCB2YWx1ZSwgYW5kIHJldHVybnMgYW4gYXJyYXkgZ2VuZXJhdGVkIGJ5XG4gIC8vLiBhcHBseWluZyB0aGUgZnVuY3Rpb24gcmVwZWF0ZWRseS4gVGhlIGFycmF5IGlzIGluaXRpYWxseSBlbXB0eS4gVGhlXG4gIC8vLiBmdW5jdGlvbiBpcyBpbml0aWFsbHkgYXBwbGllZCB0byB0aGUgc2VlZCB2YWx1ZS4gRWFjaCBhcHBsaWNhdGlvblxuICAvLy4gb2YgdGhlIGZ1bmN0aW9uIHNob3VsZCByZXN1bHQgaW4gZWl0aGVyOlxuICAvLy5cbiAgLy8uICAgLSBOb3RoaW5nLCBpbiB3aGljaCBjYXNlIHRoZSBhcnJheSBpcyByZXR1cm5lZDsgb3JcbiAgLy8uXG4gIC8vLiAgIC0gSnVzdCBhIHBhaXIsIGluIHdoaWNoIGNhc2UgdGhlIGZpcnN0IGVsZW1lbnQgaXMgYXBwZW5kZWQgdG9cbiAgLy8uICAgICB0aGUgYXJyYXkgYW5kIHRoZSBmdW5jdGlvbiBpcyBhcHBsaWVkIHRvIHRoZSBzZWNvbmQgZWxlbWVudC5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMudW5mb2xkcihuID0+IG4gPCA1ID8gUy5KdXN0KFtuLCBuICsgMV0pIDogUy5Ob3RoaW5nLCAxKVxuICAvLy4gWzEsIDIsIDMsIDRdXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gdW5mb2xkcihmLCB4KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIG0gPSBmKHgpOyBtLmlzSnVzdDsgbSA9IGYobS52YWx1ZVsxXSkpIHJlc3VsdC5wdXNoKG0udmFsdWVbMF0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgUy51bmZvbGRyID1cbiAgZGVmKCd1bmZvbGRyJywge30sIFtGbihiLCAkTWF5YmUoJC5QYWlyKGEsIGIpKSksIGIsICQuQXJyYXkoYSldLCB1bmZvbGRyKTtcblxuICAvLyMgcmFuZ2UgOjogSW50ZWdlciAtPiBJbnRlZ2VyIC0+IEFycmF5IEludGVnZXJcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIGFuIGFycmF5IG9mIGNvbnNlY3V0aXZlIGludGVnZXJzIHN0YXJ0aW5nIHdpdGggdGhlIGZpcnN0IGFyZ3VtZW50XG4gIC8vLiBhbmQgZW5kaW5nIHdpdGggdGhlIHNlY29uZCBhcmd1bWVudCBtaW51cyBvbmUuIFJldHVybnMgYFtdYCBpZiB0aGUgc2Vjb25kXG4gIC8vLiBhcmd1bWVudCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGZpcnN0IGFyZ3VtZW50LlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5yYW5nZSgwLCAxMClcbiAgLy8uIFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5XVxuICAvLy5cbiAgLy8uID4gUy5yYW5nZSgtNSwgMClcbiAgLy8uIFstNSwgLTQsIC0zLCAtMiwgLTFdXG4gIC8vLlxuICAvLy4gPiBTLnJhbmdlKDAsIC01KVxuICAvLy4gW11cbiAgLy8uIGBgYFxuICBmdW5jdGlvbiByYW5nZShmcm9tLCB0bykge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBuID0gZnJvbTsgbiA8IHRvOyBuICs9IDEpIHJlc3VsdC5wdXNoKG4pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgUy5yYW5nZSA9XG4gIGRlZigncmFuZ2UnLCB7fSwgWyQuSW50ZWdlciwgJC5JbnRlZ2VyLCAkLkFycmF5KCQuSW50ZWdlcildLCByYW5nZSk7XG5cbiAgLy8jIGdyb3VwQnkgOjogKGEgLT4gYSAtPiBCb29sZWFuKSAtPiBBcnJheSBhIC0+IEFycmF5IChBcnJheSBhKVxuICAvLy5cbiAgLy8uIFNwbGl0cyBpdHMgYXJyYXkgYXJndW1lbnQgaW50byBhbiBhcnJheSBvZiBhcnJheXMgb2YgZXF1YWwsXG4gIC8vLiBhZGphY2VudCBlbGVtZW50cy4gRXF1YWxpdHkgaXMgZGV0ZXJtaW5lZCBieSB0aGUgZnVuY3Rpb25cbiAgLy8uIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudC4gSXRzIGJlaGF2aW91ciBjYW4gYmUgc3VycHJpc2luZ1xuICAvLy4gZm9yIGZ1bmN0aW9ucyB0aGF0IGFyZW4ndCByZWZsZXhpdmUsIHRyYW5zaXRpdmUsIGFuZCBzeW1tZXRyaWNcbiAgLy8uIChzZWUgW2VxdWl2YWxlbmNlXVtdIHJlbGF0aW9uKS5cbiAgLy8uXG4gIC8vLiBQcm9wZXJ0aWVzOlxuICAvLy5cbiAgLy8uICAgLSBgZm9yYWxsIGYgOjogYSAtPiBhIC0+IEJvb2xlYW4sIHhzIDo6IEFycmF5IGEuXG4gIC8vLiAgICAgIFMuam9pbihTLmdyb3VwQnkoZiwgeHMpKSA9IHhzYFxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5ncm91cEJ5KFMuZXF1YWxzLCBbMSwgMSwgMiwgMSwgMV0pXG4gIC8vLiBbWzEsIDFdLCBbMl0sIFsxLCAxXV1cbiAgLy8uXG4gIC8vLiA+IFMuZ3JvdXBCeSh4ID0+IHkgPT4geCArIHkgPT09IDAsIFsyLCAtMywgMywgMywgMywgNCwgLTQsIDRdKVxuICAvLy4gW1syXSwgWy0zLCAzLCAzLCAzXSwgWzQsIC00XSwgWzRdXVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGdyb3VwQnkoZiwgeHMpIHtcbiAgICBpZiAoeHMubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gICAgdmFyIHgwID0geHNbMF07ICAgICAgICAgLy8gOjogYVxuICAgIHZhciBhY3RpdmUgPSBbeDBdOyAgICAgIC8vIDo6IEFycmF5IGFcbiAgICB2YXIgcmVzdWx0ID0gW2FjdGl2ZV07ICAvLyA6OiBBcnJheSAoQXJyYXkgYSlcbiAgICBmb3IgKHZhciBpZHggPSAxOyBpZHggPCB4cy5sZW5ndGg7IGlkeCArPSAxKSB7XG4gICAgICB2YXIgeCA9IHhzW2lkeF07XG4gICAgICBpZiAoZih4MCkoeCkpIGFjdGl2ZS5wdXNoKHgpOyBlbHNlIHJlc3VsdC5wdXNoKGFjdGl2ZSA9IFt4MCA9IHhdKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBTLmdyb3VwQnkgPVxuICBkZWYoJ2dyb3VwQnknLFxuICAgICAge30sXG4gICAgICBbRm4oYSwgJC5QcmVkaWNhdGUoYSkpLCAkLkFycmF5KGEpLCAkLkFycmF5KCQuQXJyYXkoYSkpXSxcbiAgICAgIGdyb3VwQnkpO1xuXG4gIC8vIyByZXZlcnNlIDo6IChBcHBsaWNhdGl2ZSBmLCBGb2xkYWJsZSBmLCBNb25vaWQgKGYgYSkpID0+IGYgYSAtPiBmIGFcbiAgLy8uXG4gIC8vLiBSZXZlcnNlcyB0aGUgZWxlbWVudHMgb2YgdGhlIGdpdmVuIHN0cnVjdHVyZS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMucmV2ZXJzZShbMSwgMiwgM10pXG4gIC8vLiBbMywgMiwgMV1cbiAgLy8uXG4gIC8vLiA+IFMucmV2ZXJzZShDb25zKDEsIENvbnMoMiwgQ29ucygzLCBOaWwpKSkpXG4gIC8vLiBDb25zKDMsIENvbnMoMiwgQ29ucygxLCBOaWwpKSlcbiAgLy8uXG4gIC8vLiA+IFMucGlwZShbUy5zcGxpdE9uKCcnKSwgUy5yZXZlcnNlLCBTLmpvaW5XaXRoKCcnKV0sICdhYmMnKVxuICAvLy4gJ2NiYSdcbiAgLy8uIGBgYFxuICBTLnJldmVyc2UgPVxuICBkZWYoJ3JldmVyc2UnLFxuICAgICAge2Y6IFtaLkFwcGxpY2F0aXZlLCBaLkZvbGRhYmxlLCBaLk1vbm9pZF19LFxuICAgICAgW2YoYSksIGYoYSldLFxuICAgICAgWi5yZXZlcnNlKTtcblxuICAvLyMgc29ydCA6OiAoT3JkIGEsIEFwcGxpY2F0aXZlIG0sIEZvbGRhYmxlIG0sIE1vbm9pZCAobSBhKSkgPT4gbSBhIC0+IG0gYVxuICAvLy5cbiAgLy8uIFBlcmZvcm1zIGEgW3N0YWJsZSBzb3J0XVtdIG9mIHRoZSBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gc3RydWN0dXJlLCB1c2luZ1xuICAvLy4gW2BaLmx0ZWBdW10gZm9yIGNvbXBhcmlzb25zLlxuICAvLy5cbiAgLy8uIFByb3BlcnRpZXM6XG4gIC8vLlxuICAvLy4gICAtIGBTLnNvcnQoUy5zb3J0KG0pKSA9IFMuc29ydChtKWAgKGlkZW1wb3RlbmNlKVxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgc29ydEJ5YF0oI3NvcnRCeSkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnNvcnQoWydmb28nLCAnYmFyJywgJ2JheiddKVxuICAvLy4gWydiYXInLCAnYmF6JywgJ2ZvbyddXG4gIC8vLlxuICAvLy4gPiBTLnNvcnQoW1MuTGVmdCg0KSwgUy5SaWdodCgzKSwgUy5MZWZ0KDIpLCBTLlJpZ2h0KDEpXSlcbiAgLy8uIFtMZWZ0KDIpLCBMZWZ0KDQpLCBSaWdodCgxKSwgUmlnaHQoMyldXG4gIC8vLiBgYGBcbiAgUy5zb3J0ID1cbiAgZGVmKCdzb3J0JyxcbiAgICAgIHthOiBbWi5PcmRdLCBtOiBbWi5BcHBsaWNhdGl2ZSwgWi5Gb2xkYWJsZSwgWi5Nb25vaWRdfSxcbiAgICAgIFttKGEpLCBtKGEpXSxcbiAgICAgIFouc29ydCk7XG5cbiAgLy8jIHNvcnRCeSA6OiAoT3JkIGIsIEFwcGxpY2F0aXZlIG0sIEZvbGRhYmxlIG0sIE1vbm9pZCAobSBhKSkgPT4gKGEgLT4gYikgLT4gbSBhIC0+IG0gYVxuICAvLy5cbiAgLy8uIFBlcmZvcm1zIGEgW3N0YWJsZSBzb3J0XVtdIG9mIHRoZSBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gc3RydWN0dXJlLCB1c2luZ1xuICAvLy4gW2BaLmx0ZWBdW10gdG8gY29tcGFyZSB0aGUgdmFsdWVzIHByb2R1Y2VkIGJ5IGFwcGx5aW5nIHRoZSBnaXZlbiBmdW5jdGlvblxuICAvLy4gdG8gZWFjaCBlbGVtZW50IG9mIHRoZSBzdHJ1Y3R1cmUuXG4gIC8vLlxuICAvLy4gUHJvcGVydGllczpcbiAgLy8uXG4gIC8vLiAgIC0gYFMuc29ydEJ5KGYsIFMuc29ydEJ5KGYsIG0pKSA9IFMuc29ydEJ5KGYsIG0pYCAoaWRlbXBvdGVuY2UpXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2Bzb3J0YF0oI3NvcnQpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5zb3J0QnkoUy5wcm9wKCdyYW5rJyksIFtcbiAgLy8uIC4gICB7cmFuazogNywgc3VpdDogJ3NwYWRlcyd9LFxuICAvLy4gLiAgIHtyYW5rOiA1LCBzdWl0OiAnaGVhcnRzJ30sXG4gIC8vLiAuICAge3Jhbms6IDIsIHN1aXQ6ICdoZWFydHMnfSxcbiAgLy8uIC4gICB7cmFuazogNSwgc3VpdDogJ3NwYWRlcyd9LFxuICAvLy4gLiBdKVxuICAvLy4gWyB7cmFuazogMiwgc3VpdDogJ2hlYXJ0cyd9LFxuICAvLy4gLiB7cmFuazogNSwgc3VpdDogJ2hlYXJ0cyd9LFxuICAvLy4gLiB7cmFuazogNSwgc3VpdDogJ3NwYWRlcyd9LFxuICAvLy4gLiB7cmFuazogNywgc3VpdDogJ3NwYWRlcyd9IF1cbiAgLy8uXG4gIC8vLiA+IFMuc29ydEJ5KFMucHJvcCgnc3VpdCcpLCBbXG4gIC8vLiAuICAge3Jhbms6IDcsIHN1aXQ6ICdzcGFkZXMnfSxcbiAgLy8uIC4gICB7cmFuazogNSwgc3VpdDogJ2hlYXJ0cyd9LFxuICAvLy4gLiAgIHtyYW5rOiAyLCBzdWl0OiAnaGVhcnRzJ30sXG4gIC8vLiAuICAge3Jhbms6IDUsIHN1aXQ6ICdzcGFkZXMnfSxcbiAgLy8uIC4gXSlcbiAgLy8uIFsge3Jhbms6IDUsIHN1aXQ6ICdoZWFydHMnfSxcbiAgLy8uIC4ge3Jhbms6IDIsIHN1aXQ6ICdoZWFydHMnfSxcbiAgLy8uIC4ge3Jhbms6IDcsIHN1aXQ6ICdzcGFkZXMnfSxcbiAgLy8uIC4ge3Jhbms6IDUsIHN1aXQ6ICdzcGFkZXMnfSBdXG4gIC8vLiBgYGBcbiAgUy5zb3J0QnkgPVxuICBkZWYoJ3NvcnRCeScsXG4gICAgICB7YjogW1ouT3JkXSwgbTogW1ouQXBwbGljYXRpdmUsIFouRm9sZGFibGUsIFouTW9ub2lkXX0sXG4gICAgICBbRm4oYSwgYiksIG0oYSksIG0oYSldLFxuICAgICAgWi5zb3J0QnkpO1xuXG4gIC8vLiAjIyMgT2JqZWN0XG5cbiAgLy8jIHByb3AgOjogU3RyaW5nIC0+IGEgLT4gYlxuICAvLy5cbiAgLy8uIFRha2VzIGEgcHJvcGVydHkgbmFtZSBhbmQgYW4gb2JqZWN0IHdpdGgga25vd24gcHJvcGVydGllcyBhbmQgcmV0dXJuc1xuICAvLy4gdGhlIHZhbHVlIG9mIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkuIElmIGZvciBzb21lIHJlYXNvbiB0aGUgb2JqZWN0XG4gIC8vLiBsYWNrcyB0aGUgc3BlY2lmaWVkIHByb3BlcnR5LCBhIHR5cGUgZXJyb3IgaXMgdGhyb3duLlxuICAvLy5cbiAgLy8uIEZvciBhY2Nlc3NpbmcgcHJvcGVydGllcyBvZiB1bmNlcnRhaW4gb2JqZWN0cywgdXNlIFtgZ2V0YF0oI2dldCkgaW5zdGVhZC5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYHBsdWNrYF0oI3BsdWNrKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMucHJvcCgnYScsIHthOiAxLCBiOiAyfSlcbiAgLy8uIDFcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBwcm9wKGtleSwgeCkge1xuICAgIHZhciBvYmogPSB0b09iamVjdCh4KTtcbiAgICBpZiAoa2V5IGluIG9iaikgcmV0dXJuIG9ialtrZXldO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ+KAmHByb3DigJkgZXhwZWN0ZWQgb2JqZWN0IHRvIGhhdmUgYSBwcm9wZXJ0eSBuYW1lZCDigJgnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSArICfigJk7ICcgKyBaLnRvU3RyaW5nKHgpICsgJyBkb2VzIG5vdCcpO1xuICB9XG4gIFMucHJvcCA9IGRlZigncHJvcCcsIHt9LCBbJC5TdHJpbmcsIGEsIGJdLCBwcm9wKTtcblxuICAvLyMgcHJvcHMgOjogQXJyYXkgU3RyaW5nIC0+IGEgLT4gYlxuICAvLy5cbiAgLy8uIFRha2VzIGEgcHJvcGVydHkgcGF0aCAoYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMpIGFuZCBhbiBvYmplY3Qgd2l0aFxuICAvLy4ga25vd24gc3RydWN0dXJlIGFuZCByZXR1cm5zIHRoZSB2YWx1ZSBhdCB0aGUgZ2l2ZW4gcGF0aC4gSWYgZm9yIHNvbWVcbiAgLy8uIHJlYXNvbiB0aGUgcGF0aCBkb2VzIG5vdCBleGlzdCwgYSB0eXBlIGVycm9yIGlzIHRocm93bi5cbiAgLy8uXG4gIC8vLiBGb3IgYWNjZXNzaW5nIHByb3BlcnR5IHBhdGhzIG9mIHVuY2VydGFpbiBvYmplY3RzLCB1c2UgW2BnZXRzYF0oI2dldHMpXG4gIC8vLiBpbnN0ZWFkLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5wcm9wcyhbJ2EnLCAnYicsICdjJ10sIHthOiB7Yjoge2M6IDF9fX0pXG4gIC8vLiAxXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gcHJvcHMocGF0aCwgeCkge1xuICAgIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbih4LCBrZXkpIHtcbiAgICAgIHZhciBvYmogPSB0b09iamVjdCh4KTtcbiAgICAgIGlmIChrZXkgaW4gb2JqKSByZXR1cm4gb2JqW2tleV07XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCfigJhwcm9wc+KAmSBleHBlY3RlZCBvYmplY3QgdG8gaGF2ZSBhIHByb3BlcnR5IGF0ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBaLnRvU3RyaW5nKHBhdGgpICsgJzsgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFoudG9TdHJpbmcoeCkgKyAnIGRvZXMgbm90Jyk7XG4gICAgfSwgeCk7XG4gIH1cbiAgUy5wcm9wcyA9IGRlZigncHJvcHMnLCB7fSwgWyQuQXJyYXkoJC5TdHJpbmcpLCBhLCBiXSwgcHJvcHMpO1xuXG4gIC8vIyBnZXQgOjogKEFueSAtPiBCb29sZWFuKSAtPiBTdHJpbmcgLT4gYSAtPiBNYXliZSBiXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBwcmVkaWNhdGUsIGEgcHJvcGVydHkgbmFtZSwgYW5kIGFuIG9iamVjdCBhbmQgcmV0dXJucyBKdXN0IHRoZVxuICAvLy4gdmFsdWUgb2YgdGhlIHNwZWNpZmllZCBvYmplY3QgcHJvcGVydHkgaWYgaXQgZXhpc3RzIGFuZCB0aGUgdmFsdWVcbiAgLy8uIHNhdGlzZmllcyB0aGUgZ2l2ZW4gcHJlZGljYXRlOyBOb3RoaW5nIG90aGVyd2lzZS5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYGdldHNgXSgjZ2V0cykgYW5kIFtgcHJvcGBdKCNwcm9wKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZ2V0KFMuaXMoTnVtYmVyKSwgJ3gnLCB7eDogMSwgeTogMn0pXG4gIC8vLiBKdXN0KDEpXG4gIC8vLlxuICAvLy4gPiBTLmdldChTLmlzKE51bWJlciksICd4Jywge3g6ICcxJywgeTogJzInfSlcbiAgLy8uIE5vdGhpbmdcbiAgLy8uXG4gIC8vLiA+IFMuZ2V0KFMuaXMoTnVtYmVyKSwgJ3gnLCB7fSlcbiAgLy8uIE5vdGhpbmdcbiAgLy8uXG4gIC8vLiA+IFMuZ2V0KCQudGVzdChbXSwgJC5BcnJheSgkLk51bWJlcikpLCAneCcsIHt4OiBbMSwgMiwgM119KVxuICAvLy4gSnVzdChbMSwgMiwgM10pXG4gIC8vLlxuICAvLy4gPiBTLmdldCgkLnRlc3QoW10sICQuQXJyYXkoJC5OdW1iZXIpKSwgJ3gnLCB7eDogWzEsIDIsIDMsIG51bGxdfSlcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBnZXQocHJlZCwga2V5LCB4KSB7XG4gICAgdmFyIG9iaiA9IHRvT2JqZWN0KHgpO1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICB2YXIgdmFsID0gb2JqW2tleV07XG4gICAgICBpZiAocHJlZCh2YWwpKSByZXR1cm4gSnVzdCh2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gTm90aGluZztcbiAgfVxuICBTLmdldCA9IGRlZignZ2V0Jywge30sIFskLlByZWRpY2F0ZSgkLkFueSksICQuU3RyaW5nLCBhLCAkTWF5YmUoYildLCBnZXQpO1xuXG4gIC8vIyBnZXRzIDo6IChBbnkgLT4gQm9vbGVhbikgLT4gQXJyYXkgU3RyaW5nIC0+IGEgLT4gTWF5YmUgYlxuICAvLy5cbiAgLy8uIFRha2VzIGEgcHJlZGljYXRlLCBhIHByb3BlcnR5IHBhdGggKGFuIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzKSwgYW5kXG4gIC8vLiBhbiBvYmplY3QgYW5kIHJldHVybnMgSnVzdCB0aGUgdmFsdWUgYXQgdGhlIGdpdmVuIHBhdGggaWYgc3VjaCBhIHBhdGhcbiAgLy8uIGV4aXN0cyBhbmQgdGhlIHZhbHVlIHNhdGlzZmllcyB0aGUgZ2l2ZW4gcHJlZGljYXRlOyBOb3RoaW5nIG90aGVyd2lzZS5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYGdldGBdKCNnZXQpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5nZXRzKFMuaXMoTnVtYmVyKSwgWydhJywgJ2InLCAnYyddLCB7YToge2I6IHtjOiA0Mn19fSlcbiAgLy8uIEp1c3QoNDIpXG4gIC8vLlxuICAvLy4gPiBTLmdldHMoUy5pcyhOdW1iZXIpLCBbJ2EnLCAnYicsICdjJ10sIHthOiB7Yjoge2M6ICc0Mid9fX0pXG4gIC8vLiBOb3RoaW5nXG4gIC8vLlxuICAvLy4gPiBTLmdldHMoUy5pcyhOdW1iZXIpLCBbJ2EnLCAnYicsICdjJ10sIHt9KVxuICAvLy4gTm90aGluZ1xuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGdldHMocHJlZCwga2V5cywgeCkge1xuICAgIHJldHVybiBaLmZpbHRlcihwcmVkLCBaLnJlZHVjZShmdW5jdGlvbihtLCBrZXkpIHtcbiAgICAgIHJldHVybiBaLmNoYWluKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgdmFyIG9iaiA9IHRvT2JqZWN0KHgpO1xuICAgICAgICByZXR1cm4ga2V5IGluIG9iaiA/IEp1c3Qob2JqW2tleV0pIDogTm90aGluZztcbiAgICAgIH0sIG0pO1xuICAgIH0sIEp1c3QoeCksIGtleXMpKTtcbiAgfVxuICBTLmdldHMgPVxuICBkZWYoJ2dldHMnLCB7fSwgWyQuUHJlZGljYXRlKCQuQW55KSwgJC5BcnJheSgkLlN0cmluZyksIGEsICRNYXliZShiKV0sIGdldHMpO1xuXG4gIC8vLiAjIyMgU3RyTWFwXG4gIC8vLlxuICAvLy4gU3RyTWFwIGlzIGFuIGFiYnJldmlhdGlvbiBvZiBfc3RyaW5nIG1hcF8uIEEgc3RyaW5nIG1hcCBpcyBhbiBvYmplY3QsXG4gIC8vLiBzdWNoIGFzIGB7Zm9vOiAxLCBiYXI6IDIsIGJhejogM31gLCB3aG9zZSB2YWx1ZXMgYXJlIGFsbCBtZW1iZXJzIG9mXG4gIC8vLiB0aGUgc2FtZSB0eXBlLiBGb3JtYWxseSwgYSB2YWx1ZSBpcyBhIG1lbWJlciBvZiB0eXBlIGBTdHJNYXAgYWAgaWYgaXRzXG4gIC8vLiBbdHlwZSBpZGVudGlmaWVyXVtdIGlzIGAnT2JqZWN0J2AgYW5kIHRoZSB2YWx1ZXMgb2YgaXRzIGVudW1lcmFibGUgb3duXG4gIC8vLiBwcm9wZXJ0aWVzIGFyZSBhbGwgbWVtYmVycyBvZiB0eXBlIGBhYC5cblxuICAvLyMgc2luZ2xldG9uIDo6IFN0cmluZyAtPiBhIC0+IFN0ck1hcCBhXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBzdHJpbmcgYW5kIGEgdmFsdWUgb2YgYW55IHR5cGUsIGFuZCByZXR1cm5zIGEgc3RyaW5nIG1hcCB3aXRoXG4gIC8vLiBhIHNpbmdsZSBlbnRyeSAobWFwcGluZyB0aGUga2V5IHRvIHRoZSB2YWx1ZSkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnNpbmdsZXRvbignZm9vJywgNDIpXG4gIC8vLiB7Zm9vOiA0Mn1cbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBzaW5nbGV0b24oa2V5LCB2YWwpIHtcbiAgICB2YXIgc3RyTWFwID0ge307XG4gICAgc3RyTWFwW2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHN0ck1hcDtcbiAgfVxuICBTLnNpbmdsZXRvbiA9IGRlZignc2luZ2xldG9uJywge30sIFskLlN0cmluZywgYSwgJC5TdHJNYXAoYSldLCBzaW5nbGV0b24pO1xuXG4gIC8vIyBpbnNlcnQgOjogU3RyaW5nIC0+IGEgLT4gU3RyTWFwIGEgLT4gU3RyTWFwIGFcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIHN0cmluZywgYSB2YWx1ZSBvZiBhbnkgdHlwZSwgYW5kIGEgc3RyaW5nIG1hcCwgYW5kIHJldHVybnMgYVxuICAvLy4gc3RyaW5nIG1hcCBjb21wcmlzaW5nIGFsbCB0aGUgZW50cmllcyBvZiB0aGUgZ2l2ZW4gc3RyaW5nIG1hcCBwbHVzIHRoZVxuICAvLy4gZW50cnkgc3BlY2lmaWVkIGJ5IHRoZSBmaXJzdCB0d28gYXJndW1lbnRzICh3aGljaCB0YWtlcyBwcmVjZWRlbmNlKS5cbiAgLy8uXG4gIC8vLiBFcXVpdmFsZW50IHRvIEhhc2tlbGwncyBgaW5zZXJ0YCBmdW5jdGlvbi4gU2ltaWxhciB0byBDbG9qdXJlJ3MgYGFzc29jYFxuICAvLy4gZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmluc2VydCgnYycsIDMsIHthOiAxLCBiOiAyfSlcbiAgLy8uIHthOiAxLCBiOiAyLCBjOiAzfVxuICAvLy5cbiAgLy8uID4gUy5pbnNlcnQoJ2EnLCA0LCB7YTogMSwgYjogMn0pXG4gIC8vLiB7YTogNCwgYjogMn1cbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBpbnNlcnQoa2V5LCB2YWwsIHN0ck1hcCkge1xuICAgIHJldHVybiBaLmNvbmNhdChzdHJNYXAsIHNpbmdsZXRvbihrZXksIHZhbCkpO1xuICB9XG4gIFMuaW5zZXJ0ID1cbiAgZGVmKCdpbnNlcnQnLCB7fSwgWyQuU3RyaW5nLCBhLCAkLlN0ck1hcChhKSwgJC5TdHJNYXAoYSldLCBpbnNlcnQpO1xuXG4gIC8vIyByZW1vdmUgOjogU3RyaW5nIC0+IFN0ck1hcCBhIC0+IFN0ck1hcCBhXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBzdHJpbmcgYW5kIGEgc3RyaW5nIG1hcCwgYW5kIHJldHVybnMgYSBzdHJpbmcgbWFwIGNvbXByaXNpbmcgYWxsXG4gIC8vLiB0aGUgZW50cmllcyBvZiB0aGUgZ2l2ZW4gc3RyaW5nIG1hcCBleGNlcHQgdGhlIG9uZSB3aG9zZSBrZXkgbWF0Y2hlcyB0aGVcbiAgLy8uIGdpdmVuIHN0cmluZyAoaWYgc3VjaCBhIGtleSBleGlzdHMpLlxuICAvLy5cbiAgLy8uIEVxdWl2YWxlbnQgdG8gSGFza2VsbCdzIGBkZWxldGVgIGZ1bmN0aW9uLiBTaW1pbGFyIHRvIENsb2p1cmUncyBgZGlzc29jYFxuICAvLy4gZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnJlbW92ZSgnYycsIHthOiAxLCBiOiAyLCBjOiAzfSlcbiAgLy8uIHthOiAxLCBiOiAyfVxuICAvLy5cbiAgLy8uID4gUy5yZW1vdmUoJ2MnLCB7fSlcbiAgLy8uIHt9XG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gcmVtb3ZlKGtleSwgc3RyTWFwKSB7XG4gICAgdmFyIHJlc3VsdCA9IFouY29uY2F0KHN0ck1hcCwge30pO1xuICAgIGRlbGV0ZSByZXN1bHRba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIFMucmVtb3ZlID0gZGVmKCdyZW1vdmUnLCB7fSwgWyQuU3RyaW5nLCAkLlN0ck1hcChhKSwgJC5TdHJNYXAoYSldLCByZW1vdmUpO1xuXG4gIC8vIyBrZXlzIDo6IFN0ck1hcCBhIC0+IEFycmF5IFN0cmluZ1xuICAvLy5cbiAgLy8uIFJldHVybnMgdGhlIGtleXMgb2YgdGhlIGdpdmVuIHN0cmluZyBtYXAsIGluIGFyYml0cmFyeSBvcmRlci5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMua2V5cyh7YjogMiwgYzogMywgYTogMX0pLnNvcnQoKVxuICAvLy4gWydhJywgJ2InLCAnYyddXG4gIC8vLiBgYGBcbiAgUy5rZXlzID0gZGVmKCdrZXlzJywge30sIFskLlN0ck1hcChhKSwgJC5BcnJheSgkLlN0cmluZyldLCBPYmplY3Qua2V5cyk7XG5cbiAgLy8jIHZhbHVlcyA6OiBTdHJNYXAgYSAtPiBBcnJheSBhXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBzdHJpbmcgbWFwLCBpbiBhcmJpdHJhcnkgb3JkZXIuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnZhbHVlcyh7YTogMSwgYzogMywgYjogMn0pLnNvcnQoKVxuICAvLy4gWzEsIDIsIDNdXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gdmFsdWVzKHN0ck1hcCkge1xuICAgIHJldHVybiBaLm1hcChmdW5jdGlvbihrKSB7IHJldHVybiBzdHJNYXBba107IH0sIE9iamVjdC5rZXlzKHN0ck1hcCkpO1xuICB9XG4gIFMudmFsdWVzID0gZGVmKCd2YWx1ZXMnLCB7fSwgWyQuU3RyTWFwKGEpLCAkLkFycmF5KGEpXSwgdmFsdWVzKTtcblxuICAvLyMgcGFpcnMgOjogU3RyTWFwIGEgLT4gQXJyYXkgKFBhaXIgU3RyaW5nIGEpXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUga2V54oCTdmFsdWUgcGFpcnMgb2YgdGhlIGdpdmVuIHN0cmluZyBtYXAsIGluIGFyYml0cmFyeSBvcmRlci5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMucGFpcnMoe2I6IDIsIGE6IDEsIGM6IDN9KS5zb3J0KClcbiAgLy8uIFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHBhaXJzKHN0ck1hcCkge1xuICAgIHJldHVybiBaLm1hcChmdW5jdGlvbihrKSB7IHJldHVybiBbaywgc3RyTWFwW2tdXTsgfSwgT2JqZWN0LmtleXMoc3RyTWFwKSk7XG4gIH1cbiAgUy5wYWlycyA9XG4gIGRlZigncGFpcnMnLCB7fSwgWyQuU3RyTWFwKGEpLCAkLkFycmF5KCQuUGFpcigkLlN0cmluZywgYSkpXSwgcGFpcnMpO1xuXG4gIC8vIyBmcm9tUGFpcnMgOjogRm9sZGFibGUgZiA9PiBmIChQYWlyIFN0cmluZyBhKSAtPiBTdHJNYXAgYVxuICAvLy5cbiAgLy8uIFJldHVybnMgYSBzdHJpbmcgbWFwIGNvbnRhaW5pbmcgdGhlIGtleeKAk3ZhbHVlIHBhaXJzIHNwZWNpZmllZCBieSB0aGVcbiAgLy8uIGdpdmVuIFtGb2xkYWJsZV1bXS4gSWYgYSBrZXkgYXBwZWFycyBpbiBtdWx0aXBsZSBwYWlycywgdGhlIHJpZ2h0bW9zdFxuICAvLy4gcGFpciB0YWtlcyBwcmVjZWRlbmNlLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dKVxuICAvLy4ge2E6IDEsIGI6IDIsIGM6IDN9XG4gIC8vLlxuICAvLy4gPiBTLmZyb21QYWlycyhbWyd4JywgMV0sIFsneCcsIDJdXSlcbiAgLy8uIHt4OiAyfVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgIHJldHVybiBaLnJlZHVjZShmdW5jdGlvbihzdHJNYXAsIHBhaXIpIHtcbiAgICAgIHN0ck1hcFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICByZXR1cm4gc3RyTWFwO1xuICAgIH0sIHt9LCBwYWlycyk7XG4gIH1cbiAgUy5mcm9tUGFpcnMgPVxuICBkZWYoJ2Zyb21QYWlycycsXG4gICAgICB7ZjogW1ouRm9sZGFibGVdfSxcbiAgICAgIFtmKCQuUGFpcigkLlN0cmluZywgYSkpLCAkLlN0ck1hcChhKV0sXG4gICAgICBmcm9tUGFpcnMpO1xuXG4gIC8vLiAjIyMgTnVtYmVyXG5cbiAgLy8jIG5lZ2F0ZSA6OiBWYWxpZE51bWJlciAtPiBWYWxpZE51bWJlclxuICAvLy5cbiAgLy8uIE5lZ2F0ZXMgaXRzIGFyZ3VtZW50LlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5uZWdhdGUoMTIuNSlcbiAgLy8uIC0xMi41XG4gIC8vLlxuICAvLy4gPiBTLm5lZ2F0ZSgtNDIpXG4gIC8vLiA0MlxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIG5lZ2F0ZShuKSB7XG4gICAgcmV0dXJuIC1uO1xuICB9XG4gIFMubmVnYXRlID0gZGVmKCduZWdhdGUnLCB7fSwgWyQuVmFsaWROdW1iZXIsICQuVmFsaWROdW1iZXJdLCBuZWdhdGUpO1xuXG4gIC8vIyBhZGQgOjogRmluaXRlTnVtYmVyIC0+IEZpbml0ZU51bWJlciAtPiBGaW5pdGVOdW1iZXJcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIHRoZSBzdW0gb2YgdHdvIChmaW5pdGUpIG51bWJlcnMuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmFkZCgxLCAxKVxuICAvLy4gMlxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGFkZCh4LCB5KSB7XG4gICAgcmV0dXJuIHggKyB5O1xuICB9XG4gIFMuYWRkID1cbiAgZGVmKCdhZGQnLCB7fSwgWyQuRmluaXRlTnVtYmVyLCAkLkZpbml0ZU51bWJlciwgJC5GaW5pdGVOdW1iZXJdLCBhZGQpO1xuXG4gIC8vIyBzdW0gOjogRm9sZGFibGUgZiA9PiBmIEZpbml0ZU51bWJlciAtPiBGaW5pdGVOdW1iZXJcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIHRoZSBzdW0gb2YgdGhlIGdpdmVuIGFycmF5IG9mIChmaW5pdGUpIG51bWJlcnMuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnN1bShbMSwgMiwgMywgNCwgNV0pXG4gIC8vLiAxNVxuICAvLy5cbiAgLy8uID4gUy5zdW0oW10pXG4gIC8vLiAwXG4gIC8vLlxuICAvLy4gPiBTLnN1bShTLkp1c3QoNDIpKVxuICAvLy4gNDJcbiAgLy8uXG4gIC8vLiA+IFMuc3VtKFMuTm90aGluZylcbiAgLy8uIDBcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBzdW0oZm9sZGFibGUpIHtcbiAgICByZXR1cm4gWi5yZWR1Y2UoYWRkLCAwLCBmb2xkYWJsZSk7XG4gIH1cbiAgUy5zdW0gPVxuICBkZWYoJ3N1bScsIHtmOiBbWi5Gb2xkYWJsZV19LCBbZigkLkZpbml0ZU51bWJlciksICQuRmluaXRlTnVtYmVyXSwgc3VtKTtcblxuICAvLyMgc3ViIDo6IEZpbml0ZU51bWJlciAtPiAoRmluaXRlTnVtYmVyIC0+IEZpbml0ZU51bWJlcilcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIGZpbml0ZSBudW1iZXIgYG5gIGFuZCByZXR1cm5zIHRoZSBfc3VidHJhY3QgYG5gXyBmdW5jdGlvbi5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYHN1Yl9gXSgjc3ViXykuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm1hcChTLnN1YigxKSwgWzEsIDIsIDNdKVxuICAvLy4gWzAsIDEsIDJdXG4gIC8vLiBgYGBcbiAgUy5zdWIgPVxuICBkZWYoJ3N1YicsXG4gICAgICB7fSxcbiAgICAgIFskLkZpbml0ZU51bWJlciwgRm4oJC5GaW5pdGVOdW1iZXIsICQuRmluaXRlTnVtYmVyKV0sXG4gICAgICBmbGlwJChzdWJfKSk7XG5cbiAgLy8jIHN1Yl8gOjogRmluaXRlTnVtYmVyIC0+IEZpbml0ZU51bWJlciAtPiBGaW5pdGVOdW1iZXJcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIChmaW5pdGUpIG51bWJlcnMuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BzdWJgXSgjc3ViKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuc3ViXyg0LCAyKVxuICAvLy4gMlxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHN1Yl8oeCwgeSkge1xuICAgIHJldHVybiB4IC0geTtcbiAgfVxuICBTLnN1Yl8gPVxuICBkZWYoJ3N1Yl8nLCB7fSwgWyQuRmluaXRlTnVtYmVyLCAkLkZpbml0ZU51bWJlciwgJC5GaW5pdGVOdW1iZXJdLCBzdWJfKTtcblxuICAvLyMgbXVsdCA6OiBGaW5pdGVOdW1iZXIgLT4gRmluaXRlTnVtYmVyIC0+IEZpbml0ZU51bWJlclxuICAvLy5cbiAgLy8uIFJldHVybnMgdGhlIHByb2R1Y3Qgb2YgdHdvIChmaW5pdGUpIG51bWJlcnMuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm11bHQoNCwgMilcbiAgLy8uIDhcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBtdWx0KHgsIHkpIHtcbiAgICByZXR1cm4geCAqIHk7XG4gIH1cbiAgUy5tdWx0ID1cbiAgZGVmKCdtdWx0Jywge30sIFskLkZpbml0ZU51bWJlciwgJC5GaW5pdGVOdW1iZXIsICQuRmluaXRlTnVtYmVyXSwgbXVsdCk7XG5cbiAgLy8jIHByb2R1Y3QgOjogRm9sZGFibGUgZiA9PiBmIEZpbml0ZU51bWJlciAtPiBGaW5pdGVOdW1iZXJcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoZSBnaXZlbiBhcnJheSBvZiAoZmluaXRlKSBudW1iZXJzLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5wcm9kdWN0KFsxLCAyLCAzLCA0LCA1XSlcbiAgLy8uIDEyMFxuICAvLy5cbiAgLy8uID4gUy5wcm9kdWN0KFtdKVxuICAvLy4gMVxuICAvLy5cbiAgLy8uID4gUy5wcm9kdWN0KFMuSnVzdCg0MikpXG4gIC8vLiA0MlxuICAvLy5cbiAgLy8uID4gUy5wcm9kdWN0KFMuTm90aGluZylcbiAgLy8uIDFcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBwcm9kdWN0KGZvbGRhYmxlKSB7XG4gICAgcmV0dXJuIFoucmVkdWNlKG11bHQsIDEsIGZvbGRhYmxlKTtcbiAgfVxuICBTLnByb2R1Y3QgPVxuICBkZWYoJ3Byb2R1Y3QnLFxuICAgICAge2Y6IFtaLkZvbGRhYmxlXX0sXG4gICAgICBbZigkLkZpbml0ZU51bWJlciksICQuRmluaXRlTnVtYmVyXSxcbiAgICAgIHByb2R1Y3QpO1xuXG4gIC8vIyBkaXYgOjogTm9uWmVyb0Zpbml0ZU51bWJlciAtPiAoRmluaXRlTnVtYmVyIC0+IEZpbml0ZU51bWJlcilcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIG5vbi16ZXJvIGZpbml0ZSBudW1iZXIgYG5gIGFuZCByZXR1cm5zIHRoZSBfZGl2aWRlIGJ5IGBuYF9cbiAgLy8uIGZ1bmN0aW9uLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgZGl2X2BdKCNkaXZfKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMubWFwKFMuZGl2KDIpLCBbMCwgMSwgMiwgM10pXG4gIC8vLiBbMCwgMC41LCAxLCAxLjVdXG4gIC8vLiBgYGBcbiAgUy5kaXYgPVxuICBkZWYoJ2RpdicsXG4gICAgICB7fSxcbiAgICAgIFskLk5vblplcm9GaW5pdGVOdW1iZXIsIEZuKCQuRmluaXRlTnVtYmVyLCAkLkZpbml0ZU51bWJlcildLFxuICAgICAgZmxpcCQoZGl2XykpO1xuXG4gIC8vIyBkaXZfIDo6IEZpbml0ZU51bWJlciAtPiBOb25aZXJvRmluaXRlTnVtYmVyIC0+IEZpbml0ZU51bWJlclxuICAvLy5cbiAgLy8uIFJldHVybnMgdGhlIHJlc3VsdCBvZiBkaXZpZGluZyBpdHMgZmlyc3QgYXJndW1lbnQgKGEgZmluaXRlIG51bWJlcikgYnlcbiAgLy8uIGl0cyBzZWNvbmQgYXJndW1lbnQgKGEgbm9uLXplcm8gZmluaXRlIG51bWJlcikuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BkaXZgXSgjZGl2KS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuZGl2Xyg3LCAyKVxuICAvLy4gMy41XG4gIC8vLlxuICAvLy4gPiBTLm1hcChTLmRpdl8oMjQpLCBbMSwgMiwgMywgNF0pXG4gIC8vLiBbMjQsIDEyLCA4LCA2XVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIGRpdl8oeCwgeSkge1xuICAgIHJldHVybiB4IC8geTtcbiAgfVxuICBTLmRpdl8gPVxuICBkZWYoJ2Rpdl8nLFxuICAgICAge30sXG4gICAgICBbJC5GaW5pdGVOdW1iZXIsICQuTm9uWmVyb0Zpbml0ZU51bWJlciwgJC5GaW5pdGVOdW1iZXJdLFxuICAgICAgZGl2Xyk7XG5cbiAgLy8jIHBvdyA6OiBGaW5pdGVOdW1iZXIgLT4gKEZpbml0ZU51bWJlciAtPiBGaW5pdGVOdW1iZXIpXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBmaW5pdGUgbnVtYmVyIGBuYCBhbmQgcmV0dXJucyB0aGUgX3Bvd2VyIG9mIGBuYF8gZnVuY3Rpb24uXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2Bwb3dfYF0oI3Bvd18pLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5tYXAoUy5wb3coMiksIFstMywgLTIsIC0xLCAwLCAxLCAyLCAzXSlcbiAgLy8uIFs5LCA0LCAxLCAwLCAxLCA0LCA5XVxuICAvLy5cbiAgLy8uID4gUy5tYXAoUy5wb3coMC41KSwgWzEsIDQsIDksIDE2LCAyNV0pXG4gIC8vLiBbMSwgMiwgMywgNCwgNV1cbiAgLy8uIGBgYFxuICBTLnBvdyA9XG4gIGRlZigncG93JyxcbiAgICAgIHt9LFxuICAgICAgWyQuRmluaXRlTnVtYmVyLCBGbigkLkZpbml0ZU51bWJlciwgJC5GaW5pdGVOdW1iZXIpXSxcbiAgICAgIGZsaXAkKE1hdGgucG93KSk7XG5cbiAgLy8jIHBvd18gOjogRmluaXRlTnVtYmVyIC0+IEZpbml0ZU51bWJlciAtPiBGaW5pdGVOdW1iZXJcbiAgLy8uXG4gIC8vLiBDdXJyaWVkIHZlcnNpb24gb2YgW2BNYXRoLnBvd2BdW10uXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2Bwb3dgXSgjcG93KS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMubWFwKFMucG93XygxMCksIFstMywgLTIsIC0xLCAwLCAxLCAyLCAzXSlcbiAgLy8uIFswLjAwMSwgMC4wMSwgMC4xLCAxLCAxMCwgMTAwLCAxMDAwXVxuICAvLy4gYGBgXG4gIFMucG93XyA9XG4gIGRlZigncG93XycsIHt9LCBbJC5GaW5pdGVOdW1iZXIsICQuRmluaXRlTnVtYmVyLCAkLkZpbml0ZU51bWJlcl0sIE1hdGgucG93KTtcblxuICAvLyMgbWVhbiA6OiBGb2xkYWJsZSBmID0+IGYgRmluaXRlTnVtYmVyIC0+IE1heWJlIEZpbml0ZU51bWJlclxuICAvLy5cbiAgLy8uIFJldHVybnMgdGhlIG1lYW4gb2YgdGhlIGdpdmVuIGFycmF5IG9mIChmaW5pdGUpIG51bWJlcnMuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm1lYW4oWzEsIDIsIDMsIDQsIDVdKVxuICAvLy4gSnVzdCgzKVxuICAvLy5cbiAgLy8uID4gUy5tZWFuKFtdKVxuICAvLy4gTm90aGluZ1xuICAvLy5cbiAgLy8uID4gUy5tZWFuKFMuSnVzdCg0MikpXG4gIC8vLiBKdXN0KDQyKVxuICAvLy5cbiAgLy8uID4gUy5tZWFuKFMuTm90aGluZylcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBtZWFuKGZvbGRhYmxlKSB7XG4gICAgdmFyIHJlc3VsdCA9IFoucmVkdWNlKFxuICAgICAgZnVuY3Rpb24oYWNjLCBuKSB7XG4gICAgICAgIGFjYy50b3RhbCArPSBuO1xuICAgICAgICBhY2MuY291bnQgKz0gMTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sXG4gICAgICB7dG90YWw6IDAsIGNvdW50OiAwfSxcbiAgICAgIGZvbGRhYmxlXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0LmNvdW50ID4gMCA/IEp1c3QocmVzdWx0LnRvdGFsIC8gcmVzdWx0LmNvdW50KSA6IE5vdGhpbmc7XG4gIH1cbiAgUy5tZWFuID1cbiAgZGVmKCdtZWFuJyxcbiAgICAgIHtmOiBbWi5Gb2xkYWJsZV19LFxuICAgICAgW2YoJC5GaW5pdGVOdW1iZXIpLCAkTWF5YmUoJC5GaW5pdGVOdW1iZXIpXSxcbiAgICAgIG1lYW4pO1xuXG4gIC8vLiAjIyMgSW50ZWdlclxuXG4gIC8vIyBldmVuIDo6IEludGVnZXIgLT4gQm9vbGVhblxuICAvLy5cbiAgLy8uIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBpbnRlZ2VyIGlzIGV2ZW47IGBmYWxzZWAgaWYgaXQgaXMgb2RkLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5ldmVuKDQyKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy5ldmVuKDk5KVxuICAvLy4gZmFsc2VcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBldmVuKG4pIHtcbiAgICByZXR1cm4gbiAlIDIgPT09IDA7XG4gIH1cbiAgUy5ldmVuID0gZGVmKCdldmVuJywge30sIFskLkludGVnZXIsICQuQm9vbGVhbl0sIGV2ZW4pO1xuXG4gIC8vIyBvZGQgOjogSW50ZWdlciAtPiBCb29sZWFuXG4gIC8vLlxuICAvLy4gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGludGVnZXIgaXMgb2RkOyBgZmFsc2VgIGlmIGl0IGlzIGV2ZW4uXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm9kZCg5OSlcbiAgLy8uIHRydWVcbiAgLy8uXG4gIC8vLiA+IFMub2RkKDQyKVxuICAvLy4gZmFsc2VcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBvZGQobikge1xuICAgIHJldHVybiBuICUgMiAhPT0gMDtcbiAgfVxuICBTLm9kZCA9IGRlZignb2RkJywge30sIFskLkludGVnZXIsICQuQm9vbGVhbl0sIG9kZCk7XG5cbiAgLy8uICMjIyBQYXJzZVxuXG4gIC8vIyBwYXJzZURhdGUgOjogU3RyaW5nIC0+IE1heWJlIFZhbGlkRGF0ZVxuICAvLy5cbiAgLy8uIFRha2VzIGEgc3RyaW5nIGFuZCByZXR1cm5zIEp1c3QgdGhlIGRhdGUgcmVwcmVzZW50ZWQgYnkgdGhlIHN0cmluZ1xuICAvLy4gaWYgaXQgZG9lcyBpbiBmYWN0IHJlcHJlc2VudCBhIGRhdGU7IE5vdGhpbmcgb3RoZXJ3aXNlLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5wYXJzZURhdGUoJzIwMTEtMDEtMTlUMTc6NDA6MDBaJylcbiAgLy8uIEp1c3QobmV3IERhdGUoJzIwMTEtMDEtMTlUMTc6NDA6MDAuMDAwWicpKVxuICAvLy5cbiAgLy8uID4gUy5wYXJzZURhdGUoJ3RvZGF5JylcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBwYXJzZURhdGUocykge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUocyk7XG4gICAgcmV0dXJuIGlzTmFOKGRhdGUudmFsdWVPZigpKSA/IE5vdGhpbmcgOiBKdXN0KGRhdGUpO1xuICB9XG4gIFMucGFyc2VEYXRlID1cbiAgZGVmKCdwYXJzZURhdGUnLCB7fSwgWyQuU3RyaW5nLCAkTWF5YmUoJC5WYWxpZERhdGUpXSwgcGFyc2VEYXRlKTtcblxuICAvLyAgcmVxdWlyZWROb25DYXB0dXJpbmdHcm91cCA6OiBBcnJheSBTdHJpbmcgLT4gU3RyaW5nXG4gIGZ1bmN0aW9uIHJlcXVpcmVkTm9uQ2FwdHVyaW5nR3JvdXAoeHMpIHtcbiAgICByZXR1cm4gJyg/OicgKyB4cy5qb2luKCd8JykgKyAnKSc7XG4gIH1cblxuICAvLyAgb3B0aW9uYWxOb25DYXB0dXJpbmdHcm91cCA6OiBBcnJheSBTdHJpbmcgLT4gU3RyaW5nXG4gIGZ1bmN0aW9uIG9wdGlvbmFsTm9uQ2FwdHVyaW5nR3JvdXAoeHMpIHtcbiAgICByZXR1cm4gcmVxdWlyZWROb25DYXB0dXJpbmdHcm91cCh4cykgKyAnPyc7XG4gIH1cblxuICAvLyAgdmFsaWRGbG9hdFJlcHIgOjogUmVnRXhwXG4gIHZhciB2YWxpZEZsb2F0UmVwciA9IG5ldyBSZWdFeHAoXG4gICAgJ14nICsgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydC1vZi1zdHJpbmcgYW5jaG9yXG4gICAgJ1xcXFxzKicgKyAgICAgICAgICAgICAgICAgIC8vIGFueSBudW1iZXIgb2YgbGVhZGluZyB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcbiAgICAnWystXT8nICsgICAgICAgICAgICAgICAgIC8vIG9wdGlvbmFsIHNpZ25cbiAgICByZXF1aXJlZE5vbkNhcHR1cmluZ0dyb3VwKFtcbiAgICAgICdJbmZpbml0eScsICAgICAgICAgICAgIC8vIFwiSW5maW5pdHlcIlxuICAgICAgJ05hTicsICAgICAgICAgICAgICAgICAgLy8gXCJOYU5cIlxuICAgICAgcmVxdWlyZWROb25DYXB0dXJpbmdHcm91cChbXG4gICAgICAgICdbMC05XSsnLCAgICAgICAgICAgICAvLyBudW1iZXJcbiAgICAgICAgJ1swLTldK1suXVswLTldKycsICAgIC8vIG51bWJlciB3aXRoIGludGVyaW9yIGRlY2ltYWwgcG9pbnRcbiAgICAgICAgJ1swLTldK1suXScsICAgICAgICAgIC8vIG51bWJlciB3aXRoIHRyYWlsaW5nIGRlY2ltYWwgcG9pbnRcbiAgICAgICAgJ1suXVswLTldKycgICAgICAgICAgIC8vIG51bWJlciB3aXRoIGxlYWRpbmcgZGVjaW1hbCBwb2ludFxuICAgICAgXSkgK1xuICAgICAgb3B0aW9uYWxOb25DYXB0dXJpbmdHcm91cChbXG4gICAgICAgICdbRWVdJyArICAgICAgICAgICAgICAvLyBcIkVcIiBvciBcImVcIlxuICAgICAgICAnWystXT8nICsgICAgICAgICAgICAgLy8gb3B0aW9uYWwgc2lnblxuICAgICAgICAnWzAtOV0rJyAgICAgICAgICAgICAgLy8gZXhwb25lbnRcbiAgICAgIF0pXG4gICAgXSkgK1xuICAgICdcXFxccyonICsgICAgICAgICAgICAgICAgICAvLyBhbnkgbnVtYmVyIG9mIHRyYWlsaW5nIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuICAgICckJyAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kLW9mLXN0cmluZyBhbmNob3JcbiAgKTtcblxuICAvLyMgcGFyc2VGbG9hdCA6OiBTdHJpbmcgLT4gTWF5YmUgTnVtYmVyXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBzdHJpbmcgYW5kIHJldHVybnMgSnVzdCB0aGUgbnVtYmVyIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmdcbiAgLy8uIGlmIGl0IGRvZXMgaW4gZmFjdCByZXByZXNlbnQgYSBudW1iZXI7IE5vdGhpbmcgb3RoZXJ3aXNlLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5wYXJzZUZsb2F0KCctMTIzLjQ1JylcbiAgLy8uIEp1c3QoLTEyMy40NSlcbiAgLy8uXG4gIC8vLiA+IFMucGFyc2VGbG9hdCgnZm9vLmJhcicpXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gcGFyc2VGbG9hdF8ocykge1xuICAgIHJldHVybiB2YWxpZEZsb2F0UmVwci50ZXN0KHMpID8gSnVzdChwYXJzZUZsb2F0KHMpKSA6IE5vdGhpbmc7XG4gIH1cbiAgUy5wYXJzZUZsb2F0ID1cbiAgZGVmKCdwYXJzZUZsb2F0Jywge30sIFskLlN0cmluZywgJE1heWJlKCQuTnVtYmVyKV0sIHBhcnNlRmxvYXRfKTtcblxuICAvLyAgUmFkaXggOjogVHlwZVxuICB2YXIgUmFkaXggPSAkLk51bGxhcnlUeXBlKFxuICAgICdzYW5jdHVhcnkvUmFkaXgnLFxuICAgICcnLFxuICAgIGZ1bmN0aW9uKHgpIHsgcmV0dXJuICQuSW50ZWdlci5fdGVzdCh4KSAmJiB4ID49IDIgJiYgeCA8PSAzNjsgfVxuICApO1xuXG4gIC8vIyBwYXJzZUludCA6OiBSYWRpeCAtPiBTdHJpbmcgLT4gTWF5YmUgSW50ZWdlclxuICAvLy5cbiAgLy8uIFRha2VzIGEgcmFkaXggKGFuIGludGVnZXIgYmV0d2VlbiAyIGFuZCAzNiBpbmNsdXNpdmUpIGFuZCBhIHN0cmluZyxcbiAgLy8uIGFuZCByZXR1cm5zIEp1c3QgdGhlIG51bWJlciByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nIGlmIGl0IGRvZXMgaW5cbiAgLy8uIGZhY3QgcmVwcmVzZW50IGEgbnVtYmVyIGluIHRoZSBiYXNlIHNwZWNpZmllZCBieSB0aGUgcmFkaXg7IE5vdGhpbmdcbiAgLy8uIG90aGVyd2lzZS5cbiAgLy8uXG4gIC8vLiBUaGlzIGZ1bmN0aW9uIGlzIHN0cmljdGVyIHRoYW4gW2BwYXJzZUludGBdW3BhcnNlSW50XTogYSBzdHJpbmdcbiAgLy8uIGlzIGNvbnNpZGVyZWQgdG8gcmVwcmVzZW50IGFuIGludGVnZXIgb25seSBpZiBhbGwgaXRzIG5vbi1wcmVmaXhcbiAgLy8uIGNoYXJhY3RlcnMgYXJlIG1lbWJlcnMgb2YgdGhlIGNoYXJhY3RlciBzZXQgc3BlY2lmaWVkIGJ5IHRoZSByYWRpeC5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMucGFyc2VJbnQoMTAsICctNDInKVxuICAvLy4gSnVzdCgtNDIpXG4gIC8vLlxuICAvLy4gPiBTLnBhcnNlSW50KDE2LCAnMHhGRicpXG4gIC8vLiBKdXN0KDI1NSlcbiAgLy8uXG4gIC8vLiA+IFMucGFyc2VJbnQoMTYsICcweEdHJylcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBwYXJzZUludF8ocmFkaXgsIHMpIHtcbiAgICB2YXIgY2hhcnNldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonLnNsaWNlKDAsIHJhZGl4KTtcbiAgICB2YXIgcGF0dGVybiA9IG5ldyBSZWdFeHAoJ15bJyArIGNoYXJzZXQgKyAnXSskJywgJ2knKTtcblxuICAgIHZhciB0ID0gcy5yZXBsYWNlKC9eWystXS8sICcnKTtcbiAgICBpZiAocGF0dGVybi50ZXN0KHJhZGl4ID09PSAxNiA/IHQucmVwbGFjZSgvXjB4L2ksICcnKSA6IHQpKSB7XG4gICAgICB2YXIgbiA9IHBhcnNlSW50KHMsIHJhZGl4KTtcbiAgICAgIGlmICgkLkludGVnZXIuX3Rlc3QobikpIHJldHVybiBKdXN0KG4pO1xuICAgIH1cbiAgICByZXR1cm4gTm90aGluZztcbiAgfVxuICBTLnBhcnNlSW50ID1cbiAgZGVmKCdwYXJzZUludCcsIHt9LCBbUmFkaXgsICQuU3RyaW5nLCAkTWF5YmUoJC5JbnRlZ2VyKV0sIHBhcnNlSW50Xyk7XG5cbiAgLy8jIHBhcnNlSnNvbiA6OiAoQW55IC0+IEJvb2xlYW4pIC0+IFN0cmluZyAtPiBNYXliZSBhXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBwcmVkaWNhdGUgYW5kIGEgc3RyaW5nIHdoaWNoIG1heSBvciBtYXkgbm90IGJlIHZhbGlkIEpTT04sIGFuZFxuICAvLy4gcmV0dXJucyBKdXN0IHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYEpTT04ucGFyc2VgIHRvIHRoZSBzdHJpbmcgKmlmKiB0aGVcbiAgLy8uIHJlc3VsdCBzYXRpc2ZpZXMgdGhlIHByZWRpY2F0ZTsgTm90aGluZyBvdGhlcndpc2UuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnBhcnNlSnNvbigkLnRlc3QoW10sICQuQXJyYXkoJC5JbnRlZ2VyKSksICdbJylcbiAgLy8uIE5vdGhpbmdcbiAgLy8uXG4gIC8vLiA+IFMucGFyc2VKc29uKCQudGVzdChbXSwgJC5BcnJheSgkLkludGVnZXIpKSwgJ1tcIjFcIixcIjJcIixcIjNcIl0nKVxuICAvLy4gTm90aGluZ1xuICAvLy5cbiAgLy8uID4gUy5wYXJzZUpzb24oJC50ZXN0KFtdLCAkLkFycmF5KCQuSW50ZWdlcikpLCAnWzAsMS41LDMsNC41XScpXG4gIC8vLiBOb3RoaW5nXG4gIC8vLlxuICAvLy4gPiBTLnBhcnNlSnNvbigkLnRlc3QoW10sICQuQXJyYXkoJC5JbnRlZ2VyKSksICdbMSwyLDNdJylcbiAgLy8uIEp1c3QoWzEsIDIsIDNdKVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHBhcnNlSnNvbihwcmVkLCBzKSB7XG4gICAgcmV0dXJuIFouZmlsdGVyKHByZWQsIGVuY2FzZShKU09OLnBhcnNlLCBzKSk7XG4gIH1cbiAgUy5wYXJzZUpzb24gPVxuICBkZWYoJ3BhcnNlSnNvbicsIHt9LCBbJC5QcmVkaWNhdGUoJC5BbnkpLCAkLlN0cmluZywgJE1heWJlKGEpXSwgcGFyc2VKc29uKTtcblxuICAvLy4gIyMjIFJlZ0V4cFxuXG4gIC8vICBNYXRjaCA6OiBUeXBlXG4gIHZhciBNYXRjaCA9ICQuUmVjb3JkVHlwZSh7XG4gICAgbWF0Y2g6ICQuU3RyaW5nLFxuICAgIGdyb3VwczogJC5BcnJheSgkTWF5YmUoJC5TdHJpbmcpKVxuICB9KTtcblxuICAvLyAgdG9NYXRjaCA6OiBBcnJheSBTdHJpbmc/IC0+IE1hdGNoXG4gIGZ1bmN0aW9uIHRvTWF0Y2goc3MpIHtcbiAgICByZXR1cm4ge21hdGNoOiBzc1swXSwgZ3JvdXBzOiBzcy5zbGljZSgxKS5tYXAodG9NYXliZSl9O1xuICB9XG5cbiAgLy8gIHdpdGhSZWdleCA6OiAoUmVnRXhwLCAoKSAtPiBhKSAtPiBhXG4gIGZ1bmN0aW9uIHdpdGhSZWdleChwYXR0ZXJuLCB0aHVuaykge1xuICAgIHZhciBsYXN0SW5kZXggPSBwYXR0ZXJuLmxhc3RJbmRleDtcbiAgICB2YXIgcmVzdWx0ID0gdGh1bmsoKTtcbiAgICBwYXR0ZXJuLmxhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8jIHJlZ2V4IDo6IFJlZ2V4RmxhZ3MgLT4gU3RyaW5nIC0+IFJlZ0V4cFxuICAvLy5cbiAgLy8uIFRha2VzIGEgW1JlZ2V4RmxhZ3NdW10gYW5kIGEgcGF0dGVybiwgYW5kIHJldHVybnMgYSBSZWdFeHAuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnJlZ2V4KCdnJywgJzpcXFxcZCs6JylcbiAgLy8uIC86XFxkKzovZ1xuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHJlZ2V4KGZsYWdzLCBzb3VyY2UpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzb3VyY2UsIGZsYWdzKTtcbiAgfVxuICBTLnJlZ2V4ID0gZGVmKCdyZWdleCcsIHt9LCBbJC5SZWdleEZsYWdzLCAkLlN0cmluZywgJC5SZWdFeHBdLCByZWdleCk7XG5cbiAgLy8jIHJlZ2V4RXNjYXBlIDo6IFN0cmluZyAtPiBTdHJpbmdcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIHN0cmluZyB3aGljaCBtYXkgY29udGFpbiByZWd1bGFyIGV4cHJlc3Npb24gbWV0YWNoYXJhY3RlcnMsXG4gIC8vLiBhbmQgcmV0dXJucyBhIHN0cmluZyB3aXRoIHRob3NlIG1ldGFjaGFyYWN0ZXJzIGVzY2FwZWQuXG4gIC8vLlxuICAvLy4gUHJvcGVydGllczpcbiAgLy8uXG4gIC8vLiAgIC0gYGZvcmFsbCBzIDo6IFN0cmluZy4gUy50ZXN0KFMucmVnZXgoJycsIFMucmVnZXhFc2NhcGUocykpLCBzKSA9IHRydWVgXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnJlZ2V4RXNjYXBlKCctPSp7WFlafSo9LScpXG4gIC8vLiAnXFxcXC09XFxcXCpcXFxce1hZWlxcXFx9XFxcXCo9XFxcXC0nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgIHJldHVybiBzLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJyk7XG4gIH1cbiAgUy5yZWdleEVzY2FwZSA9IGRlZigncmVnZXhFc2NhcGUnLCB7fSwgWyQuU3RyaW5nLCAkLlN0cmluZ10sIHJlZ2V4RXNjYXBlKTtcblxuICAvLyMgdGVzdCA6OiBSZWdFeHAgLT4gU3RyaW5nIC0+IEJvb2xlYW5cbiAgLy8uXG4gIC8vLiBUYWtlcyBhIHBhdHRlcm4gYW5kIGEgc3RyaW5nLCBhbmQgcmV0dXJucyBgdHJ1ZWAgW2lmZl1bXSB0aGUgcGF0dGVyblxuICAvLy4gbWF0Y2hlcyB0aGUgc3RyaW5nLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy50ZXN0KC9eYS8sICdhYmFjdXMnKVxuICAvLy4gdHJ1ZVxuICAvLy5cbiAgLy8uID4gUy50ZXN0KC9eYS8sICdiYW5hbmEnKVxuICAvLy4gZmFsc2VcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiB0ZXN0KHBhdHRlcm4sIHMpIHtcbiAgICByZXR1cm4gd2l0aFJlZ2V4KHBhdHRlcm4sIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGF0dGVybi50ZXN0KHMpOyB9KTtcbiAgfVxuICBTLnRlc3QgPSBkZWYoJ3Rlc3QnLCB7fSwgWyQuUmVnRXhwLCAkLlN0cmluZywgJC5Cb29sZWFuXSwgdGVzdCk7XG5cbiAgLy8jIG1hdGNoIDo6IE5vbkdsb2JhbFJlZ0V4cCAtPiBTdHJpbmcgLT4gTWF5YmUgeyBtYXRjaCA6OiBTdHJpbmcsIGdyb3VwcyA6OiBBcnJheSAoTWF5YmUgU3RyaW5nKSB9XG4gIC8vLlxuICAvLy4gVGFrZXMgYSBwYXR0ZXJuIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgSnVzdCBhIG1hdGNoIHJlY29yZCBpZiB0aGVcbiAgLy8uIHBhdHRlcm4gbWF0Y2hlcyB0aGUgc3RyaW5nOyBOb3RoaW5nIG90aGVyd2lzZS5cbiAgLy8uXG4gIC8vLiBgZ3JvdXBzIDo6IEFycmF5IChNYXliZSBTdHJpbmcpYCBhY2tub3dsZWRnZXMgdGhlIGV4aXN0ZW5jZSBvZiBvcHRpb25hbFxuICAvLy4gY2FwdHVyaW5nIGdyb3Vwcy5cbiAgLy8uXG4gIC8vLiBQcm9wZXJ0aWVzOlxuICAvLy5cbiAgLy8uICAgLSBgZm9yYWxsIHAgOjogUGF0dGVybiwgcyA6OiBTdHJpbmcuXG4gIC8vLiAgICAgIFMuaGVhZChTLm1hdGNoQWxsKFMucmVnZXgoJ2cnLCBwKSwgcykpID0gUy5tYXRjaChTLnJlZ2V4KCcnLCBwKSwgcylgXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2BtYXRjaEFsbGBdKCNtYXRjaEFsbCkuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLm1hdGNoKC8oZ29vZCk/YnllLywgJ2dvb2RieWUnKVxuICAvLy4gSnVzdCh7bWF0Y2g6ICdnb29kYnllJywgZ3JvdXBzOiBbSnVzdCgnZ29vZCcpXX0pXG4gIC8vLlxuICAvLy4gPiBTLm1hdGNoKC8oZ29vZCk/YnllLywgJ2J5ZScpXG4gIC8vLiBKdXN0KHttYXRjaDogJ2J5ZScsIGdyb3VwczogW05vdGhpbmddfSlcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBtYXRjaChwYXR0ZXJuLCBzKSB7XG4gICAgcmV0dXJuIFoubWFwKHRvTWF0Y2gsIHRvTWF5YmUocy5tYXRjaChwYXR0ZXJuKSkpO1xuICB9XG4gIFMubWF0Y2ggPVxuICBkZWYoJ21hdGNoJywge30sIFskLk5vbkdsb2JhbFJlZ0V4cCwgJC5TdHJpbmcsICRNYXliZShNYXRjaCldLCBtYXRjaCk7XG5cbiAgLy8jIG1hdGNoQWxsIDo6IEdsb2JhbFJlZ0V4cCAtPiBTdHJpbmcgLT4gQXJyYXkgeyBtYXRjaCA6OiBTdHJpbmcsIGdyb3VwcyA6OiBBcnJheSAoTWF5YmUgU3RyaW5nKSB9XG4gIC8vLlxuICAvLy4gVGFrZXMgYSBwYXR0ZXJuIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgbWF0Y2ggcmVjb3Jkcy5cbiAgLy8uXG4gIC8vLiBgZ3JvdXBzIDo6IEFycmF5IChNYXliZSBTdHJpbmcpYCBhY2tub3dsZWRnZXMgdGhlIGV4aXN0ZW5jZSBvZiBvcHRpb25hbFxuICAvLy4gY2FwdHVyaW5nIGdyb3Vwcy5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYG1hdGNoYF0oI21hdGNoKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMubWF0Y2hBbGwoL0AoW2Etel0rKS9nLCAnSGVsbG8sIHdvcmxkIScpXG4gIC8vLiBbXVxuICAvLy5cbiAgLy8uID4gUy5tYXRjaEFsbCgvQChbYS16XSspL2csICdIZWxsbywgQGZvbyEgSGVsbG8sIEBiYXIhIEhlbGxvLCBAYmF6IScpXG4gIC8vLiBbIHttYXRjaDogJ0Bmb28nLCBncm91cHM6IFtKdXN0KCdmb28nKV19LFxuICAvLy4gLiB7bWF0Y2g6ICdAYmFyJywgZ3JvdXBzOiBbSnVzdCgnYmFyJyldfSxcbiAgLy8uIC4ge21hdGNoOiAnQGJheicsIGdyb3VwczogW0p1c3QoJ2JheicpXX0gXVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIG1hdGNoQWxsKHBhdHRlcm4sIHMpIHtcbiAgICByZXR1cm4gd2l0aFJlZ2V4KHBhdHRlcm4sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHVuZm9sZHIoZnVuY3Rpb24oXykge1xuICAgICAgICByZXR1cm4gWi5tYXAoZnVuY3Rpb24oc3MpIHtcbiAgICAgICAgICByZXR1cm4gW3RvTWF0Y2goc3MpLCBudWxsXTtcbiAgICAgICAgfSwgdG9NYXliZShwYXR0ZXJuLmV4ZWMocykpKTtcbiAgICAgIH0sIFtdKTtcbiAgICB9KTtcbiAgfVxuICBTLm1hdGNoQWxsID1cbiAgZGVmKCdtYXRjaEFsbCcsIHt9LCBbJC5HbG9iYWxSZWdFeHAsICQuU3RyaW5nLCAkLkFycmF5KE1hdGNoKV0sIG1hdGNoQWxsKTtcblxuICAvLy4gIyMjIFN0cmluZ1xuXG4gIC8vIyB0b1VwcGVyIDo6IFN0cmluZyAtPiBTdHJpbmdcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIHRoZSB1cHBlci1jYXNlIGVxdWl2YWxlbnQgb2YgaXRzIGFyZ3VtZW50LlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgdG9Mb3dlcmBdKCN0b0xvd2VyKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMudG9VcHBlcignQUJDIGRlZiAxMjMnKVxuICAvLy4gJ0FCQyBERUYgMTIzJ1xuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHRvVXBwZXIocykge1xuICAgIHJldHVybiBzLnRvVXBwZXJDYXNlKCk7XG4gIH1cbiAgUy50b1VwcGVyID0gZGVmKCd0b1VwcGVyJywge30sIFskLlN0cmluZywgJC5TdHJpbmddLCB0b1VwcGVyKTtcblxuICAvLyMgdG9Mb3dlciA6OiBTdHJpbmcgLT4gU3RyaW5nXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUgbG93ZXItY2FzZSBlcXVpdmFsZW50IG9mIGl0cyBhcmd1bWVudC5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYHRvVXBwZXJgXSgjdG9VcHBlcikuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRvTG93ZXIoJ0FCQyBkZWYgMTIzJylcbiAgLy8uICdhYmMgZGVmIDEyMydcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiB0b0xvd2VyKHMpIHtcbiAgICByZXR1cm4gcy50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIFMudG9Mb3dlciA9IGRlZigndG9Mb3dlcicsIHt9LCBbJC5TdHJpbmcsICQuU3RyaW5nXSwgdG9Mb3dlcik7XG5cbiAgLy8jIHRyaW0gOjogU3RyaW5nIC0+IFN0cmluZ1xuICAvLy5cbiAgLy8uIFN0cmlwcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnRyaW0oJ1xcdFxcdCBmb28gYmFyIFxcbicpXG4gIC8vLiAnZm9vIGJhcidcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiB0cmltKHMpIHtcbiAgICByZXR1cm4gcy50cmltKCk7XG4gIH1cbiAgUy50cmltID0gZGVmKCd0cmltJywge30sIFskLlN0cmluZywgJC5TdHJpbmddLCB0cmltKTtcblxuICAvLyMgc3RyaXBQcmVmaXggOjogU3RyaW5nIC0+IFN0cmluZyAtPiBNYXliZSBTdHJpbmdcbiAgLy8uXG4gIC8vLiBSZXR1cm5zIEp1c3QgdGhlIHBvcnRpb24gb2YgdGhlIGdpdmVuIHN0cmluZyAodGhlIHNlY29uZCBhcmd1bWVudCkgbGVmdFxuICAvLy4gYWZ0ZXIgcmVtb3ZpbmcgdGhlIGdpdmVuIHByZWZpeCAodGhlIGZpcnN0IGFyZ3VtZW50KSBpZiB0aGUgc3RyaW5nIHN0YXJ0c1xuICAvLy4gd2l0aCB0aGUgcHJlZml4OyBOb3RoaW5nIG90aGVyd2lzZS5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYHN0cmlwU3VmZml4YF0oI3N0cmlwU3VmZml4KS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuc3RyaXBQcmVmaXgoJ2h0dHBzOi8vJywgJ2h0dHBzOi8vc2FuY3R1YXJ5LmpzLm9yZycpXG4gIC8vLiBKdXN0KCdzYW5jdHVhcnkuanMub3JnJylcbiAgLy8uXG4gIC8vLiA+IFMuc3RyaXBQcmVmaXgoJ2h0dHBzOi8vJywgJ2h0dHA6Ly9zYW5jdHVhcnkuanMub3JnJylcbiAgLy8uIE5vdGhpbmdcbiAgLy8uIGBgYFxuICBmdW5jdGlvbiBzdHJpcFByZWZpeChwcmVmaXgsIHMpIHtcbiAgICB2YXIgaWR4ID0gcHJlZml4Lmxlbmd0aDtcbiAgICByZXR1cm4gcy5zbGljZSgwLCBpZHgpID09PSBwcmVmaXggPyBKdXN0KHMuc2xpY2UoaWR4KSkgOiBOb3RoaW5nO1xuICB9XG4gIFMuc3RyaXBQcmVmaXggPVxuICBkZWYoJ3N0cmlwUHJlZml4Jywge30sIFskLlN0cmluZywgJC5TdHJpbmcsICRNYXliZSgkLlN0cmluZyldLCBzdHJpcFByZWZpeCk7XG5cbiAgLy8jIHN0cmlwU3VmZml4IDo6IFN0cmluZyAtPiBTdHJpbmcgLT4gTWF5YmUgU3RyaW5nXG4gIC8vLlxuICAvLy4gUmV0dXJucyBKdXN0IHRoZSBwb3J0aW9uIG9mIHRoZSBnaXZlbiBzdHJpbmcgKHRoZSBzZWNvbmQgYXJndW1lbnQpIGxlZnRcbiAgLy8uIGFmdGVyIHJlbW92aW5nIHRoZSBnaXZlbiBzdWZmaXggKHRoZSBmaXJzdCBhcmd1bWVudCkgaWYgdGhlIHN0cmluZyBlbmRzXG4gIC8vLiB3aXRoIHRoZSBzdWZmaXg7IE5vdGhpbmcgb3RoZXJ3aXNlLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgc3RyaXBQcmVmaXhgXSgjc3RyaXBQcmVmaXgpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5zdHJpcFN1ZmZpeCgnLm1kJywgJ1JFQURNRS5tZCcpXG4gIC8vLiBKdXN0KCdSRUFETUUnKVxuICAvLy5cbiAgLy8uID4gUy5zdHJpcFN1ZmZpeCgnLm1kJywgJ1JFQURNRScpXG4gIC8vLiBOb3RoaW5nXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gc3RyaXBTdWZmaXgoc3VmZml4LCBzKSB7XG4gICAgdmFyIGlkeCA9IHMubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aDsgIC8vIHZhbHVlIG1heSBiZSBuZWdhdGl2ZVxuICAgIHJldHVybiBzLnNsaWNlKGlkeCkgPT09IHN1ZmZpeCA/IEp1c3Qocy5zbGljZSgwLCBpZHgpKSA6IE5vdGhpbmc7XG4gIH1cbiAgUy5zdHJpcFN1ZmZpeCA9XG4gIGRlZignc3RyaXBTdWZmaXgnLCB7fSwgWyQuU3RyaW5nLCAkLlN0cmluZywgJE1heWJlKCQuU3RyaW5nKV0sIHN0cmlwU3VmZml4KTtcblxuICAvLyMgd29yZHMgOjogU3RyaW5nIC0+IEFycmF5IFN0cmluZ1xuICAvLy5cbiAgLy8uIFRha2VzIGEgc3RyaW5nIGFuZCByZXR1cm5zIHRoZSBhcnJheSBvZiB3b3JkcyB0aGUgc3RyaW5nIGNvbnRhaW5zXG4gIC8vLiAod29yZHMgYXJlIGRlbGltaXRlZCBieSB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMpLlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgdW53b3Jkc2BdKCN1bndvcmRzKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMud29yZHMoJyBmb28gYmFyIGJheiAnKVxuICAvLy4gWydmb28nLCAnYmFyJywgJ2JheiddXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gd29yZHMocykge1xuICAgIHZhciB3b3JkcyA9IHMuc3BsaXQoL1xccysvKTtcbiAgICByZXR1cm4gd29yZHMuc2xpY2Uod29yZHNbMF0gPT09ICcnID8gMSA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgIHdvcmRzW3dvcmRzLmxlbmd0aCAtIDFdID09PSAnJyA/IC0xIDogSW5maW5pdHkpO1xuICB9XG4gIFMud29yZHMgPSBkZWYoJ3dvcmRzJywge30sIFskLlN0cmluZywgJC5BcnJheSgkLlN0cmluZyldLCB3b3Jkcyk7XG5cbiAgLy8jIHVud29yZHMgOjogQXJyYXkgU3RyaW5nIC0+IFN0cmluZ1xuICAvLy5cbiAgLy8uIFRha2VzIGFuIGFycmF5IG9mIHdvcmRzIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgb2Ygam9pbmluZyB0aGUgd29yZHNcbiAgLy8uIHdpdGggc2VwYXJhdGluZyBzcGFjZXMuXG4gIC8vLlxuICAvLy4gU2VlIGFsc28gW2B3b3Jkc2BdKCN3b3JkcykuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLnVud29yZHMoWydmb28nLCAnYmFyJywgJ2JheiddKVxuICAvLy4gJ2ZvbyBiYXIgYmF6J1xuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHVud29yZHMoeHMpIHtcbiAgICByZXR1cm4geHMuam9pbignICcpO1xuICB9XG4gIFMudW53b3JkcyA9IGRlZigndW53b3JkcycsIHt9LCBbJC5BcnJheSgkLlN0cmluZyksICQuU3RyaW5nXSwgdW53b3Jkcyk7XG5cbiAgLy8jIGxpbmVzIDo6IFN0cmluZyAtPiBBcnJheSBTdHJpbmdcbiAgLy8uXG4gIC8vLiBUYWtlcyBhIHN0cmluZyBhbmQgcmV0dXJucyB0aGUgYXJyYXkgb2YgbGluZXMgdGhlIHN0cmluZyBjb250YWluc1xuICAvLy4gKGxpbmVzIGFyZSBkZWxpbWl0ZWQgYnkgbmV3bGluZXM6IGAnXFxuJ2Agb3IgYCdcXHJcXG4nYCBvciBgJ1xccidgKS5cbiAgLy8uIFRoZSByZXN1bHRpbmcgc3RyaW5ncyBkbyBub3QgY29udGFpbiBuZXdsaW5lcy5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYHVubGluZXNgXSgjdW5saW5lcykuXG4gIC8vLlxuICAvLy4gYGBgamF2YXNjcmlwdFxuICAvLy4gPiBTLmxpbmVzKCdmb29cXG5iYXJcXG5iYXpcXG4nKVxuICAvLy4gWydmb28nLCAnYmFyJywgJ2JheiddXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gbGluZXMocykge1xuICAgIHZhciBtYXRjaCA9IHMucmVwbGFjZSgvXFxyXFxuPy9nLCAnXFxuJykubWF0Y2goL14oPz1bXFxzXFxTXSkuKi9nbSk7XG4gICAgcmV0dXJuIG1hdGNoID09IG51bGwgPyBbXSA6IG1hdGNoO1xuICB9XG4gIFMubGluZXMgPSBkZWYoJ2xpbmVzJywge30sIFskLlN0cmluZywgJC5BcnJheSgkLlN0cmluZyldLCBsaW5lcyk7XG5cbiAgLy8jIHVubGluZXMgOjogQXJyYXkgU3RyaW5nIC0+IFN0cmluZ1xuICAvLy5cbiAgLy8uIFRha2VzIGFuIGFycmF5IG9mIGxpbmVzIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgb2Ygam9pbmluZyB0aGUgbGluZXNcbiAgLy8uIGFmdGVyIGFwcGVuZGluZyBhIHRlcm1pbmF0aW5nIGxpbmUgZmVlZCAoYCdcXG4nYCkgdG8gZWFjaC5cbiAgLy8uXG4gIC8vLiBTZWUgYWxzbyBbYGxpbmVzYF0oI2xpbmVzKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMudW5saW5lcyhbJ2ZvbycsICdiYXInLCAnYmF6J10pXG4gIC8vLiAnZm9vXFxuYmFyXFxuYmF6XFxuJ1xuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHVubGluZXMoeHMpIHtcbiAgICByZXR1cm4gWi5yZWR1Y2UoZnVuY3Rpb24ocywgeCkgeyByZXR1cm4gcyArIHggKyAnXFxuJzsgfSwgJycsIHhzKTtcbiAgfVxuICBTLnVubGluZXMgPSBkZWYoJ3VubGluZXMnLCB7fSwgWyQuQXJyYXkoJC5TdHJpbmcpLCAkLlN0cmluZ10sIHVubGluZXMpO1xuXG4gIC8vIyBzcGxpdE9uIDo6IFN0cmluZyAtPiBTdHJpbmcgLT4gQXJyYXkgU3RyaW5nXG4gIC8vLlxuICAvLy4gUmV0dXJucyB0aGUgc3Vic3RyaW5ncyBvZiBpdHMgc2Vjb25kIGFyZ3VtZW50IHNlcGFyYXRlZCBieSBvY2N1cnJlbmNlc1xuICAvLy4gb2YgaXRzIGZpcnN0IGFyZ3VtZW50LlxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgam9pbldpdGhgXSgjam9pbldpdGgpIGFuZCBbYHNwbGl0T25SZWdleGBdKCNzcGxpdE9uUmVnZXgpLlxuICAvLy5cbiAgLy8uIGBgYGphdmFzY3JpcHRcbiAgLy8uID4gUy5zcGxpdE9uKCc6OicsICdmb286OmJhcjo6YmF6JylcbiAgLy8uIFsnZm9vJywgJ2JhcicsICdiYXonXVxuICAvLy4gYGBgXG4gIGZ1bmN0aW9uIHNwbGl0T24oc2VwYXJhdG9yLCBzKSB7XG4gICAgcmV0dXJuIHMuc3BsaXQoc2VwYXJhdG9yKTtcbiAgfVxuICBTLnNwbGl0T24gPVxuICBkZWYoJ3NwbGl0T24nLCB7fSwgWyQuU3RyaW5nLCAkLlN0cmluZywgJC5BcnJheSgkLlN0cmluZyldLCBzcGxpdE9uKTtcblxuICAvLyMgc3BsaXRPblJlZ2V4IDo6IEdsb2JhbFJlZ0V4cCAtPiBTdHJpbmcgLT4gQXJyYXkgU3RyaW5nXG4gIC8vLlxuICAvLy4gVGFrZXMgYSBwYXR0ZXJuIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBvZiBzcGxpdHRpbmcgdGhlXG4gIC8vLiBzdHJpbmcgYXQgZXZlcnkgbm9uLW92ZXJsYXBwaW5nIG9jY3VycmVuY2Ugb2YgdGhlIHBhdHRlcm4uXG4gIC8vLlxuICAvLy4gUHJvcGVydGllczpcbiAgLy8uXG4gIC8vLiAgIC0gYGZvcmFsbCBzIDo6IFN0cmluZywgdCA6OiBTdHJpbmcuXG4gIC8vLiAgICAgIFMuam9pbldpdGgocywgUy5zcGxpdE9uUmVnZXgoUy5yZWdleCgnZycsIFMucmVnZXhFc2NhcGUocykpLCB0KSlcbiAgLy8uICAgICAgPSB0YFxuICAvLy5cbiAgLy8uIFNlZSBhbHNvIFtgc3BsaXRPbmBdKCNzcGxpdE9uKS5cbiAgLy8uXG4gIC8vLiBgYGBqYXZhc2NyaXB0XG4gIC8vLiA+IFMuc3BsaXRPblJlZ2V4KC9bLDtdWyBdKi9nLCAnZm9vLCBiYXIsIGJheicpXG4gIC8vLiBbJ2ZvbycsICdiYXInLCAnYmF6J11cbiAgLy8uXG4gIC8vLiA+IFMuc3BsaXRPblJlZ2V4KC9bLDtdWyBdKi9nLCAnZm9vO2JhcjtiYXonKVxuICAvLy4gWydmb28nLCAnYmFyJywgJ2JheiddXG4gIC8vLiBgYGBcbiAgZnVuY3Rpb24gc3BsaXRPblJlZ2V4KHBhdHRlcm4sIHMpIHtcbiAgICByZXR1cm4gd2l0aFJlZ2V4KHBhdHRlcm4sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgbWF0Y2g7XG4gICAgICB3aGlsZSAoKG1hdGNoID0gcGF0dGVybi5leGVjKHMpKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChwYXR0ZXJuLmxhc3RJbmRleCA9PT0gbGFzdEluZGV4ICYmIG1hdGNoWzBdID09PSAnJykge1xuICAgICAgICAgIGlmIChwYXR0ZXJuLmxhc3RJbmRleCA9PT0gcy5sZW5ndGgpIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgcGF0dGVybi5sYXN0SW5kZXggKz0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQucHVzaChzLnNsaWNlKGxhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2gocy5zbGljZShsYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH1cbiAgUy5zcGxpdE9uUmVnZXggPVxuICBkZWYoJ3NwbGl0T25SZWdleCcsXG4gICAgICB7fSxcbiAgICAgIFskLkdsb2JhbFJlZ0V4cCwgJC5TdHJpbmcsICQuQXJyYXkoJC5TdHJpbmcpXSxcbiAgICAgIHNwbGl0T25SZWdleCk7XG5cbiAgcmV0dXJuIFM7XG5cbiAgLyogZXNsaW50LWVuYWJsZSBpbmRlbnQgKi9cblxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVNhbmN0dWFyeSh7Y2hlY2tUeXBlczogdHJ1ZSwgZW52OiBkZWZhdWx0RW52fSk7XG5cbn0pKTtcblxuLy8uIFskLkFycmF5XTogICAgICAgICAgdjpzYW5jdHVhcnktanMvc2FuY3R1YXJ5LWRlZiNBcnJheVxuLy8uIFskLlN0cmluZ106ICAgICAgICAgdjpzYW5jdHVhcnktanMvc2FuY3R1YXJ5LWRlZiNTdHJpbmdcbi8vLiBbQWx0XTogICAgICAgICAgICAgIHY6ZmFudGFzeWxhbmQvZmFudGFzeS1sYW5kI2FsdFxuLy8uIFtBbHRlcm5hdGl2ZV06ICAgICAgdjpmYW50YXN5bGFuZC9mYW50YXN5LWxhbmQjYWx0ZXJuYXRpdmVcbi8vLiBbQXBwbGljYXRpdmVdOiAgICAgIHY6ZmFudGFzeWxhbmQvZmFudGFzeS1sYW5kI2FwcGxpY2F0aXZlXG4vLy4gW0FwcGx5XTogICAgICAgICAgICB2OmZhbnRhc3lsYW5kL2ZhbnRhc3ktbGFuZCNhcHBseVxuLy8uIFtCaWZ1bmN0b3JdOiAgICAgICAgdjpmYW50YXN5bGFuZC9mYW50YXN5LWxhbmQjYmlmdW5jdG9yXG4vLy4gW0JpbmFyeVR5cGVdOiAgICAgICB2OnNhbmN0dWFyeS1qcy9zYW5jdHVhcnktZGVmI0JpbmFyeVR5cGVcbi8vLiBbRWl0aGVyXTogICAgICAgICAgICNlaXRoZXItdHlwZVxuLy8uIFtFeHRlbmRdOiAgICAgICAgICAgdjpmYW50YXN5bGFuZC9mYW50YXN5LWxhbmQjZXh0ZW5kXG4vLy4gW0ZhbnRhc3kgTGFuZF06ICAgICB2OmZhbnRhc3lsYW5kL2ZhbnRhc3ktbGFuZFxuLy8uIFtGb2xkYWJsZV06ICAgICAgICAgdjpmYW50YXN5bGFuZC9mYW50YXN5LWxhbmQjZm9sZGFibGVcbi8vLiBbSGFza2VsbF06ICAgICAgICAgIGh0dHBzOi8vd3d3Lmhhc2tlbGwub3JnL1xuLy8uIFtNYXliZV06ICAgICAgICAgICAgI21heWJlLXR5cGVcbi8vLiBbTW9uYWRdOiAgICAgICAgICAgIHY6ZmFudGFzeWxhbmQvZmFudGFzeS1sYW5kI21vbmFkXG4vLy4gW01vbm9pZF06ICAgICAgICAgICB2OmZhbnRhc3lsYW5kL2ZhbnRhc3ktbGFuZCNtb25vaWRcbi8vLiBbTnVsbGFibGVdOiAgICAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS1kZWYjTnVsbGFibGVcbi8vLiBbT3JkXTogICAgICAgICAgICAgIHY6ZmFudGFzeWxhbmQvZmFudGFzeS1sYW5kI29yZFxuLy8uIFtQdXJlU2NyaXB0XTogICAgICAgaHR0cDovL3d3dy5wdXJlc2NyaXB0Lm9yZy9cbi8vLiBbUmFtZGFdOiAgICAgICAgICAgIGh0dHA6Ly9yYW1kYWpzLmNvbS9cbi8vLiBbUmVnZXhGbGFnc106ICAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS1kZWYjUmVnZXhGbGFnc1xuLy8uIFtTZW1pZ3JvdXBdOiAgICAgICAgdjpmYW50YXN5bGFuZC9mYW50YXN5LWxhbmQjc2VtaWdyb3VwXG4vLy4gW1NlbWlncm91cG9pZF06ICAgICB2OmZhbnRhc3lsYW5kL2ZhbnRhc3ktbGFuZCNzZW1pZ3JvdXBvaWRcbi8vLiBbVHJhdmVyc2FibGVdOiAgICAgIHY6ZmFudGFzeWxhbmQvZmFudGFzeS1sYW5kI3RyYXZlcnNhYmxlXG4vLy4gW1VuYXJ5VHlwZV06ICAgICAgICB2OnNhbmN0dWFyeS1qcy9zYW5jdHVhcnktZGVmI1VuYXJ5VHlwZVxuLy8uIFtgTWF0aC5wb3dgXTogICAgICAgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9wb3dcbi8vLiBbYFouYWx0YF06ICAgICAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjYWx0XG4vLy4gW2BaLmFwYF06ICAgICAgICAgICB2OnNhbmN0dWFyeS1qcy9zYW5jdHVhcnktdHlwZS1jbGFzc2VzI2FwXG4vLy4gW2BaLmFwRmlyc3RgXTogICAgICB2OnNhbmN0dWFyeS1qcy9zYW5jdHVhcnktdHlwZS1jbGFzc2VzI2FwRmlyc3Rcbi8vLiBbYFouYXBTZWNvbmRgXTogICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjYXBTZWNvbmRcbi8vLiBbYFouYmltYXBgXTogICAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjYmltYXBcbi8vLiBbYFouY2hhaW5gXTogICAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjY2hhaW5cbi8vLiBbYFouY2hhaW5SZWNgXTogICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjY2hhaW5SZWNcbi8vLiBbYFouY29tcG9zZWBdOiAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjY29tcG9zZVxuLy8uIFtgWi5jb25jYXRgXTogICAgICAgdjpzYW5jdHVhcnktanMvc2FuY3R1YXJ5LXR5cGUtY2xhc3NlcyNjb25jYXRcbi8vLiBbYFouY29udHJhbWFwYF06ICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjY29udHJhbWFwXG4vLy4gW2BaLmVtcHR5YF06ICAgICAgICB2OnNhbmN0dWFyeS1qcy9zYW5jdHVhcnktdHlwZS1jbGFzc2VzI2VtcHR5XG4vLy4gW2BaLmVxdWFsc2BdOiAgICAgICB2OnNhbmN0dWFyeS1qcy9zYW5jdHVhcnktdHlwZS1jbGFzc2VzI2VxdWFsc1xuLy8uIFtgWi5leHRlbmRgXTogICAgICAgdjpzYW5jdHVhcnktanMvc2FuY3R1YXJ5LXR5cGUtY2xhc3NlcyNleHRlbmRcbi8vLiBbYFouZXh0cmFjdGBdOiAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjZXh0cmFjdFxuLy8uIFtgWi5maWx0ZXJgXTogICAgICAgdjpzYW5jdHVhcnktanMvc2FuY3R1YXJ5LXR5cGUtY2xhc3NlcyNmaWx0ZXJcbi8vLiBbYFouZmlsdGVyTWBdOiAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjZmlsdGVyTVxuLy8uIFtgWi5ndGBdOiAgICAgICAgICAgdjpzYW5jdHVhcnktanMvc2FuY3R1YXJ5LXR5cGUtY2xhc3NlcyNndFxuLy8uIFtgWi5ndGVgXTogICAgICAgICAgdjpzYW5jdHVhcnktanMvc2FuY3R1YXJ5LXR5cGUtY2xhc3NlcyNndGVcbi8vLiBbYFouaWRgXTogICAgICAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjaWRcbi8vLiBbYFouaW52ZXJ0YF06ICAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjaW52ZXJ0XG4vLy4gW2BaLmpvaW5gXTogICAgICAgICB2OnNhbmN0dWFyeS1qcy9zYW5jdHVhcnktdHlwZS1jbGFzc2VzI2pvaW5cbi8vLiBbYFoubHRgXTogICAgICAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjbHRcbi8vLiBbYFoubHRlYF06ICAgICAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjbHRlXG4vLy4gW2BaLm1hcGBdOiAgICAgICAgICB2OnNhbmN0dWFyeS1qcy9zYW5jdHVhcnktdHlwZS1jbGFzc2VzI21hcFxuLy8uIFtgWi5vZmBdOiAgICAgICAgICAgdjpzYW5jdHVhcnktanMvc2FuY3R1YXJ5LXR5cGUtY2xhc3NlcyNvZlxuLy8uIFtgWi5wcm9tYXBgXTogICAgICAgdjpzYW5jdHVhcnktanMvc2FuY3R1YXJ5LXR5cGUtY2xhc3NlcyNwcm9tYXBcbi8vLiBbYFouc2VxdWVuY2VgXTogICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjc2VxdWVuY2Vcbi8vLiBbYFoudG9TdHJpbmdgXTogICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjdG9TdHJpbmdcbi8vLiBbYFoudHJhdmVyc2VgXTogICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjdHJhdmVyc2Vcbi8vLiBbYFouemVyb2BdOiAgICAgICAgIHY6c2FuY3R1YXJ5LWpzL3NhbmN0dWFyeS10eXBlLWNsYXNzZXMjemVyb1xuLy8uIFtgb2ZgXTogICAgICAgICAgICAgdjpmYW50YXN5bGFuZC9mYW50YXN5LWxhbmQjb2YtbWV0aG9kXG4vLy4gW2VxdWl2YWxlbmNlXTogICAgICBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FcXVpdmFsZW5jZV9yZWxhdGlvblxuLy8uIFtpZmZdOiAgICAgICAgICAgICAgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSWZfYW5kX29ubHlfaWZcbi8vLiBbcGFyc2VJbnRdOiAgICAgICAgIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL3BhcnNlSW50XG4vLy4gW3NhbmN0dWFyeS1kZWZdOiAgICB2OnNhbmN0dWFyeS1qcy9zYW5jdHVhcnktZGVmXG4vLy4gW3N0YWJsZSBzb3J0XTogICAgICBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Tb3J0aW5nX2FsZ29yaXRobSNTdGFiaWxpdHlcbi8vLiBbdGhydXNoXTogICAgICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9yYWdhbndhbGQtZGVwcmVjYXRlZC9ob21vaWNvbmljL2Jsb2IvbWFzdGVyLzIwMDgtMTAtMzAvdGhydXNoLm1hcmtkb3duXG4vLy4gW3R5cGUgaWRlbnRpZmllcl06ICB2OnNhbmN0dWFyeS1qcy9zYW5jdHVhcnktdHlwZS1pZGVudGlmaWVyc1xuLy8uXG4vLy4gW2BFaXRoZXIjZmFudGFzeS1sYW5kL2JpbWFwYF06ICAgICAgI0VpdGhlci5wcm90b3R5cGUuZmFudGFzeS1sYW5kL2JpbWFwXG4vLy4gW2BFaXRoZXIjZmFudGFzeS1sYW5kL21hcGBdOiAgICAgICAgI0VpdGhlci5wcm90b3R5cGUuZmFudGFzeS1sYW5kL21hcFxuLy8uIFtgRWl0aGVyI3RvU3RyaW5nYF06ICAgICAgICAgICAgICAgICNFaXRoZXIucHJvdG90eXBlLnRvU3RyaW5nXG4vLy4gW2BNYXliZSN0b1N0cmluZ2BdOiAgICAgICAgICAgICAgICAgI01heWJlLnByb3RvdHlwZS50b1N0cmluZ1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2FuY3R1YXJ5L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {(function(global, f){\n\n  'use strict';\n\n  /*istanbul ignore next*/\n  if(module && typeof module.exports !== 'undefined'){\n    module.exports = f(\n      __webpack_require__(9),\n      __webpack_require__(3),\n      __webpack_require__(1)\n    );\n  }else{\n    global.flutureSanctuaryTypes = f(\n      global.Fluture,\n      global.sanctuaryDef,\n      global.sanctuaryTypeIdentifiers\n    );\n  }\n\n}(/*istanbul ignore next*/(global || window || this), function(Future, $, type){\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  FutureType :: (Type, Type) -> Type\n  var FutureType = $.BinaryType(\n    type.parse(Future[$$type]).name,\n    'https://github.com/fluture-js/Fluture#readme',\n    Future.isFuture,\n    Future.extractLeft,\n    Future.extractRight\n  );\n\n  //  ConcurrentFutureType :: (Type, Type) -> Type\n  var ConcurrentFutureType = $.BinaryType(\n    type.parse(Future.Par[$$type]).name,\n    'https://github.com/fluture-js/Fluture#concurrentfuture',\n    function(x){ return type(x) === Future.Par[$$type] },\n    function(f){ return Future.seq(f).extractLeft() },\n    function(f){ return Future.seq(f).extractRight() }\n  );\n\n  var env = [\n    FutureType($.Unknown, $.Unknown),\n    ConcurrentFutureType($.Unknown, $.Unknown)\n  ];\n\n  return {\n    FutureType: FutureType,\n    ConcurrentFutureType: ConcurrentFutureType,\n    env: env\n  };\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10), __webpack_require__(5)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmx1dHVyZS1zYW5jdHVhcnktdHlwZXMvaW5kZXguanM/NWNlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oZ2xvYmFsLCBmKXtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovXG4gIGlmKG1vZHVsZSAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKXtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGYoXG4gICAgICByZXF1aXJlKCdmbHV0dXJlJyksXG4gICAgICByZXF1aXJlKCdzYW5jdHVhcnktZGVmJyksXG4gICAgICByZXF1aXJlKCdzYW5jdHVhcnktdHlwZS1pZGVudGlmaWVycycpXG4gICAgKTtcbiAgfWVsc2V7XG4gICAgZ2xvYmFsLmZsdXR1cmVTYW5jdHVhcnlUeXBlcyA9IGYoXG4gICAgICBnbG9iYWwuRmx1dHVyZSxcbiAgICAgIGdsb2JhbC5zYW5jdHVhcnlEZWYsXG4gICAgICBnbG9iYWwuc2FuY3R1YXJ5VHlwZUlkZW50aWZpZXJzXG4gICAgKTtcbiAgfVxuXG59KC8qaXN0YW5idWwgaWdub3JlIG5leHQqLyhnbG9iYWwgfHwgd2luZG93IHx8IHRoaXMpLCBmdW5jdGlvbihGdXR1cmUsICQsIHR5cGUpe1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyAgJCR0eXBlIDo6IFN0cmluZ1xuICB2YXIgJCR0eXBlID0gJ0BAdHlwZSc7XG5cbiAgLy8gIEZ1dHVyZVR5cGUgOjogKFR5cGUsIFR5cGUpIC0+IFR5cGVcbiAgdmFyIEZ1dHVyZVR5cGUgPSAkLkJpbmFyeVR5cGUoXG4gICAgdHlwZS5wYXJzZShGdXR1cmVbJCR0eXBlXSkubmFtZSxcbiAgICAnaHR0cHM6Ly9naXRodWIuY29tL2ZsdXR1cmUtanMvRmx1dHVyZSNyZWFkbWUnLFxuICAgIEZ1dHVyZS5pc0Z1dHVyZSxcbiAgICBGdXR1cmUuZXh0cmFjdExlZnQsXG4gICAgRnV0dXJlLmV4dHJhY3RSaWdodFxuICApO1xuXG4gIC8vICBDb25jdXJyZW50RnV0dXJlVHlwZSA6OiAoVHlwZSwgVHlwZSkgLT4gVHlwZVxuICB2YXIgQ29uY3VycmVudEZ1dHVyZVR5cGUgPSAkLkJpbmFyeVR5cGUoXG4gICAgdHlwZS5wYXJzZShGdXR1cmUuUGFyWyQkdHlwZV0pLm5hbWUsXG4gICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9mbHV0dXJlLWpzL0ZsdXR1cmUjY29uY3VycmVudGZ1dHVyZScsXG4gICAgZnVuY3Rpb24oeCl7IHJldHVybiB0eXBlKHgpID09PSBGdXR1cmUuUGFyWyQkdHlwZV0gfSxcbiAgICBmdW5jdGlvbihmKXsgcmV0dXJuIEZ1dHVyZS5zZXEoZikuZXh0cmFjdExlZnQoKSB9LFxuICAgIGZ1bmN0aW9uKGYpeyByZXR1cm4gRnV0dXJlLnNlcShmKS5leHRyYWN0UmlnaHQoKSB9XG4gICk7XG5cbiAgdmFyIGVudiA9IFtcbiAgICBGdXR1cmVUeXBlKCQuVW5rbm93biwgJC5Vbmtub3duKSxcbiAgICBDb25jdXJyZW50RnV0dXJlVHlwZSgkLlVua25vd24sICQuVW5rbm93bilcbiAgXTtcblxuICByZXR1cm4ge1xuICAgIEZ1dHVyZVR5cGU6IEZ1dHVyZVR5cGUsXG4gICAgQ29uY3VycmVudEZ1dHVyZVR5cGU6IENvbmN1cnJlbnRGdXR1cmVUeXBlLFxuICAgIGVudjogZW52XG4gIH07XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZsdXR1cmUtc2FuY3R1YXJ5LXR5cGVzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SourceLink = exports.Pic = exports.LoadingSpinner = exports.Main = exports.Arrow = exports.ArrowButtons = exports.Nav = exports.LetterButton = undefined;\n\nvar _preact = __webpack_require__(2);\n\nvar _preactEmotion = __webpack_require__(32);\n\nvar _preactEmotion2 = _interopRequireDefault(_preactEmotion);\n\nvar _polished = __webpack_require__(17);\n\nvar P = _interopRequireWildcard(_polished);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _preactEmotion.injectGlobal)(\"*{font-family:BlinkMacSystemFont,\\\"Segoe UI\\\",Helvetica,sans-serif;box-sizing:border-box;margin:0;padding:0;}\");\n\nvar LetterButton = /*#__PURE__*/exports.LetterButton = (0, _preactEmotion2.default)(\"button\", {\n  target: \"css-16o68ge0\"\n})(\"display:flex;min-width:10px;border-radius:3px;font-size:1rem;text-transform:uppercase;padding:5px;margin:5px;border:2px solid black;background:\", function (_ref) {\n  var active = _ref.active,\n      color = _ref.color;\n  return active ? P.darken(0.2, color) : \"white\";\n}, \";\");\n\nvar Nav = /*#__PURE__*/exports.Nav = (0, _preactEmotion2.default)(\"nav\", {\n  target: \"css-16o68ge1\"\n})(\"display:flex;justify-content:center;align-items:space-around;\");\n\nvar ArrowButtons = /*#__PURE__*/exports.ArrowButtons = (0, _preactEmotion2.default)(\"div\", {\n  target: \"css-16o68ge2\"\n})(\"display:flex;justify-content:center;align-items:space-around;button:last-of-type{margin-left:3px;}padding-top:10px;\");\n\nvar Arrow = /*#__PURE__*/exports.Arrow = (0, _preactEmotion2.default)(\"button\", {\n  target: \"css-16o68ge3\"\n})(\"padding:5px 14px;font-size:1.5rem;border:2px solid black;border-radius:3px;background:#fff;\");\n\nvar Main = /*#__PURE__*/exports.Main = (0, _preactEmotion2.default)(\"main\", {\n  target: \"css-16o68ge4\"\n})(\"display:grid;grid-gap:10px;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));padding:20px;\");\n\nvar loading = /*#__PURE__*/(0, _preactEmotion.keyframes)(\"to{transform:rotate(360deg);}}\");\n\nvar Spinner = /*#__PURE__*/(0, _preactEmotion2.default)(\"div\", {\n  target: \"css-16o68ge5\"\n})(\"width:40px;height:40px;border-radius:50%;background:\", function (_ref2) {\n  var color = _ref2.color;\n  return P.lighten(0.1, color);\n}, \";border-top:4px solid #fff;border-right:4px solid #fff;border-bottom:4px solid \", function (_ref3) {\n  var color = _ref3.color;\n  return P.darken(0.2, color);\n}, \";border-left:4px solid \", function (_ref4) {\n  var color = _ref4.color;\n  return P.darken(0.2, color);\n}, \";animation:\", loading, \" 1.2s infinite linear;\");\n\nvar SpinnerWrapper = /*#__PURE__*/(0, _preactEmotion2.default)(\"div\", {\n  target: \"css-16o68ge6\"\n})(\"position:absolute;top:25%;left:50%;margin:-20px 0 0 -20px;background:\", function (_ref5) {\n  var color = _ref5.color;\n  return P.lighten(0.1, color);\n}, \";\");\n\nvar LoadingSpinner = exports.LoadingSpinner = function LoadingSpinner(_ref6) {\n  var color = _ref6.color;\n  return (0, _preact.h)(\n    SpinnerWrapper,\n    { color: color },\n    (0, _preact.h)(Spinner, { color: color })\n  );\n};\n\nvar Img = /*#__PURE__*/(0, _preactEmotion2.default)(\"img\", {\n  target: \"css-16o68ge7\"\n})(\"width:300px;height:300px;border:3px solid black;border-radius:3px;\");\n\nvar PicWrapper = /*#__PURE__*/(0, _preactEmotion2.default)(\"div\", {\n  target: \"css-16o68ge8\"\n})(\"display:flex;flex-direction:column;flex-wrap:no-wrap;justify-content:center;align-content:flex-start;align-items:center;h3{font-weight:400;text-transform:uppercase;}\");\n\nvar Pic = exports.Pic = function Pic(_ref7) {\n  var name = _ref7.name,\n      src = _ref7.src;\n  return (0, _preact.h)(\n    PicWrapper,\n    null,\n    (0, _preact.h)(\n      \"h3\",\n      null,\n      name\n    ),\n    (0, _preact.h)(Img, { src: src, alt: name })\n  );\n};\n\nvar LinkWrapper = /*#__PURE__*/(0, _preactEmotion2.default)(\"div\", {\n  target: \"css-16o68ge9\"\n})(\"display:flex;justify-content:center;align-items:center;\");\n\nvar Link = /*#__PURE__*/(0, _preactEmotion2.default)(\"a\", {\n  target: \"css-16o68ge10\"\n})(\"margin-top:20px;padding:1em 2.5em;border-radius:3px;background-color:\", function (_ref8) {\n  var color = _ref8.color;\n  return P.darken(0.4, color);\n}, \";;color:#fff;font-size:1rem;text-decoration:none;\");\n\nvar SourceLink = exports.SourceLink = function SourceLink(_ref9) {\n  var color = _ref9.color;\n  return (0, _preact.h)(\n    LinkWrapper,\n    null,\n    (0, _preact.h)(\n      Link,\n      { href: \"https://glitch.com/edit/#!/handsomely-twister\", color: color },\n      \"SOURCE\"\n    )\n  );\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMuanM/MzQ0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCwgeyBrZXlmcmFtZXMsIGluamVjdEdsb2JhbCB9IGZyb20gXCJwcmVhY3QtZW1vdGlvblwiO1xuaW1wb3J0ICogYXMgUCBmcm9tIFwicG9saXNoZWRcIjtcblxuaW5qZWN0R2xvYmFsYFxuICAqIHtcbiAgICBmb250LWZhbWlseTogQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgTGV0dGVyQnV0dG9uID0gc3R5bGVkKFwiYnV0dG9uXCIpYFxuICBkaXNwbGF5OiBmbGV4O1xuICBtaW4td2lkdGg6IDEwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgZm9udC1zaXplOiAxcmVtO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBwYWRkaW5nOiA1cHg7XG4gIG1hcmdpbjogNXB4O1xuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcbiAgYmFja2dyb3VuZDogJHsoeyBhY3RpdmUsIGNvbG9yIH0pID0+XG4gICAgYWN0aXZlID8gUC5kYXJrZW4oMC4yLCBjb2xvcikgOiBcIndoaXRlXCJ9O1xuYDtcblxuZXhwb3J0IGNvbnN0IE5hdiA9IHN0eWxlZChcIm5hdlwiKWBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBzcGFjZS1hcm91bmQ7XG5gO1xuXG5leHBvcnQgY29uc3QgQXJyb3dCdXR0b25zID0gc3R5bGVkKFwiZGl2XCIpYFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IHNwYWNlLWFyb3VuZDtcbiAgYnV0dG9uOmxhc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgfVxuICBwYWRkaW5nLXRvcDogMTBweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBBcnJvdyA9IHN0eWxlZChcImJ1dHRvblwiKWBcbiAgcGFkZGluZzogNXB4IDE0cHg7XG4gIGZvbnQtc2l6ZTogMS41cmVtO1xuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuYDtcblxuZXhwb3J0IGNvbnN0IE1haW4gPSBzdHlsZWQoXCJtYWluXCIpYFxuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLWdhcDogMTBweDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgzMDBweCwgMWZyKSk7XG4gIHBhZGRpbmc6IDIwcHg7XG5gO1xuXG5jb25zdCBsb2FkaW5nID0ga2V5ZnJhbWVzYFxuXHR0byB7IHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH1cbn1cbmA7XG5cbmNvbnN0IFNwaW5uZXIgPSBzdHlsZWQoXCJkaXZcIilgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgYmFja2dyb3VuZDogJHsoeyBjb2xvciB9KSA9PiBQLmxpZ2h0ZW4oMC4xLCBjb2xvcil9O1xuXG4gIGJvcmRlci10b3A6IDRweCBzb2xpZCAjZmZmO1xuICBib3JkZXItcmlnaHQ6IDRweCBzb2xpZCAjZmZmO1xuICBib3JkZXItYm90dG9tOiA0cHggc29saWQgJHsoeyBjb2xvciB9KSA9PiBQLmRhcmtlbigwLjIsIGNvbG9yKX07XG4gIGJvcmRlci1sZWZ0OiA0cHggc29saWQgJHsoeyBjb2xvciB9KSA9PiBQLmRhcmtlbigwLjIsIGNvbG9yKX07XG5cbiAgYW5pbWF0aW9uOiAke2xvYWRpbmd9IDEuMnMgaW5maW5pdGUgbGluZWFyO1xuYDtcblxuY29uc3QgU3Bpbm5lcldyYXBwZXIgPSBzdHlsZWQoXCJkaXZcIilgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAyNSU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luOiAtMjBweCAwIDAgLTIwcHg7XG4gIGJhY2tncm91bmQ6ICR7KHsgY29sb3IgfSkgPT4gUC5saWdodGVuKDAuMSwgY29sb3IpfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBMb2FkaW5nU3Bpbm5lciA9ICh7IGNvbG9yIH0pID0+IChcbiAgPFNwaW5uZXJXcmFwcGVyIGNvbG9yPXtjb2xvcn0+XG4gICAgPFNwaW5uZXIgY29sb3I9e2NvbG9yfSAvPlxuICA8L1NwaW5uZXJXcmFwcGVyPlxuKTtcblxuY29uc3QgSW1nID0gc3R5bGVkKFwiaW1nXCIpYFxuICB3aWR0aDogMzAwcHg7XG4gIGhlaWdodDogMzAwcHg7XG4gIGJvcmRlcjogM3B4IHNvbGlkIGJsYWNrO1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG5gO1xuXG5jb25zdCBQaWNXcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpYFxuICBkaXNwbGF5OmZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGZsZXgtd3JhcDogbm8td3JhcDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGgzIHtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBQaWMgPSAoeyBuYW1lLCBzcmMgfSkgPT4gKFxuICA8UGljV3JhcHBlcj5cbiAgICA8aDM+e25hbWV9PC9oMz5cbiAgICA8SW1nIHNyYz17c3JjfSBhbHQ9e25hbWV9IC8+XG4gIDwvUGljV3JhcHBlcj5cbik7XG5cbmNvbnN0IExpbmtXcmFwcGVyID0gc3R5bGVkKFwiZGl2XCIpYFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IExpbmsgPSBzdHlsZWQoXCJhXCIpYFxuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBwYWRkaW5nOiAxZW0gMi41ZW07XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHsoeyBjb2xvciB9KSA9PiBQLmRhcmtlbigwLjQsIGNvbG9yKX07O1xuICBjb2xvcjogI2ZmZjtcbiAgZm9udC1zaXplOiAxcmVtO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5gO1xuXG5leHBvcnQgY29uc3QgU291cmNlTGluayA9ICh7Y29sb3J9KSA9PiAoXG4gIDxMaW5rV3JhcHBlcj5cbiAgICA8TGluayBocmVmPVwiaHR0cHM6Ly9nbGl0Y2guY29tL2VkaXQvIyEvaGFuZHNvbWVseS10d2lzdGVyXCIgY29sb3I9e2NvbG9yfT5TT1VSQ0U8L0xpbms+XG4gIDwvTGlua1dyYXBwZXI+XG4pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9jb21wb25lbnRzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7QUFEQTtBQUNBOzs7OztBQUNBO0FBQ0E7QUFRQTtBQUFBO0FBQUE7QUFTQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBR0E7QUFBQTtBQUFBO0FBQ0E7QUFLQTtBQUFBO0FBQUE7QUFDQTtBQVNBO0FBQUE7QUFBQTtBQUNBO0FBT0E7QUFBQTtBQUFBO0FBQ0E7QUFNQTtBQUNBO0FBSUE7QUFBQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFJQTtBQUFBO0FBQUE7QUFLQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBREE7QUFDQTtBQUtBO0FBQUE7QUFBQTtBQUNBO0FBTUE7QUFBQTtBQUFBO0FBQ0E7QUFZQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFGQTtBQURBO0FBQ0E7QUFNQTtBQUFBO0FBQUE7QUFDQTtBQUtBO0FBQUE7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBS0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFEQTtBQURBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_preact__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_emotion_utils__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_emotion__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(34);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"sheet\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"l\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"useStylisPlugin\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"m\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"registered\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"k\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"inserted\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"h\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"css\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"a\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"keyframes\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"i\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"injectGlobal\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"g\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"fontFace\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"d\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"getRegisteredStyles\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"e\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"merge\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"j\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"cx\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"b\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"hydrate\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"f\"]; });\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"flush\", function() { return __WEBPACK_IMPORTED_MODULE_2_emotion__[\"c\"]; });\n\n\n\n\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar _contextTypes;\n\nvar channel = '__EMOTION_THEMING__';\nvar contextTypes = (_contextTypes = {}, _contextTypes[channel] = __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object, _contextTypes);\n\n/* global codegen */\nfunction setTheme(theme) {\n  this.setState({\n    theme: theme\n  });\n}\n\nfunction componentWillMount() {\n  if (this.context[channel] !== undefined) {\n    this.unsubscribe = this.context[channel].subscribe(setTheme.bind(this));\n  }\n}\n\nfunction componentWillUnmount() {\n  if (this.unsubscribe !== undefined) {\n    this.context[channel].unsubscribe(this.unsubscribe);\n  }\n}\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|accept|acceptCharset|accessKey|action|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan)|(on[A-Z].*)|((data|aria)-.*))$/;\nvar testOmitPropsOnStringTag = Object(__WEBPACK_IMPORTED_MODULE_1_emotion_utils__[\"e\" /* memoize */])(function (key) {\n  return reactPropsRegex.test(key);\n});\n\nvar testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {\n  return key !== 'theme' && key !== 'innerRef';\n};\n\nvar testAlwaysTrue = function testAlwaysTrue() {\n  return true;\n};\n\nvar omitAssign = function omitAssign(testFn, target) {\n  var i = 2;\n  var length = arguments.length;\n\n  for (; i < length; i++) {\n    var source = arguments[i];\n    var key = void 0;\n\n    for (key in source) {\n      if (testFn(key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar createStyled = function createStyled(tag, options) {\n  if (true) {\n    if (tag === undefined) {\n      throw new Error('You are trying to create a styled element with an undefined component.\\nYou may have forgotten to import it.');\n    }\n  }\n\n  var identifierName;\n  var stableClassName;\n  var staticClassName;\n\n  if (options !== undefined) {\n    identifierName = options.label;\n    stableClassName = options.target;\n    staticClassName = options.e;\n  }\n\n  var isReal = tag.__emotion_real === tag;\n  var baseTag = staticClassName === undefined ? isReal && tag.__emotion_base || tag : tag;\n  var omitFn = typeof baseTag === 'string' && baseTag.charAt(0) === baseTag.charAt(0).toLowerCase() ? testOmitPropsOnStringTag : testOmitPropsOnComponent;\n  return function (strings) {\n    var styles = isReal && tag[__WEBPACK_IMPORTED_MODULE_1_emotion_utils__[\"a\" /* STYLES_KEY */]] || [];\n\n    if (identifierName !== undefined) {\n      styles = styles.concat(\"label:\" + identifierName + \";\");\n    }\n\n    if (staticClassName === undefined) {\n      for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        interpolations[_key - 1] = arguments[_key];\n      }\n\n      if (strings == null || strings.raw === undefined) {\n        styles = styles.concat(strings, interpolations);\n      } else {\n        styles = interpolations.reduce(function (array, interp, i) {\n          return array.concat(interp, strings[i + 1]);\n        }, styles.concat(strings[0]));\n      }\n    }\n\n    var Styled =\n    /*#__PURE__*/\n    function (_Component) {\n      _inheritsLoose(Styled, _Component);\n\n      function Styled() {\n        return _Component.apply(this, arguments) || this;\n      }\n\n      var _proto = Styled.prototype;\n\n      _proto.render = function render() {\n        var props = this.props,\n            state = this.state;\n        this.mergedProps = omitAssign(testAlwaysTrue, {}, props, {\n          theme: state !== null && state.theme || props.theme || {}\n        });\n        var className = '';\n        var classInterpolations = [];\n\n        if (props.className) {\n          if (staticClassName === undefined) {\n            className += Object(__WEBPACK_IMPORTED_MODULE_2_emotion__[\"e\" /* getRegisteredStyles */])(classInterpolations, props.className);\n          } else {\n            className += props.className + \" \";\n          }\n        }\n\n        if (staticClassName === undefined) {\n          className += __WEBPACK_IMPORTED_MODULE_2_emotion__[\"a\" /* css */].apply(this, styles.concat(classInterpolations));\n        } else {\n          className += staticClassName;\n        }\n\n        if (stableClassName !== undefined) {\n          className += \" \" + stableClassName;\n        }\n\n        return Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"createElement\"])(baseTag, omitAssign(omitFn, {}, props, {\n          className: className,\n          ref: props.innerRef\n        }));\n      };\n\n      return Styled;\n    }(__WEBPACK_IMPORTED_MODULE_0_preact__[\"Component\"]);\n\n    Styled.prototype.componentWillMount = componentWillMount;\n    Styled.prototype.componentWillUnmount = componentWillUnmount;\n    Styled.displayName = identifierName !== undefined ? identifierName : \"Styled(\" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + \")\";\n    Styled.contextTypes = contextTypes;\n    Styled[__WEBPACK_IMPORTED_MODULE_1_emotion_utils__[\"a\" /* STYLES_KEY */]] = styles;\n    Styled.__emotion_base = baseTag;\n    Styled.__emotion_real = Styled;\n    Styled[__WEBPACK_IMPORTED_MODULE_1_emotion_utils__[\"c\" /* TARGET_KEY */]] = stableClassName;\n\n    Styled.withComponent = function (nextTag, nextOptions) {\n      return createStyled(nextTag, nextOptions !== undefined ? omitAssign(testAlwaysTrue, {}, options, nextOptions) : options)(styles);\n    };\n\n    return Styled;\n  };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (createStyled);\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJlYWN0LWVtb3Rpb24vZGlzdC9pbmRleC5lcy5qcz85MTg1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgeyBTVFlMRVNfS0VZLCBUQVJHRVRfS0VZLCBtZW1vaXplIH0gZnJvbSAnZW1vdGlvbi11dGlscyc7XG5pbXBvcnQgeyBjc3MsIGdldFJlZ2lzdGVyZWRTdHlsZXMgfSBmcm9tICdlbW90aW9uJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIF9jb250ZXh0VHlwZXM7XG5cbnZhciBjaGFubmVsID0gJ19fRU1PVElPTl9USEVNSU5HX18nO1xudmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbY2hhbm5lbF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfY29udGV4dFR5cGVzKTtcblxuLyogZ2xvYmFsIGNvZGVnZW4gKi9cbmZ1bmN0aW9uIHNldFRoZW1lKHRoZW1lKSB7XG4gIHRoaXMuc2V0U3RhdGUoe1xuICAgIHRoZW1lOiB0aGVtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICBpZiAodGhpcy5jb250ZXh0W2NoYW5uZWxdICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5jb250ZXh0W2NoYW5uZWxdLnN1YnNjcmliZShzZXRUaGVtZS5iaW5kKHRoaXMpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgaWYgKHRoaXMudW5zdWJzY3JpYmUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuY29udGV4dFtjaGFubmVsXS51bnN1YnNjcmliZSh0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfVxufVxuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRvd25sb2FkfGRyYWdnYWJsZXxlbmNUeXBlfGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFuKXwob25bQS1aXS4qKXwoKGRhdGF8YXJpYSktLiopKSQvO1xudmFyIHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA9IG1lbW9pemUoZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3Qoa2V5KTtcbn0pO1xuXG52YXIgdGVzdE9taXRQcm9wc09uQ29tcG9uZW50ID0gZnVuY3Rpb24gdGVzdE9taXRQcm9wc09uQ29tcG9uZW50KGtleSkge1xuICByZXR1cm4ga2V5ICE9PSAndGhlbWUnICYmIGtleSAhPT0gJ2lubmVyUmVmJztcbn07XG5cbnZhciB0ZXN0QWx3YXlzVHJ1ZSA9IGZ1bmN0aW9uIHRlc3RBbHdheXNUcnVlKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBvbWl0QXNzaWduID0gZnVuY3Rpb24gb21pdEFzc2lnbih0ZXN0Rm4sIHRhcmdldCkge1xuICB2YXIgaSA9IDI7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgIHZhciBrZXkgPSB2b2lkIDA7XG5cbiAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmICh0ZXN0Rm4oa2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgY3JlYXRlU3R5bGVkID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHRyeWluZyB0byBjcmVhdGUgYSBzdHlsZWQgZWxlbWVudCB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuXFxuWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlkZW50aWZpZXJOYW1lO1xuICB2YXIgc3RhYmxlQ2xhc3NOYW1lO1xuICB2YXIgc3RhdGljQ2xhc3NOYW1lO1xuXG4gIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZGVudGlmaWVyTmFtZSA9IG9wdGlvbnMubGFiZWw7XG4gICAgc3RhYmxlQ2xhc3NOYW1lID0gb3B0aW9ucy50YXJnZXQ7XG4gICAgc3RhdGljQ2xhc3NOYW1lID0gb3B0aW9ucy5lO1xuICB9XG5cbiAgdmFyIGlzUmVhbCA9IHRhZy5fX2Vtb3Rpb25fcmVhbCA9PT0gdGFnO1xuICB2YXIgYmFzZVRhZyA9IHN0YXRpY0NsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fYmFzZSB8fCB0YWcgOiB0YWc7XG4gIHZhciBvbWl0Rm4gPSB0eXBlb2YgYmFzZVRhZyA9PT0gJ3N0cmluZycgJiYgYmFzZVRhZy5jaGFyQXQoMCkgPT09IGJhc2VUYWcuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgPyB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgOiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQ7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5ncykge1xuICAgIHZhciBzdHlsZXMgPSBpc1JlYWwgJiYgdGFnW1NUWUxFU19LRVldIHx8IFtdO1xuXG4gICAgaWYgKGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcyA9IHN0eWxlcy5jb25jYXQoXCJsYWJlbDpcIiArIGlkZW50aWZpZXJOYW1lICsgXCI7XCIpO1xuICAgIH1cblxuICAgIGlmIChzdGF0aWNDbGFzc05hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGludGVycG9sYXRpb25zID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RyaW5ncyA9PSBudWxsIHx8IHN0cmluZ3MucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3R5bGVzID0gc3R5bGVzLmNvbmNhdChzdHJpbmdzLCBpbnRlcnBvbGF0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZXMgPSBpbnRlcnBvbGF0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGFycmF5LCBpbnRlcnAsIGkpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkuY29uY2F0KGludGVycCwgc3RyaW5nc1tpICsgMV0pO1xuICAgICAgICB9LCBzdHlsZXMuY29uY2F0KHN0cmluZ3NbMF0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgU3R5bGVkID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0c0xvb3NlKFN0eWxlZCwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFN0eWxlZCgpIHtcbiAgICAgICAgcmV0dXJuIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3RvID0gU3R5bGVkLnByb3RvdHlwZTtcblxuICAgICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5tZXJnZWRQcm9wcyA9IG9taXRBc3NpZ24odGVzdEFsd2F5c1RydWUsIHt9LCBwcm9wcywge1xuICAgICAgICAgIHRoZW1lOiBzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZS50aGVtZSB8fCBwcm9wcy50aGVtZSB8fCB7fVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgICAgICB2YXIgY2xhc3NJbnRlcnBvbGF0aW9ucyA9IFtdO1xuXG4gICAgICAgIGlmIChwcm9wcy5jbGFzc05hbWUpIHtcbiAgICAgICAgICBpZiAoc3RhdGljQ2xhc3NOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSArPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNsYXNzSW50ZXJwb2xhdGlvbnMsIHByb3BzLmNsYXNzTmFtZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSArPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdGljQ2xhc3NOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGFzc05hbWUgKz0gY3NzLmFwcGx5KHRoaXMsIHN0eWxlcy5jb25jYXQoY2xhc3NJbnRlcnBvbGF0aW9ucykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsYXNzTmFtZSArPSBzdGF0aWNDbGFzc05hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhYmxlQ2xhc3NOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGFzc05hbWUgKz0gXCIgXCIgKyBzdGFibGVDbGFzc05hbWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChiYXNlVGFnLCBvbWl0QXNzaWduKG9taXRGbiwge30sIHByb3BzLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgcmVmOiBwcm9wcy5pbm5lclJlZlxuICAgICAgICB9KSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gU3R5bGVkO1xuICAgIH0oQ29tcG9uZW50KTtcblxuICAgIFN0eWxlZC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gY29tcG9uZW50V2lsbE1vdW50O1xuICAgIFN0eWxlZC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBjb21wb25lbnRXaWxsVW5tb3VudDtcbiAgICBTdHlsZWQuZGlzcGxheU5hbWUgPSBpZGVudGlmaWVyTmFtZSAhPT0gdW5kZWZpbmVkID8gaWRlbnRpZmllck5hbWUgOiBcIlN0eWxlZChcIiArICh0eXBlb2YgYmFzZVRhZyA9PT0gJ3N0cmluZycgPyBiYXNlVGFnIDogYmFzZVRhZy5kaXNwbGF5TmFtZSB8fCBiYXNlVGFnLm5hbWUgfHwgJ0NvbXBvbmVudCcpICsgXCIpXCI7XG4gICAgU3R5bGVkLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbiAgICBTdHlsZWRbU1RZTEVTX0tFWV0gPSBzdHlsZXM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9iYXNlID0gYmFzZVRhZztcbiAgICBTdHlsZWQuX19lbW90aW9uX3JlYWwgPSBTdHlsZWQ7XG4gICAgU3R5bGVkW1RBUkdFVF9LRVldID0gc3RhYmxlQ2xhc3NOYW1lO1xuXG4gICAgU3R5bGVkLndpdGhDb21wb25lbnQgPSBmdW5jdGlvbiAobmV4dFRhZywgbmV4dE9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVTdHlsZWQobmV4dFRhZywgbmV4dE9wdGlvbnMgIT09IHVuZGVmaW5lZCA/IG9taXRBc3NpZ24odGVzdEFsd2F5c1RydWUsIHt9LCBvcHRpb25zLCBuZXh0T3B0aW9ucykgOiBvcHRpb25zKShzdHlsZXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3R5bGVkO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3R5bGVkO1xuZXhwb3J0ICogZnJvbSAnZW1vdGlvbic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3ByZWFjdC1lbW90aW9uL2Rpc3QvaW5kZXguZXMuanNcbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (factory) {\n\t true ? (module['exports'] = factory()) :\n\t\ttypeof define === 'function' && define['amd'] ? define(factory()) :\n\t\t\t(window['stylisRuleSheet'] = factory())\n}(function () {\n\n\t'use strict'\n\n\treturn function (insertRule) {\n\t\tvar delimiter = '/*|*/'\n\t\tvar needle = delimiter+'}'\n\n\t\tfunction toSheet (block) {\n\t\t\tif (block)\n\t\t\t\ttry {\n\t\t\t\t\tinsertRule(block + '}')\n\t\t\t\t} catch (e) {}\n\t\t}\n\n\t\treturn function ruleSheet (context, content, selectors, parents, line, column, length, at, depth) {\n\t\t\tswitch (context) {\n\t\t\t\t// property\n\t\t\t\tcase 1:\n\t\t\t\t\t// @import\n\t\t\t\t\tif (depth === 0 && content.charCodeAt(0) === 64)\n\t\t\t\t\t\tinsertRule(content)\n\t\t\t\t\tbreak\n\t\t\t\t// selector\n\t\t\t\tcase 2:\n\t\t\t\t\tif (at === 0)\n\t\t\t\t\t\treturn content + delimiter\n\t\t\t\t\tbreak\n\t\t\t\t// at-rule\n\t\t\t\tcase 3:\n\t\t\t\t\tswitch (at) {\n\t\t\t\t\t\t// @font-face, @page\n\t\t\t\t\t\tcase 102:\n\t\t\t\t\t\tcase 112:\n\t\t\t\t\t\t\treturn insertRule(selectors[0]+content), ''\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn content + delimiter\n\t\t\t\t\t}\n\t\t\t\tcase -2:\n\t\t\t\t\tcontent.split(needle).forEach(toSheet)\n\t\t\t}\n\t\t}\n\t}\n}))\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGlzLXJ1bGUtc2hlZXQvaW5kZXguanM/MjBjZiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gKG1vZHVsZVsnZXhwb3J0cyddID0gZmFjdG9yeSgpKSA6XG5cdFx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddID8gZGVmaW5lKGZhY3RvcnkoKSkgOlxuXHRcdFx0KHdpbmRvd1snc3R5bGlzUnVsZVNoZWV0J10gPSBmYWN0b3J5KCkpXG59KGZ1bmN0aW9uICgpIHtcblxuXHQndXNlIHN0cmljdCdcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluc2VydFJ1bGUpIHtcblx0XHR2YXIgZGVsaW1pdGVyID0gJy8qfCovJ1xuXHRcdHZhciBuZWVkbGUgPSBkZWxpbWl0ZXIrJ30nXG5cblx0XHRmdW5jdGlvbiB0b1NoZWV0IChibG9jaykge1xuXHRcdFx0aWYgKGJsb2NrKVxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGluc2VydFJ1bGUoYmxvY2sgKyAnfScpXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJ1bGVTaGVldCAoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzLCBwYXJlbnRzLCBsaW5lLCBjb2x1bW4sIGxlbmd0aCwgYXQsIGRlcHRoKSB7XG5cdFx0XHRzd2l0Y2ggKGNvbnRleHQpIHtcblx0XHRcdFx0Ly8gcHJvcGVydHlcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdC8vIEBpbXBvcnRcblx0XHRcdFx0XHRpZiAoZGVwdGggPT09IDAgJiYgY29udGVudC5jaGFyQ29kZUF0KDApID09PSA2NClcblx0XHRcdFx0XHRcdGluc2VydFJ1bGUoY29udGVudClcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHQvLyBzZWxlY3RvclxuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0aWYgKGF0ID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnQgKyBkZWxpbWl0ZXJcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHQvLyBhdC1ydWxlXG5cdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRzd2l0Y2ggKGF0KSB7XG5cdFx0XHRcdFx0XHQvLyBAZm9udC1mYWNlLCBAcGFnZVxuXHRcdFx0XHRcdFx0Y2FzZSAxMDI6XG5cdFx0XHRcdFx0XHRjYXNlIDExMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGluc2VydFJ1bGUoc2VsZWN0b3JzWzBdK2NvbnRlbnQpLCAnJ1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnQgKyBkZWxpbWl0ZXJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGNhc2UgLTI6XG5cdFx0XHRcdFx0Y29udGVudC5zcGxpdChuZWVkbGUpLmZvckVhY2godG9TaGVldClcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pKVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc3R5bGlzLXJ1bGUtc2hlZXQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (true) {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = __webpack_require__(35)(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcz8yOTIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar emptyFunction = __webpack_require__(20);\nvar invariant = __webpack_require__(21);\nvar warning = __webpack_require__(22);\nvar assign = __webpack_require__(36);\n\nvar ReactPropTypesSecret = __webpack_require__(23);\nvar checkPropTypes = __webpack_require__(37);\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (true) {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          invariant(\n            false,\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n        } else if (\"development\" !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            warning(\n              false,\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `%s` prop on `%s`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',\n              propFullName,\n              componentName\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunction.thatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n       true ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues);\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (propValue.hasOwnProperty(key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n       true ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        warning(\n          false,\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received %s at index %s.',\n          getPostfixForTypeWarning(checker),\n          i\n        );\n        return emptyFunction.thatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcz8wNDQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  var invariant = __webpack_require__(21);\n  var warning = __webpack_require__(22);\n  var ReactPropTypesSecret = __webpack_require__(23);\n  var loggedTypeFailures = {};\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (true) {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcy5qcz8yMWVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuICB2YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgICAgaWYgKHR5cGVTcGVjcy5oYXNPd25Qcm9wZXJ0eSh0eXBlU3BlY05hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuICAgICAgICAgIGludmFyaWFudCh0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gPT09ICdmdW5jdGlvbicsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgKyAndGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCVzYC4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSk7XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIHdhcm5pbmcoIWVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRXJyb3IsICclczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvcik7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlXG4gICAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgICAgICAgdmFyIHN0YWNrID0gZ2V0U3RhY2sgPyBnZXRTdGFjaygpIDogJyc7XG5cbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkICVzIHR5cGU6ICVzJXMnLCBsb2NhdGlvbiwgZXJyb3IubWVzc2FnZSwgc3RhY2sgIT0gbnVsbCA/IHN0YWNrIDogJycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2hlY2tQcm9wVHlwZXM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n");

/***/ })
/******/ ]);